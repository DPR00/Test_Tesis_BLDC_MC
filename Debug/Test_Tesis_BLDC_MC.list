
Test_Tesis_BLDC_MC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e9c  08004e9c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e9c  08004e9c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e9c  08004e9c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000003c  08004ee0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004ee0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb78  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002ebdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b2f  00000000  00000000  000328d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102ed  00000000  00000000  000343ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5be  00000000  00000000  000446ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  000d2cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e44 	.word	0x08004e44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08004e44 	.word	0x08004e44

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <PIDController_Update>:

	pid->out = 0.0f;

}

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68b8      	ldr	r0, [r7, #8]
 8000744:	f7ff fd06 	bl	8000154 <__aeabi_fsub>
 8000748:	4603      	mov	r3, r0
 800074a:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	6978      	ldr	r0, [r7, #20]
 8000754:	f7ff fe08 	bl	8000368 <__aeabi_fmul>
 8000758:	4603      	mov	r3, r0
 800075a:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	69dc      	ldr	r4, [r3, #28]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fdfd 	bl	8000368 <__aeabi_fmul>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4619      	mov	r1, r3
 8000778:	4610      	mov	r0, r2
 800077a:	f7ff fdf5 	bl	8000368 <__aeabi_fmul>
 800077e:	4603      	mov	r3, r0
 8000780:	461d      	mov	r5, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	6979      	ldr	r1, [r7, #20]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fce5 	bl	8000158 <__addsf3>
 800078e:	4603      	mov	r3, r0
 8000790:	4619      	mov	r1, r3
 8000792:	4628      	mov	r0, r5
 8000794:	f7ff fde8 	bl	8000368 <__aeabi_fmul>
 8000798:	4603      	mov	r3, r0
 800079a:	4619      	mov	r1, r3
 800079c:	4620      	mov	r0, r4
 800079e:	f7ff fcdb 	bl	8000158 <__addsf3>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	61da      	str	r2, [r3, #28]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMax) {
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	69da      	ldr	r2, [r3, #28]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4610      	mov	r0, r2
 80007b6:	f7ff ff93 	bl	80006e0 <__aeabi_fcmpgt>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d004      	beq.n	80007ca <PIDController_Update+0x96>

        pid->integrator = pid->limMax;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	e00e      	b.n	80007e8 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMin) {
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f7ff ff65 	bl	80006a4 <__aeabi_fcmplt>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <PIDController_Update+0xb4>

        pid->integrator = pid->limMin;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	61da      	str	r2, [r3, #28]

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fcb2 	bl	8000158 <__addsf3>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461c      	mov	r4, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fca8 	bl	8000154 <__aeabi_fsub>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fdad 	bl	8000368 <__aeabi_fmul>
 800080e:	4603      	mov	r3, r0
 8000810:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4619      	mov	r1, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fc9d 	bl	8000158 <__addsf3>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4619      	mov	r1, r3
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fc93 	bl	8000154 <__aeabi_fsub>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f7ff fd95 	bl	8000368 <__aeabi_fmul>
 800083e:	4603      	mov	r3, r0
 8000840:	4619      	mov	r1, r3
 8000842:	4620      	mov	r0, r4
 8000844:	f7ff fc88 	bl	8000158 <__addsf3>
 8000848:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800084a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	4619      	mov	r1, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fc7f 	bl	8000158 <__addsf3>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4619      	mov	r1, r3
 8000864:	4610      	mov	r0, r2
 8000866:	f7ff fc77 	bl	8000158 <__addsf3>
 800086a:	4603      	mov	r3, r0
 800086c:	4619      	mov	r1, r3
 800086e:	4620      	mov	r0, r4
 8000870:	f7ff fe2e 	bl	80004d0 <__aeabi_fdiv>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	6939      	ldr	r1, [r7, #16]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc68 	bl	8000158 <__addsf3>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f7ff fc60 	bl	8000158 <__addsf3>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f7ff ff18 	bl	80006e0 <__aeabi_fcmpgt>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d004      	beq.n	80008c0 <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008be:	e00e      	b.n	80008de <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f7ff feea 	bl	80006a4 <__aeabi_fcmplt>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	691a      	ldr	r2, [r3, #16]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}

080008f6 <PIDController_Reset>:

void PIDController_Reset(PIDController *pid) {
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
 	pid->prevError  = 0.0f;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f04f 0200 	mov.w	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 f921 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f8cd 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 fb5d 	bl	8000ffc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000942:	f000 f919 	bl	8000b78 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000946:	f000 f9b9 	bl	8000cbc <MX_TIM1_Init>
  MX_TIM2_Init();
 800094a:	f000 fa6f 	bl	8000e2c <MX_TIM2_Init>
  MX_TIM3_Init();
 800094e:	f000 fab9 	bl	8000ec4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000952:	f000 fb05 	bl	8000f60 <MX_TIM4_Init>
  MX_CAN_Init();
 8000956:	f000 f94d 	bl	8000bf4 <MX_CAN_Init>
  MX_I2C1_Init();
 800095a:	f000 f981 	bl	8000c60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Inicializamos los timer timers
  HAL_TIM_Base_Start(&htim1);	// Timer de PWMs (10kH)
 800095e:	484c      	ldr	r0, [pc, #304]	; (8000a90 <main+0x160>)
 8000960:	f003 fa92 	bl	8003e88 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);	// Timer principal (2.5 kHz)
 8000964:	484b      	ldr	r0, [pc, #300]	; (8000a94 <main+0x164>)
 8000966:	f003 fad9 	bl	8003f1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);		// Timer para delay de microsegundos
 800096a:	484b      	ldr	r0, [pc, #300]	; (8000a98 <main+0x168>)
 800096c:	f003 fa8c 	bl	8003e88 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);	// Timer para el control (10Hz)
 8000970:	484a      	ldr	r0, [pc, #296]	; (8000a9c <main+0x16c>)
 8000972:	f003 fad3 	bl	8003f1c <HAL_TIM_Base_Start_IT>

  // Inicializamos los 3 canales de PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000976:	2100      	movs	r1, #0
 8000978:	4845      	ldr	r0, [pc, #276]	; (8000a90 <main+0x160>)
 800097a:	f003 fb79 	bl	8004070 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800097e:	2104      	movs	r1, #4
 8000980:	4843      	ldr	r0, [pc, #268]	; (8000a90 <main+0x160>)
 8000982:	f003 fb75 	bl	8004070 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000986:	2108      	movs	r1, #8
 8000988:	4841      	ldr	r0, [pc, #260]	; (8000a90 <main+0x160>)
 800098a:	f003 fb71 	bl	8004070 <HAL_TIM_PWM_Start>

  // Iniciamos con 0 de duty los 3 PWM HIGH de loS MOSFETS
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <main+0x160>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <main+0x160>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800099e:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <main+0x160>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	63da      	str	r2, [r3, #60]	; 0x3c

  // Inicializamos en low las salidas LOW de los MOSFETS
  HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	483c      	ldr	r0, [pc, #240]	; (8000aa0 <main+0x170>)
 80009ae:	f002 fb42 	bl	8003036 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b8:	4839      	ldr	r0, [pc, #228]	; (8000aa0 <main+0x170>)
 80009ba:	f002 fb3c 	bl	8003036 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c4:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <main+0x170>)
 80009c6:	f002 fb36 	bl	8003036 <HAL_GPIO_WritePin>

  // Incializamos el led de testeo apagado
  HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13,  GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <main+0x174>)
 80009d2:	f002 fb30 	bl	8003036 <HAL_GPIO_WritePin>

  // Leemos los hall por primera vez
  read_hall();
 80009d6:	f000 fbd3 	bl	8001180 <read_hall>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer2_flag == 1){
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <main+0x178>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d10f      	bne.n	8000a02 <main+0xd2>
		  get_adc();
 80009e2:	f000 fb8f 	bl	8001104 <get_adc>
		  read_hall();
 80009e6:	f000 fbcb 	bl	8001180 <read_hall>

		  if (direction == 0) bldc_move();
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <main+0x17c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <main+0xc8>
 80009f2:	f000 fc11 	bl	8001218 <bldc_move>
 80009f6:	e001      	b.n	80009fc <main+0xcc>
		  else bldc_move_back();
 80009f8:	f000 fd28 	bl	800144c <bldc_move_back>

		  timer2_flag = 0;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <main+0x178>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	  }

	  if (timer4_flag == 1){
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <main+0x180>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d126      	bne.n	8000a58 <main+0x128>

		  // Acá se realiza el control PID y Stanley
		  // CONTROL PID
		  uint8_t u = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]

		  PIDController_Update(&pid, desired_speed_rpm, current_speed_rpm);
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <main+0x184>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <main+0x188>)
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4828      	ldr	r0, [pc, #160]	; (8000abc <main+0x18c>)
 8000a1a:	f7ff fe8b 	bl	8000734 <PIDController_Update>

		  // Protection
		  if(desired_speed_rpm<=20){
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <main+0x184>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4927      	ldr	r1, [pc, #156]	; (8000ac0 <main+0x190>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe47 	bl	80006b8 <__aeabi_fcmple>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <main+0x106>
			  PIDController_Reset(&pid);
 8000a30:	4822      	ldr	r0, [pc, #136]	; (8000abc <main+0x18c>)
 8000a32:	f7ff ff60 	bl	80008f6 <PIDController_Reset>
		  }

		  integral = pid.integrator;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <main+0x18c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <main+0x194>)
 8000a3c:	6013      	str	r3, [r2, #0]
		  u = pid.out;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <main+0x18c>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe56 	bl	80006f4 <__aeabi_f2uiz>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
		  duty_cycle = u;
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <main+0x198>)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	7013      	strb	r3, [r2, #0]
		  //HAL_GPIO_TogglePin(GPIOC , TEST_LED_Pin);

		  // CONTROL STANLEY


		  timer4_flag = 0;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <main+0x180>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	  }

	  if (estimation_flag){
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <main+0x19c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0bc      	beq.n	80009da <main+0xaa>
		  // HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
		  current_speed_rpm = steps*STEPS2RPM;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <main+0x1a0>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <main+0x1a4>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fc1e 	bl	80002b8 <__aeabi_ui2f>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <main+0x188>)
 8000a80:	6013      	str	r3, [r2, #0]
		  estimation_flag = 0;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <main+0x19c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		  steps = 0;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <main+0x1a0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
	  if (timer2_flag == 1){
 8000a8e:	e7a4      	b.n	80009da <main+0xaa>
 8000a90:	20000104 	.word	0x20000104
 8000a94:	2000014c 	.word	0x2000014c
 8000a98:	20000194 	.word	0x20000194
 8000a9c:	200001dc 	.word	0x200001dc
 8000aa0:	40010c00 	.word	0x40010c00
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	2000023d 	.word	0x2000023d
 8000aac:	2000022b 	.word	0x2000022b
 8000ab0:	2000023e 	.word	0x2000023e
 8000ab4:	20000230 	.word	0x20000230
 8000ab8:	20000234 	.word	0x20000234
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	41a00000 	.word	0x41a00000
 8000ac4:	20000238 	.word	0x20000238
 8000ac8:	2000023c 	.word	0x2000023c
 8000acc:	20000240 	.word	0x20000240
 8000ad0:	2000022e 	.word	0x2000022e
 8000ad4:	76b981db 	.word	0x76b981db

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae2:	2228      	movs	r2, #40	; 0x28
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 f9a4 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b10:	2310      	movs	r3, #16
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fbe7 	bl	80032f0 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b28:	f000 fdf6 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fe54 	bl	80037f4 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b52:	f000 fde1 	bl	8001718 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b56:	2302      	movs	r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 ffd5 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b6c:	f000 fdd4 	bl	8001718 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3750      	adds	r7, #80	; 0x50
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_ADC1_Init+0x74>)
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <MX_ADC1_Init+0x78>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_ADC1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_ADC1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_ADC1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_ADC1_Init+0x74>)
 8000ba2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ba6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_ADC1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_ADC1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_ADC1_Init+0x74>)
 8000bb6:	f001 f843 	bl	8001c40 <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 fdaa 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_ADC1_Init+0x74>)
 8000bd6:	f001 facb 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000be0:	f000 fd9a 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000058 	.word	0x20000058
 8000bf0:	40012400 	.word	0x40012400

08000bf4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_CAN_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_CAN_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c00:	2208      	movs	r2, #8
 8000c02:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c1c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_CAN_Init+0x64>)
 8000c44:	f001 fc27 	bl	8002496 <HAL_CAN_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000c4e:	f000 fd63 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000088 	.word	0x20000088
 8000c5c:	40006400 	.word	0x40006400

08000c60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_I2C1_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c9e:	f002 f9e3 	bl	8003068 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 fd36 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000b0 	.word	0x200000b0
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b096      	sub	sp, #88	; 0x58
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 f89d 	bl	8004e34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000cfc:	4a4a      	ldr	r2, [pc, #296]	; (8000e28 <MX_TIM1_Init+0x16c>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000d00:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d0e:	2264      	movs	r2, #100	; 0x64
 8000d10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d24:	483f      	ldr	r0, [pc, #252]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d26:	f003 f85f 	bl	8003de8 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d30:	f000 fcf2 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4838      	ldr	r0, [pc, #224]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d42:	f003 fc01 	bl	8004548 <HAL_TIM_ConfigClockSource>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d4c:	f000 fce4 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d50:	4834      	ldr	r0, [pc, #208]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d52:	f003 f935 	bl	8003fc0 <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d5c:	f000 fcdc 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482d      	ldr	r0, [pc, #180]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000d70:	f003 ff7a 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d7a:	f000 fccd 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7e:	2360      	movs	r3, #96	; 0x60
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4820      	ldr	r0, [pc, #128]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000da4:	f003 fb0e 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000dae:	f000 fcb3 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	2204      	movs	r2, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	481a      	ldr	r0, [pc, #104]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000dbc:	f003 fb02 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000dc6:	f000 fca7 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	2208      	movs	r2, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000dd4:	f003 faf6 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000dde:	f000 fc9b 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000e06:	f003 ff8d 	bl	8004d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000e10:	f000 fc82 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM1_Init+0x168>)
 8000e16:	f000 fdf5 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3758      	adds	r7, #88	; 0x58
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000104 	.word	0x20000104
 8000e28:	40012c00 	.word	0x40012c00

08000e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e52:	2207      	movs	r2, #7
 8000e54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e5e:	f240 128f 	movw	r2, #399	; 0x18f
 8000e62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e72:	f002 ffb9 	bl	8003de8 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e7c:	f000 fc4c 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000e8e:	f003 fb5b 	bl	8004548 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e98:	f000 fc3e 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM2_Init+0x94>)
 8000eaa:	f003 fedd 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fc30 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000014c 	.word	0x2000014c

08000ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <MX_TIM3_Init+0x98>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000f08:	f002 ff6e 	bl	8003de8 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 fc01 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000f24:	f003 fb10 	bl	8004548 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 fbf3 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_TIM3_Init+0x94>)
 8000f40:	f003 fe92 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f4a:	f000 fbe5 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000194 	.word	0x20000194
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <MX_TIM4_Init+0x98>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f84:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f92:	2263      	movs	r2, #99	; 0x63
 8000f94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000fa4:	f002 ff20 	bl	8003de8 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 fbb3 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000fc0:	f003 fac2 	bl	8004548 <HAL_TIM_ConfigClockSource>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fba5 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_TIM4_Init+0x94>)
 8000fdc:	f003 fe44 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fe6:	f000 fb97 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001dc 	.word	0x200001dc
 8000ff8:	40000800 	.word	0x40000800

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a37      	ldr	r2, [pc, #220]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a2b      	ldr	r2, [pc, #172]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <MX_GPIO_Init+0xfc>)
 8001060:	f001 ffe9 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2106      	movs	r1, #6
 8001068:	4824      	ldr	r0, [pc, #144]	; (80010fc <MX_GPIO_Init+0x100>)
 800106a:	f001 ffe4 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_LOW_Pin|B_LOW_Pin|C_LOW_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001074:	4822      	ldr	r0, [pc, #136]	; (8001100 <MX_GPIO_Init+0x104>)
 8001076:	f001 ffde 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	; (80010f8 <MX_GPIO_Init+0xfc>)
 8001094:	f001 fe34 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001098:	2306      	movs	r3, #6
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_GPIO_Init+0x100>)
 80010b0:	f001 fe26 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80010b4:	f240 4303 	movw	r3, #1027	; 0x403
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_GPIO_Init+0x104>)
 80010ca:	f001 fe19 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_LOW_Pin B_LOW_Pin C_LOW_Pin */
  GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin|C_LOW_Pin;
 80010ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_GPIO_Init+0x104>)
 80010e8:	f001 fe0a 	bl	8002d00 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00

08001104 <get_adc>:

/* USER CODE BEGIN 4 */
//FUNCIONES

void get_adc(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	// Obtenemos la data del ADC
	HAL_ADC_Start(&hadc1);
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <get_adc+0x6c>)
 800110a:	f000 fe71 	bl	8001df0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800110e:	f04f 31ff 	mov.w	r1, #4294967295
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <get_adc+0x6c>)
 8001114:	f000 ff1a 	bl	8001f4c <HAL_ADC_PollForConversion>

	raw_adc = HAL_ADC_GetValue(&hadc1);
 8001118:	4815      	ldr	r0, [pc, #84]	; (8001170 <get_adc+0x6c>)
 800111a:	f001 f81d 	bl	8002158 <HAL_ADC_GetValue>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <get_adc+0x70>)
 8001124:	801a      	strh	r2, [r3, #0]
//	// Para que el sistema se suelte cuando el deseado sea menos del 10%
//	if (duty_cycle<10){
//		duty_cycle = 0;
//	}

	rate_adc = STEP_ADC_RPM*48*12/VOLTAJE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <get_adc+0x74>)
 8001128:	22c0      	movs	r2, #192	; 0xc0
 800112a:	801a      	strh	r2, [r3, #0]
	raw_adc = rate_adc*(raw_adc/rate_adc);
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <get_adc+0x70>)
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <get_adc+0x74>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <get_adc+0x74>)
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <get_adc+0x70>)
 8001146:	801a      	strh	r2, [r3, #0]
	desired_speed_rpm = raw_adc*STEP_ADC_RPM/rate_adc;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <get_adc+0x70>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <get_adc+0x74>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f8a9 	bl	80002b8 <__aeabi_ui2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <get_adc+0x78>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000058 	.word	0x20000058
 8001174:	20000224 	.word	0x20000224
 8001178:	20000226 	.word	0x20000226
 800117c:	20000230 	.word	0x20000230

08001180 <read_hall>:

void read_hall(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	hall_a = HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin);
 8001184:	2101      	movs	r1, #1
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <read_hall+0x7c>)
 8001188:	f001 ff3e 	bl	8003008 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <read_hall+0x80>)
 8001192:	701a      	strb	r2, [r3, #0]
	hall_b = HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin);
 8001194:	2102      	movs	r1, #2
 8001196:	4819      	ldr	r0, [pc, #100]	; (80011fc <read_hall+0x7c>)
 8001198:	f001 ff36 	bl	8003008 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <read_hall+0x84>)
 80011a2:	701a      	strb	r2, [r3, #0]
	hall_c = HAL_GPIO_ReadPin(HALL_C_GPIO_Port,HALL_C_Pin);
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <read_hall+0x7c>)
 80011aa:	f001 ff2d 	bl	8003008 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <read_hall+0x88>)
 80011b4:	701a      	strb	r2, [r3, #0]
//	}
	// end testing


	// Descomentar luego del testeo
	bldc_step = hall_a + 2*hall_b + 4*hall_c;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <read_hall+0x88>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <read_hall+0x84>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <read_hall+0x80>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <read_hall+0x8c>)
 80011d4:	701a      	strb	r2, [r3, #0]

	// Para calcular velocidad
	if (bldc_step != bldc_prev_step){
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <read_hall+0x8c>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <read_hall+0x90>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d005      	beq.n	80011ee <read_hall+0x6e>
		steps += 1;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <read_hall+0x94>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <read_hall+0x94>)
 80011ec:	801a      	strh	r2, [r3, #0]
	}

	bldc_prev_step	= bldc_step;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <read_hall+0x8c>)
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <read_hall+0x90>)
 80011f4:	701a      	strb	r2, [r3, #0]


}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	20000228 	.word	0x20000228
 8001204:	20000229 	.word	0x20000229
 8001208:	2000022a 	.word	0x2000022a
 800120c:	2000022d 	.word	0x2000022d
 8001210:	2000022c 	.word	0x2000022c
 8001214:	2000022e 	.word	0x2000022e

08001218 <bldc_move>:

void bldc_move(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

	switch(bldc_step){
 800121c:	4b87      	ldr	r3, [pc, #540]	; (800143c <bldc_move+0x224>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	2b05      	cmp	r3, #5
 8001224:	f200 80e8 	bhi.w	80013f8 <bldc_move+0x1e0>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <bldc_move+0x18>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	08001249 	.word	0x08001249
 8001234:	08001291 	.word	0x08001291
 8001238:	080012d9 	.word	0x080012d9
 800123c:	08001321 	.word	0x08001321
 8001240:	08001369 	.word	0x08001369
 8001244:	080013b1 	.word	0x080013b1
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8001248:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <bldc_move+0x228>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001250:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <bldc_move+0x228>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	4879      	ldr	r0, [pc, #484]	; (8001444 <bldc_move+0x22c>)
 8001260:	f001 fee9 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4876      	ldr	r0, [pc, #472]	; (8001444 <bldc_move+0x22c>)
 800126c:	f001 fee3 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8001270:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001274:	f000 fa04 	bl	8001680 <delay_us>


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 8001278:	4b73      	ldr	r3, [pc, #460]	; (8001448 <bldc_move+0x230>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <bldc_move+0x228>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	486e      	ldr	r0, [pc, #440]	; (8001444 <bldc_move+0x22c>)
 800128a:	f001 fed4 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 800128e:	e0d2      	b.n	8001436 <bldc_move+0x21e>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8001290:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <bldc_move+0x228>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <bldc_move+0x228>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a6:	4867      	ldr	r0, [pc, #412]	; (8001444 <bldc_move+0x22c>)
 80012a8:	f001 fec5 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	4864      	ldr	r0, [pc, #400]	; (8001444 <bldc_move+0x22c>)
 80012b4:	f001 febf 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80012b8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80012bc:	f000 f9e0 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 80012c0:	4b61      	ldr	r3, [pc, #388]	; (8001448 <bldc_move+0x230>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <bldc_move+0x228>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	485c      	ldr	r0, [pc, #368]	; (8001444 <bldc_move+0x22c>)
 80012d2:	f001 feb0 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 80012d6:	e0ae      	b.n	8001436 <bldc_move+0x21e>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <bldc_move+0x228>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80012e0:	4b57      	ldr	r3, [pc, #348]	; (8001440 <bldc_move+0x228>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4855      	ldr	r0, [pc, #340]	; (8001444 <bldc_move+0x22c>)
 80012f0:	f001 fea1 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012fa:	4852      	ldr	r0, [pc, #328]	; (8001444 <bldc_move+0x22c>)
 80012fc:	f001 fe9b 	bl	8003036 <HAL_GPIO_WritePin>


		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8001300:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001304:	f000 f9bc 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <bldc_move+0x230>)
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <bldc_move+0x228>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	484a      	ldr	r0, [pc, #296]	; (8001444 <bldc_move+0x22c>)
 800131a:	f001 fe8c 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 800131e:	e08a      	b.n	8001436 <bldc_move+0x21e>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <bldc_move+0x228>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <bldc_move+0x228>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001336:	4843      	ldr	r0, [pc, #268]	; (8001444 <bldc_move+0x22c>)
 8001338:	f001 fe7d 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001342:	4840      	ldr	r0, [pc, #256]	; (8001444 <bldc_move+0x22c>)
 8001344:	f001 fe77 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8001348:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800134c:	f000 f998 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 8001350:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <bldc_move+0x230>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <bldc_move+0x228>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001360:	4838      	ldr	r0, [pc, #224]	; (8001444 <bldc_move+0x22c>)
 8001362:	f001 fe68 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 8001366:	e066      	b.n	8001436 <bldc_move+0x21e>

	case 5:

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <bldc_move+0x228>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <bldc_move+0x228>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	4831      	ldr	r0, [pc, #196]	; (8001444 <bldc_move+0x22c>)
 8001380:	f001 fe59 	bl	8003036 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	482e      	ldr	r0, [pc, #184]	; (8001444 <bldc_move+0x22c>)
 800138c:	f001 fe53 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8001390:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001394:	f000 f974 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <bldc_move+0x230>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <bldc_move+0x228>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a8:	4826      	ldr	r0, [pc, #152]	; (8001444 <bldc_move+0x22c>)
 80013aa:	f001 fe44 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 80013ae:	e042      	b.n	8001436 <bldc_move+0x21e>

	case 6:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <bldc_move+0x228>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <bldc_move+0x228>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	; 0x38



		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <bldc_move+0x22c>)
 80013c8:	f001 fe35 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	481c      	ldr	r0, [pc, #112]	; (8001444 <bldc_move+0x22c>)
 80013d4:	f001 fe2f 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80013d8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80013dc:	f000 f950 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <bldc_move+0x230>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <bldc_move+0x228>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <bldc_move+0x22c>)
 80013f2:	f001 fe20 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 80013f6:	e01e      	b.n	8001436 <bldc_move+0x21e>

	default:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <bldc_move+0x228>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <bldc_move+0x228>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <bldc_move+0x228>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	480b      	ldr	r0, [pc, #44]	; (8001444 <bldc_move+0x22c>)
 8001418:	f001 fe0d 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <bldc_move+0x22c>)
 8001424:	f001 fe07 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <bldc_move+0x22c>)
 8001430:	f001 fe01 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 8001434:	bf00      	nop
	}
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000022d 	.word	0x2000022d
 8001440:	20000104 	.word	0x20000104
 8001444:	40010c00 	.word	0x40010c00
 8001448:	2000023c 	.word	0x2000023c

0800144c <bldc_move_back>:

void bldc_move_back(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	switch(bldc_step){
 8001450:	4b87      	ldr	r3, [pc, #540]	; (8001670 <bldc_move_back+0x224>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	2b05      	cmp	r3, #5
 8001458:	f200 80e8 	bhi.w	800162c <bldc_move_back+0x1e0>
 800145c:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <bldc_move_back+0x18>)
 800145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001462:	bf00      	nop
 8001464:	080015e5 	.word	0x080015e5
 8001468:	0800159d 	.word	0x0800159d
 800146c:	08001555 	.word	0x08001555
 8001470:	0800150d 	.word	0x0800150d
 8001474:	080014c5 	.word	0x080014c5
 8001478:	0800147d 	.word	0x0800147d
	case 6:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 800147c:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <bldc_move_back+0x228>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001484:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <bldc_move_back+0x228>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4879      	ldr	r0, [pc, #484]	; (8001678 <bldc_move_back+0x22c>)
 8001494:	f001 fdcf 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149e:	4876      	ldr	r0, [pc, #472]	; (8001678 <bldc_move_back+0x22c>)
 80014a0:	f001 fdc9 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80014a4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80014a8:	f000 f8ea 	bl	8001680 <delay_us>


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 80014ac:	4b73      	ldr	r3, [pc, #460]	; (800167c <bldc_move_back+0x230>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b70      	ldr	r3, [pc, #448]	; (8001674 <bldc_move_back+0x228>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014bc:	486e      	ldr	r0, [pc, #440]	; (8001678 <bldc_move_back+0x22c>)
 80014be:	f001 fdba 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 80014c2:	e0d2      	b.n	800166a <bldc_move_back+0x21e>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80014c4:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <bldc_move_back+0x228>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80014cc:	4b69      	ldr	r3, [pc, #420]	; (8001674 <bldc_move_back+0x228>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014da:	4867      	ldr	r0, [pc, #412]	; (8001678 <bldc_move_back+0x22c>)
 80014dc:	f001 fdab 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	4864      	ldr	r0, [pc, #400]	; (8001678 <bldc_move_back+0x22c>)
 80014e8:	f001 fda5 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80014ec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80014f0:	f000 f8c6 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 80014f4:	4b61      	ldr	r3, [pc, #388]	; (800167c <bldc_move_back+0x230>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <bldc_move_back+0x228>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001504:	485c      	ldr	r0, [pc, #368]	; (8001678 <bldc_move_back+0x22c>)
 8001506:	f001 fd96 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 800150a:	e0ae      	b.n	800166a <bldc_move_back+0x21e>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <bldc_move_back+0x228>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8001514:	4b57      	ldr	r3, [pc, #348]	; (8001674 <bldc_move_back+0x228>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001522:	4855      	ldr	r0, [pc, #340]	; (8001678 <bldc_move_back+0x22c>)
 8001524:	f001 fd87 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800152e:	4852      	ldr	r0, [pc, #328]	; (8001678 <bldc_move_back+0x22c>)
 8001530:	f001 fd81 	bl	8003036 <HAL_GPIO_WritePin>


		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8001534:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001538:	f000 f8a2 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <bldc_move_back+0x230>)
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <bldc_move_back+0x228>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154c:	484a      	ldr	r0, [pc, #296]	; (8001678 <bldc_move_back+0x22c>)
 800154e:	f001 fd72 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 8001552:	e08a      	b.n	800166a <bldc_move_back+0x21e>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <bldc_move_back+0x228>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <bldc_move_back+0x228>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4843      	ldr	r0, [pc, #268]	; (8001678 <bldc_move_back+0x22c>)
 800156c:	f001 fd63 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001576:	4840      	ldr	r0, [pc, #256]	; (8001678 <bldc_move_back+0x22c>)
 8001578:	f001 fd5d 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 800157c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001580:	f000 f87e 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <bldc_move_back+0x230>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <bldc_move_back+0x228>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001594:	4838      	ldr	r0, [pc, #224]	; (8001678 <bldc_move_back+0x22c>)
 8001596:	f001 fd4e 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 800159a:	e066      	b.n	800166a <bldc_move_back+0x21e>

	case 2:

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 800159c:	4b35      	ldr	r3, [pc, #212]	; (8001674 <bldc_move_back+0x228>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <bldc_move_back+0x228>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	4831      	ldr	r0, [pc, #196]	; (8001678 <bldc_move_back+0x22c>)
 80015b4:	f001 fd3f 	bl	8003036 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <bldc_move_back+0x22c>)
 80015c0:	f001 fd39 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80015c4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80015c8:	f000 f85a 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <bldc_move_back+0x230>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <bldc_move_back+0x228>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015dc:	4826      	ldr	r0, [pc, #152]	; (8001678 <bldc_move_back+0x22c>)
 80015de:	f001 fd2a 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 80015e2:	e042      	b.n	800166a <bldc_move_back+0x21e>

	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <bldc_move_back+0x228>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <bldc_move_back+0x228>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38



		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fa:	481f      	ldr	r0, [pc, #124]	; (8001678 <bldc_move_back+0x22c>)
 80015fc:	f001 fd1b 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001606:	481c      	ldr	r0, [pc, #112]	; (8001678 <bldc_move_back+0x22c>)
 8001608:	f001 fd15 	bl	8003036 <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 800160c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001610:	f000 f836 	bl	8001680 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <bldc_move_back+0x230>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <bldc_move_back+0x228>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	4814      	ldr	r0, [pc, #80]	; (8001678 <bldc_move_back+0x22c>)
 8001626:	f001 fd06 	bl	8003036 <HAL_GPIO_WritePin>

		break;
 800162a:	e01e      	b.n	800166a <bldc_move_back+0x21e>

	default:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <bldc_move_back+0x228>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <bldc_move_back+0x228>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <bldc_move_back+0x228>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <bldc_move_back+0x22c>)
 800164c:	f001 fcf3 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <bldc_move_back+0x22c>)
 8001658:	f001 fced 	bl	8003036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <bldc_move_back+0x22c>)
 8001664:	f001 fce7 	bl	8003036 <HAL_GPIO_WritePin>
		break;
 8001668:	bf00      	nop
	}
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000022d 	.word	0x2000022d
 8001674:	20000104 	.word	0x20000104
 8001678:	40010c00 	.word	0x40010c00
 800167c:	2000023c 	.word	0x2000023c

08001680 <delay_us>:

void delay_us(uint16_t us){
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <delay_us+0x2c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8001692:	bf00      	nop
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <delay_us+0x2c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3f9      	bcc.n	8001694 <delay_us+0x14>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20000194 	.word	0x20000194

080016b0 <HAL_TIM_PeriodElapsedCallback>:
//INTERRUPCIONES

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x16>

		timer2_flag = 1;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]

	}
	if (htim == &htim4){
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d112      	bne.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x44>

		timer4_flag = 1;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]

		if (timer4_counts == 10/ESTIMATION_RATE){
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d105      	bne.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0x38>
			estimation_flag = 1;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]

			timer4_counts = 0;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
		}
		timer4_counts += 1;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016f2:	701a      	strb	r2, [r3, #0]
	}
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000014c 	.word	0x2000014c
 8001704:	2000023d 	.word	0x2000023d
 8001708:	200001dc 	.word	0x200001dc
 800170c:	2000023e 	.word	0x2000023e
 8001710:	2000023f 	.word	0x2000023f
 8001714:	20000240 	.word	0x20000240

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_MspInit+0x5c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_MspInit+0x5c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x5c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x5c>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_MspInit+0x60>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_MspInit+0x60>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000

08001788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_ADC_MspInit+0x6c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d121      	bne.n	80017ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_ADC_MspInit+0x70>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SPEED_REF_Pin;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	2303      	movs	r3, #3
 80017de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPEED_REF_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_ADC_MspInit+0x74>)
 80017e8:	f001 fa8a 	bl	8002d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40012400 	.word	0x40012400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800

08001800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a24      	ldr	r2, [pc, #144]	; (80018ac <HAL_CAN_MspInit+0xac>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d141      	bne.n	80018a4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_CAN_MspInit+0xb0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <HAL_CAN_MspInit+0xb4>)
 8001866:	f001 fa4b 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <HAL_CAN_MspInit+0xb4>)
 8001880:	f001 fa3e 	bl	8002d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2014      	movs	r0, #20
 800188a:	f001 fa02 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800188e:	2014      	movs	r0, #20
 8001890:	f001 fa1b 	bl	8002cca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2015      	movs	r0, #21
 800189a:	f001 f9fa 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800189e:	2015      	movs	r0, #21
 80018a0:	f001 fa13 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40006400 	.word	0x40006400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800

080018b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_I2C_MspInit+0x70>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d123      	bne.n	8001920 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f0:	23c0      	movs	r3, #192	; 0xc0
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_I2C_MspInit+0x78>)
 8001904:	f001 f9fc 	bl	8002d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_I2C_MspInit+0x74>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_I2C_MspInit+0x74>)
 800190e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001912:	61d3      	str	r3, [r2, #28]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_I2C_MspInit+0x74>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005400 	.word	0x40005400
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <HAL_TIM_Base_MspInit+0xc0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10c      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 800194c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800195e:	e044      	b.n	80019ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d114      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201c      	movs	r0, #28
 8001988:	f001 f983 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198c:	201c      	movs	r0, #28
 800198e:	f001 f99c 	bl	8002cca <HAL_NVIC_EnableIRQ>
}
 8001992:	e02a      	b.n	80019ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_TIM_Base_MspInit+0xc8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10c      	bne.n	80019b8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	e018      	b.n	80019ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_TIM_Base_MspInit+0xcc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d113      	bne.n	80019ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_TIM_Base_MspInit+0xc4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	201e      	movs	r0, #30
 80019e0:	f001 f957 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019e4:	201e      	movs	r0, #30
 80019e6:	f001 f970 	bl	8002cca <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40000800 	.word	0x40000800

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_TIM_MspPostInit+0x74>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d125      	bne.n	8001a70 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_TIM_MspPostInit+0x78>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_TIM_MspPostInit+0x78>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_TIM_MspPostInit+0x78>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin;
 8001a3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <HAL_TIM_MspPostInit+0x7c>)
 8001a52:	f001 f955 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C_HIGH_Pin;
 8001a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(C_HIGH_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <HAL_TIM_MspPostInit+0x7c>)
 8001a6c:	f001 f948 	bl	8002d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010800 	.word	0x40010800

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f89d 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ada:	f000 fdd7 	bl	800268c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000088 	.word	0x20000088

08001ae8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <CAN1_RX1_IRQHandler+0x10>)
 8001aee:	f000 fdcd 	bl	800268c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000088 	.word	0x20000088

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f002 fb57 	bl	80041b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000014c 	.word	0x2000014c

08001b10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM4_IRQHandler+0x10>)
 8001b16:	f002 fb4d 	bl	80041b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001dc 	.word	0x200001dc

08001b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b30:	f7ff fff8 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b36:	490c      	ldr	r1, [pc, #48]	; (8001b68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b4c:	4c09      	ldr	r4, [pc, #36]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f003 f947 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7fe fee7 	bl	8000930 <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001b6c:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 8001b70:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001b74:	20000248 	.word	0x20000248

08001b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_2_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x28>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f001 f875 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	200f      	movs	r0, #15
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fdc4 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f88d 	bl	8002ce6 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f001 f855 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000030 	.word	0x20000030
 8001c00:	20000038 	.word	0x20000038
 8001c04:	20000034 	.word	0x20000034

08001c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x1c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x20>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_IncTick+0x20>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000038 	.word	0x20000038
 8001c28:	20000244 	.word	0x20000244

08001c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_GetTick+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000244 	.word	0x20000244

08001c40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0be      	b.n	8001de0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fd82 	bl	8001788 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fbc5 	bl	8002414 <ADC_ConversionStop_Disable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8099 	bne.w	8001dce <HAL_ADC_Init+0x18e>
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8095 	bne.w	8001dce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cac:	f023 0302 	bic.w	r3, r3, #2
 8001cb0:	f043 0202 	orr.w	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7b1b      	ldrb	r3, [r3, #12]
 8001cc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d003      	beq.n	8001ce2 <HAL_ADC_Init+0xa2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d102      	bne.n	8001ce8 <HAL_ADC_Init+0xa8>
 8001ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Init+0xaa>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7d1b      	ldrb	r3, [r3, #20]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d119      	bne.n	8001d2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	035a      	lsls	r2, r3, #13
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e00b      	b.n	8001d2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <HAL_ADC_Init+0x1a8>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d003      	beq.n	8001d66 <HAL_ADC_Init+0x126>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d104      	bne.n	8001d70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	051b      	lsls	r3, r3, #20
 8001d6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_ADC_Init+0x1ac>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10b      	bne.n	8001dac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001daa:	e018      	b.n	8001dde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f023 0312 	bic.w	r3, r3, #18
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dcc:	e007      	b.n	8001dde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	ffe1f7fd 	.word	0xffe1f7fd
 8001dec:	ff1f0efe 	.word	0xff1f0efe

08001df0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Start+0x1a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e098      	b.n	8001f3c <HAL_ADC_Start+0x14c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 faa4 	bl	8002360 <ADC_Enable>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8087 	bne.w	8001f32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_ADC_Start+0x154>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d105      	bne.n	8001e4e <HAL_ADC_Start+0x5e>
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_ADC_Start+0x158>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d026      	beq.n	8001eb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e78:	e01d      	b.n	8001eb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <HAL_ADC_Start+0x158>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_ADC_Start+0xaa>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_ADC_Start+0x154>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10d      	bne.n	8001eb6 <HAL_ADC_Start+0xc6>
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_ADC_Start+0x158>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f023 0206 	bic.w	r2, r3, #6
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0202 	mvn.w	r2, #2
 8001ee6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ef2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ef6:	d113      	bne.n	8001f20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_ADC_Start+0x154>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d105      	bne.n	8001f0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_ADC_Start+0x158>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	e00c      	b.n	8001f3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	e003      	b.n	8001f3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012800 	.word	0x40012800
 8001f48:	40012400 	.word	0x40012400

08001f4c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f62:	f7ff fe63 	bl	8001c2c <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0d3      	b.n	8002136 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d131      	bne.n	8002000 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d12a      	bne.n	8002000 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001faa:	e021      	b.n	8001ff0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_ADC_PollForConversion+0x7e>
 8001fba:	f7ff fe37 	bl	8001c2c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d212      	bcs.n	8001ff0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	f043 0204 	orr.w	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0a2      	b.n	8002136 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0d6      	beq.n	8001fac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ffe:	e070      	b.n	80020e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_ADC_PollForConversion+0x1f4>)
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	2002      	movs	r0, #2
 8002006:	f001 fe39 	bl	8003c7c <HAL_RCCEx_GetPeriphCLKFreq>
 800200a:	4603      	mov	r3, r0
 800200c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_ADC_PollForConversion+0x1f8>)
 8002018:	400b      	ands	r3, r1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_ADC_PollForConversion+0x104>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_ADC_PollForConversion+0x1fc>)
 8002026:	400b      	ands	r3, r1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <HAL_ADC_PollForConversion+0x104>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <HAL_ADC_PollForConversion+0x200>)
 8002034:	400b      	ands	r3, r1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_ADC_PollForConversion+0x100>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_ADC_PollForConversion+0x204>)
 8002042:	400b      	ands	r3, r1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_PollForConversion+0x100>
 8002048:	2314      	movs	r3, #20
 800204a:	e020      	b.n	800208e <HAL_ADC_PollForConversion+0x142>
 800204c:	2329      	movs	r3, #41	; 0x29
 800204e:	e01e      	b.n	800208e <HAL_ADC_PollForConversion+0x142>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_ADC_PollForConversion+0x200>)
 8002058:	400b      	ands	r3, r1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_ADC_PollForConversion+0x120>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68d9      	ldr	r1, [r3, #12]
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_ADC_PollForConversion+0x204>)
 8002066:	400b      	ands	r3, r1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_ADC_PollForConversion+0x13c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_ADC_PollForConversion+0x208>)
 8002074:	400b      	ands	r3, r1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_ADC_PollForConversion+0x140>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_ADC_PollForConversion+0x208>)
 8002082:	400b      	ands	r3, r1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_PollForConversion+0x140>
 8002088:	2354      	movs	r3, #84	; 0x54
 800208a:	e000      	b.n	800208e <HAL_ADC_PollForConversion+0x142>
 800208c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002094:	e021      	b.n	80020da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d01a      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_ADC_PollForConversion+0x168>
 80020a4:	f7ff fdc2 	bl	8001c2c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d20f      	bcs.n	80020d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d90b      	bls.n	80020d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f043 0204 	orr.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e030      	b.n	8002136 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3301      	adds	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d8d9      	bhi.n	8002096 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0212 	mvn.w	r2, #18
 80020ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002102:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002106:	d115      	bne.n	8002134 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800210c:	2b00      	cmp	r3, #0
 800210e:	d111      	bne.n	8002134 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	bf00      	nop
 8002140:	20000030 	.word	0x20000030
 8002144:	24924924 	.word	0x24924924
 8002148:	00924924 	.word	0x00924924
 800214c:	12492492 	.word	0x12492492
 8002150:	00492492 	.word	0x00492492
 8002154:	00249249 	.word	0x00249249

08002158 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x20>
 800218c:	2302      	movs	r3, #2
 800218e:	e0dc      	b.n	800234a <HAL_ADC_ConfigChannel+0x1da>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d81c      	bhi.n	80021da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	221f      	movs	r2, #31
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b05      	subs	r3, #5
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
 80021d8:	e03c      	b.n	8002254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d81c      	bhi.n	800221c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b23      	subs	r3, #35	; 0x23
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4019      	ands	r1, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3b23      	subs	r3, #35	; 0x23
 800220e:	fa00 f203 	lsl.w	r2, r0, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
 800221a:	e01b      	b.n	8002254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b41      	subs	r3, #65	; 0x41
 800222e:	221f      	movs	r2, #31
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	4019      	ands	r1, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b41      	subs	r3, #65	; 0x41
 8002248:	fa00 f203 	lsl.w	r2, r0, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d91c      	bls.n	8002296 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	3b1e      	subs	r3, #30
 800226e:	2207      	movs	r2, #7
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	4019      	ands	r1, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6898      	ldr	r0, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	3b1e      	subs	r3, #30
 8002288:	fa00 f203 	lsl.w	r2, r0, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	e019      	b.n	80022ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6898      	ldr	r0, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d003      	beq.n	80022da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d132      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_ADC_ConfigChannel+0x1e4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d125      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d126      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002300:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d11a      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_ADC_ConfigChannel+0x1e8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_ADC_ConfigChannel+0x1ec>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	0c9a      	lsrs	r2, r3, #18
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002320:	e002      	b.n	8002328 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3b01      	subs	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x1b2>
 800232e:	e007      	b.n	8002340 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40012400 	.word	0x40012400
 8002358:	20000030 	.word	0x20000030
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d040      	beq.n	8002400 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <ADC_Enable+0xac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <ADC_Enable+0xb0>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	0c9b      	lsrs	r3, r3, #18
 800239a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800239c:	e002      	b.n	80023a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023aa:	f7ff fc3f 	bl	8001c2c <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023b0:	e01f      	b.n	80023f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023b2:	f7ff fc3b 	bl	8001c2c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d918      	bls.n	80023f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d011      	beq.n	80023f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e007      	b.n	8002402 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d1d8      	bne.n	80023b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000030 	.word	0x20000030
 8002410:	431bde83 	.word	0x431bde83

08002414 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d12e      	bne.n	800248c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800243e:	f7ff fbf5 	bl	8001c2c <HAL_GetTick>
 8002442:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002444:	e01b      	b.n	800247e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002446:	f7ff fbf1 	bl	8001c2c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d914      	bls.n	800247e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10d      	bne.n	800247e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e007      	b.n	800248e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d0dc      	beq.n	8002446 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0ed      	b.n	8002684 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f9a3 	bl	8001800 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ca:	f7ff fbaf 	bl	8001c2c <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024d0:	e012      	b.n	80024f8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d2:	f7ff fbab 	bl	8001c2c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b0a      	cmp	r3, #10
 80024de:	d90b      	bls.n	80024f8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0c5      	b.n	8002684 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0e5      	beq.n	80024d2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0202 	bic.w	r2, r2, #2
 8002514:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002516:	f7ff fb89 	bl	8001c2c <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251c:	e012      	b.n	8002544 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800251e:	f7ff fb85 	bl	8001c2c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d90b      	bls.n	8002544 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2205      	movs	r2, #5
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e09f      	b.n	8002684 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e1b      	ldrb	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e5b      	ldrb	r3, [r3, #25]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7e9b      	ldrb	r3, [r3, #26]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0220 	bic.w	r2, r2, #32
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7edb      	ldrb	r3, [r3, #27]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0210 	bic.w	r2, r2, #16
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0210 	orr.w	r2, r2, #16
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0208 	orr.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0208 	bic.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7f5b      	ldrb	r3, [r3, #29]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0204 	orr.w	r2, r2, #4
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	ea42 0103 	orr.w	r1, r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d07c      	beq.n	80027cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f983 	bl	80029fa <HAL_CAN_TxMailbox0CompleteCallback>
 80026f4:	e016      	b.n	8002724 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e00c      	b.n	8002724 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	e002      	b.n	8002724 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f986 	bl	8002a30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f962 	bl	8002a0c <HAL_CAN_TxMailbox1CompleteCallback>
 8002748:	e016      	b.n	8002778 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e00c      	b.n	8002778 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
 8002770:	e002      	b.n	8002778 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f965 	bl	8002a42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f941 	bl	8002a1e <HAL_CAN_TxMailbox2CompleteCallback>
 800279c:	e016      	b.n	80027cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	e00c      	b.n	80027cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e002      	b.n	80027cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f944 	bl	8002a54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2210      	movs	r2, #16
 80027ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f933 	bl	8002a78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f91b 	bl	8002a66 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f913 	bl	8002a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8fb 	bl	8002a8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8fc 	bl	8002aae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8f4 	bl	8002ac0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07b      	beq.n	80029da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d072      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d043      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03e      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800295a:	2b60      	cmp	r3, #96	; 0x60
 800295c:	d02b      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x32a>
 800295e:	2b60      	cmp	r3, #96	; 0x60
 8002960:	d82e      	bhi.n	80029c0 <HAL_CAN_IRQHandler+0x334>
 8002962:	2b50      	cmp	r3, #80	; 0x50
 8002964:	d022      	beq.n	80029ac <HAL_CAN_IRQHandler+0x320>
 8002966:	2b50      	cmp	r3, #80	; 0x50
 8002968:	d82a      	bhi.n	80029c0 <HAL_CAN_IRQHandler+0x334>
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d019      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x316>
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d826      	bhi.n	80029c0 <HAL_CAN_IRQHandler+0x334>
 8002972:	2b30      	cmp	r3, #48	; 0x30
 8002974:	d010      	beq.n	8002998 <HAL_CAN_IRQHandler+0x30c>
 8002976:	2b30      	cmp	r3, #48	; 0x30
 8002978:	d822      	bhi.n	80029c0 <HAL_CAN_IRQHandler+0x334>
 800297a:	2b10      	cmp	r3, #16
 800297c:	d002      	beq.n	8002984 <HAL_CAN_IRQHandler+0x2f8>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d005      	beq.n	800298e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002982:	e01d      	b.n	80029c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298c:	e019      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f043 0310 	orr.w	r3, r3, #16
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002996:	e014      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a0:	e00f      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029aa:	e00a      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b4:	e005      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029be:	e000      	b.n	80029c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80029c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2204      	movs	r2, #4
 80029d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f870 	bl	8002ad2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4906      	ldr	r1, [pc, #24]	; (8002b7c <__NVIC_EnableIRQ+0x34>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff90 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff2d 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff42 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff90 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5f 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff35 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e169      	b.n	8002fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d14:	2201      	movs	r2, #1
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8158 	bne.w	8002fe2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a9a      	ldr	r2, [pc, #616]	; (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d3c:	4a98      	ldr	r2, [pc, #608]	; (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d875      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d42:	4a98      	ldr	r2, [pc, #608]	; (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d058      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d48:	4a96      	ldr	r2, [pc, #600]	; (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d86f      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d4e:	4a96      	ldr	r2, [pc, #600]	; (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d052      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d54:	4a94      	ldr	r2, [pc, #592]	; (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d869      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d5a:	4a94      	ldr	r2, [pc, #592]	; (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04c      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d60:	4a92      	ldr	r2, [pc, #584]	; (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d863      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d66:	4a92      	ldr	r2, [pc, #584]	; (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d046      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d6c:	4a90      	ldr	r2, [pc, #576]	; (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d85d      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d82a      	bhi.n	8002dcc <HAL_GPIO_Init+0xcc>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d859      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_GPIO_Init+0x80>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002de7 	.word	0x08002de7
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e2f 	.word	0x08002e2f
 8002d94:	08002e2f 	.word	0x08002e2f
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e2f 	.word	0x08002e2f
 8002da0:	08002e2f 	.word	0x08002e2f
 8002da4:	08002e2f 	.word	0x08002e2f
 8002da8:	08002e2f 	.word	0x08002e2f
 8002dac:	08002e2f 	.word	0x08002e2f
 8002db0:	08002e2f 	.word	0x08002e2f
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e2f 	.word	0x08002e2f
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_GPIO_Init+0x2b4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e029      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e024      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01f      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e01a      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e013      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e009      	b.n	8002e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          break;
 8002e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d801      	bhi.n	8002e3a <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_Init+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d802      	bhi.n	8002e4c <HAL_GPIO_Init+0x14c>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x152>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210f      	movs	r1, #15
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80b1 	beq.w	8002fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e98:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	; (8002fc0 <HAL_GPIO_Init+0x2c0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_GPIO_Init+0x1ec>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x1e4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_GPIO_Init+0x1e0>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	e004      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e002      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002eec:	2300      	movs	r3, #0
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	f002 0203 	and.w	r2, r2, #3
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	4093      	lsls	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002efe:	492f      	ldr	r1, [pc, #188]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	4928      	ldr	r1, [pc, #160]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	491e      	ldr	r1, [pc, #120]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4914      	ldr	r1, [pc, #80]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d021      	beq.n	8002fd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e021      	b.n	8002fe2 <HAL_GPIO_Init+0x2e2>
 8002f9e:	bf00      	nop
 8002fa0:	10320000 	.word	0x10320000
 8002fa4:	10310000 	.word	0x10310000
 8002fa8:	10220000 	.word	0x10220000
 8002fac:	10210000 	.word	0x10210000
 8002fb0:	10120000 	.word	0x10120000
 8002fb4:	10110000 	.word	0x10110000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40010800 	.word	0x40010800
 8002fc4:	40010c00 	.word	0x40010c00
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4909      	ldr	r1, [pc, #36]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f47f ae8e 	bne.w	8002d14 <HAL_GPIO_Init+0x14>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	372c      	adds	r7, #44	; 0x2c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
 8003042:	4613      	mov	r3, r2
 8003044:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003046:	787b      	ldrb	r3, [r7, #1]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003052:	e003      	b.n	800305c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
	...

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e12b      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fc12 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f000 fcda 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a81      	ldr	r2, [pc, #516]	; (80032dc <HAL_I2C_Init+0x274>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d807      	bhi.n	80030ec <HAL_I2C_Init+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a80      	ldr	r2, [pc, #512]	; (80032e0 <HAL_I2C_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e006      	b.n	80030fa <HAL_I2C_Init+0x92>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a7d      	ldr	r2, [pc, #500]	; (80032e4 <HAL_I2C_Init+0x27c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a78      	ldr	r2, [pc, #480]	; (80032e8 <HAL_I2C_Init+0x280>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <HAL_I2C_Init+0x274>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d802      	bhi.n	800313c <HAL_I2C_Init+0xd4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	e009      	b.n	8003150 <HAL_I2C_Init+0xe8>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a69      	ldr	r2, [pc, #420]	; (80032ec <HAL_I2C_Init+0x284>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	495c      	ldr	r1, [pc, #368]	; (80032dc <HAL_I2C_Init+0x274>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d819      	bhi.n	80031a4 <HAL_I2C_Init+0x13c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb1 f3f3 	udiv	r3, r1, r3
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_I2C_Init+0x138>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e59      	subs	r1, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	e051      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e04f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_I2C_Init+0x168>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_I2C_Init+0x18e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x196>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e022      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_I2C_Init+0x1bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	003d08ff 	.word	0x003d08ff
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e272      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8087 	beq.w	800341e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003310:	4b92      	ldr	r3, [pc, #584]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00c      	beq.n	8003336 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800331c:	4b8f      	ldr	r3, [pc, #572]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d112      	bne.n	800334e <HAL_RCC_OscConfig+0x5e>
 8003328:	4b8c      	ldr	r3, [pc, #560]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d10b      	bne.n	800334e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d06c      	beq.n	800341c <HAL_RCC_OscConfig+0x12c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d168      	bne.n	800341c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e24c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x76>
 8003358:	4b80      	ldr	r3, [pc, #512]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a7f      	ldr	r2, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e02e      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x98>
 800336e:	4b7b      	ldr	r3, [pc, #492]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7a      	ldr	r2, [pc, #488]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b78      	ldr	r3, [pc, #480]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a77      	ldr	r2, [pc, #476]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0xbc>
 8003392:	4b72      	ldr	r3, [pc, #456]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a71      	ldr	r2, [pc, #452]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6e      	ldr	r2, [pc, #440]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 80033ac:	4b6b      	ldr	r3, [pc, #428]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a67      	ldr	r2, [pc, #412]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fc2e 	bl	8001c2c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fc2a 	bl	8001c2c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e200      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe4>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fc1a 	bl	8001c2c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fc16 	bl	8001c2c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1ec      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x10c>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d063      	beq.n	80034f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342a:	4b4c      	ldr	r3, [pc, #304]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x18c>
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x176>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1c0      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4939      	ldr	r1, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e03a      	b.n	80034f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x270>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe fbcf 	bl	8001c2c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fbcb 	bl	8001c2c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1a1      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4927      	ldr	r1, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_OscConfig+0x270>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fbae 	bl	8001c2c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe fbaa 	bl	8001c2c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e180      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d03a      	beq.n	8003574 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d019      	beq.n	800353a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_RCC_OscConfig+0x274>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fe fb8e 	bl	8001c2c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe fb8a 	bl	8001c2c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e160      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_OscConfig+0x26c>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003532:	2001      	movs	r0, #1
 8003534:	f000 face 	bl	8003ad4 <RCC_Delay>
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCC_OscConfig+0x274>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003540:	f7fe fb74 	bl	8001c2c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003546:	e00f      	b.n	8003568 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe fb70 	bl	8001c2c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d908      	bls.n	8003568 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e146      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	42420000 	.word	0x42420000
 8003564:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4b92      	ldr	r3, [pc, #584]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e9      	bne.n	8003548 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80a6 	beq.w	80036ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a87      	ldr	r2, [pc, #540]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	61d3      	str	r3, [r2, #28]
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7e      	ldr	r2, [pc, #504]	; (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fb31 	bl	8001c2c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe fb2d 	bl	8001c2c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e103      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x312>
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	e02d      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x334>
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a66      	ldr	r2, [pc, #408]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x356>
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a60      	ldr	r2, [pc, #384]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	e00b      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003646:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe fae1 	bl	8001c2c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fadd 	bl	8001c2c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0b1      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCC_OscConfig+0x37e>
 8003690:	e014      	b.n	80036bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe facb 	bl	8001c2c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fac7 	bl	8001c2c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e09b      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d061      	beq.n	80037a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d146      	bne.n	800377a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x4cc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fa9b 	bl	8001c2c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe fa97 	bl	8001c2c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e06d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d108      	bne.n	8003734 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4921      	ldr	r1, [pc, #132]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a19      	ldr	r1, [r3, #32]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	430b      	orrs	r3, r1
 8003746:	491b      	ldr	r1, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x4cc>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe fa6b 	bl	8001c2c <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fa67 	bl	8001c2c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x46a>
 8003778:	e035      	b.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x4cc>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fa54 	bl	8001c2c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fa50 	bl	8001c2c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e026      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x498>
 80037a6:	e01e      	b.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e019      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x500>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d0      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d910      	bls.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4965      	ldr	r1, [pc, #404]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800385a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d040      	beq.n	8003914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d115      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e073      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4936      	ldr	r1, [pc, #216]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7fe f9a2 	bl	8001c2c <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe f99e 	bl	8001c2c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e053      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d210      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 0207 	bic.w	r2, r3, #7
 800392a:	4922      	ldr	r1, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003982:	f000 f821 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1cc>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe f900 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08004e5c 	.word	0x08004e5c
 80039c0:	20000030 	.word	0x20000030
 80039c4:	20000034 	.word	0x20000034

080039c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x94>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x30>
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x36>
 80039f6:	e027      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 80039fa:	613b      	str	r3, [r7, #16]
      break;
 80039fc:	e027      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0c9b      	lsrs	r3, r3, #18
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0c5b      	lsrs	r3, r3, #17
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	fb03 f202 	mul.w	r2, r3, r2
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e004      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	613b      	str	r3, [r7, #16]
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4e:	693b      	ldr	r3, [r7, #16]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	007a1200 	.word	0x007a1200
 8003a64:	08004e74 	.word	0x08004e74
 8003a68:	08004e84 	.word	0x08004e84
 8003a6c:	003d0900 	.word	0x003d0900

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000030 	.word	0x20000030

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a88:	f7ff fff2 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4903      	ldr	r1, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08004e6c 	.word	0x08004e6c

08003aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab0:	f7ff ffde 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0adb      	lsrs	r3, r3, #11
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08004e6c 	.word	0x08004e6c

08003ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <RCC_Delay+0x34>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <RCC_Delay+0x38>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0a5b      	lsrs	r3, r3, #9
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af0:	bf00      	nop
  }
  while (Delay --);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	60fa      	str	r2, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f9      	bne.n	8003af0 <RCC_Delay+0x1c>
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000030 	.word	0x20000030
 8003b0c:	10624dd3 	.word	0x10624dd3

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d07d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	61d3      	str	r3, [r2, #28]
 8003b48:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d118      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7fe f85c 	bl	8001c2c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fe f858 	bl	8001c2c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e06d      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d02e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d027      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bca:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d014      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fe f827 	bl	8001c2c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fe f823 	bl	8001c2c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e036      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ee      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4917      	ldr	r1, [pc, #92]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	490b      	ldr	r1, [pc, #44]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42420440 	.word	0x42420440

08003c7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	f200 808a 	bhi.w	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d045      	beq.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d075      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cb2:	e082      	b.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cba:	4b45      	ldr	r3, [pc, #276]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d07b      	beq.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	0c9b      	lsrs	r3, r3, #18
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a41      	ldr	r2, [pc, #260]	; (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d015      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0c5b      	lsrs	r3, r3, #17
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	4a3b      	ldr	r2, [pc, #236]	; (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e004      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d20:	d102      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	61bb      	str	r3, [r7, #24]
      break;
 8003d26:	e04a      	b.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	61bb      	str	r3, [r7, #24]
      break;
 8003d36:	e042      	b.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d108      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e01f      	b.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d74:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e00f      	b.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d11c      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d94:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d98:	61bb      	str	r3, [r7, #24]
      break;
 8003d9a:	e012      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d9e:	f7ff fe85 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0b9b      	lsrs	r3, r3, #14
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]
      break;
 8003db8:	e004      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dc2:	bf00      	nop
    }
  }
  return (frequency);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08004e88 	.word	0x08004e88
 8003dd8:	08004e98 	.word	0x08004e98
 8003ddc:	007a1200 	.word	0x007a1200
 8003de0:	003d0900 	.word	0x003d0900
 8003de4:	aaaaaaab 	.word	0xaaaaaaab

08003de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e041      	b.n	8003e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fd90 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 fc7a 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_Base_Start+0x88>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_TIM_Base_Start+0x48>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d009      	beq.n	8003ed0 <HAL_TIM_Base_Start+0x48>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_TIM_Base_Start+0x8c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_Base_Start+0x48>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_TIM_Base_Start+0x90>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d111      	bne.n	8003ef4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d010      	beq.n	8003f04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	e007      	b.n	8003f04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800

08003f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e03a      	b.n	8003faa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x58>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x58>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x58>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800

08003fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e041      	b.n	8004056 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f839 	bl	800405e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fb8e 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x24>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start+0x3e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x58>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e05e      	b.n	80041a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0x82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0x92>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fd7c 	bl	8004c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_TIM_PWM_Start+0x138>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d107      	bne.n	8004142 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_TIM_PWM_Start+0x138>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d009      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a14      	ldr	r2, [pc, #80]	; (80041ac <HAL_TIM_PWM_Start+0x13c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_TIM_PWM_Start+0x140>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d010      	beq.n	800419e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e007      	b.n	800419e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800

080041b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0202 	mvn.w	r2, #2
 80041e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa76 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa69 	bl	80046d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa78 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0204 	mvn.w	r2, #4
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa4c 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa3f 	bl	80046d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa4e 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d122      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b08      	cmp	r3, #8
 800427e:	d11b      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0208 	mvn.w	r2, #8
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa22 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fa15 	bl	80046d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fa24 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0210 	mvn.w	r2, #16
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2208      	movs	r2, #8
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f9f8 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9eb 	bl	80046d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f9fa 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd f9bc 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fd3a 	bl	8004dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f9be 	bl	800470c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b20      	cmp	r3, #32
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0220 	mvn.w	r2, #32
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fd05 	bl	8004dc6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0ae      	b.n	8004540 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	f200 809f 	bhi.w	8004530 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800442d 	.word	0x0800442d
 80043fc:	08004531 	.word	0x08004531
 8004400:	08004531 	.word	0x08004531
 8004404:	08004531 	.word	0x08004531
 8004408:	0800446d 	.word	0x0800446d
 800440c:	08004531 	.word	0x08004531
 8004410:	08004531 	.word	0x08004531
 8004414:	08004531 	.word	0x08004531
 8004418:	080044af 	.word	0x080044af
 800441c:	08004531 	.word	0x08004531
 8004420:	08004531 	.word	0x08004531
 8004424:	08004531 	.word	0x08004531
 8004428:	080044ef 	.word	0x080044ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f9d6 	bl	80047e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0208 	orr.w	r2, r2, #8
 8004446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6999      	ldr	r1, [r3, #24]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	619a      	str	r2, [r3, #24]
      break;
 800446a:	e064      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fa1c 	bl	80048b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6999      	ldr	r1, [r3, #24]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	619a      	str	r2, [r3, #24]
      break;
 80044ac:	e043      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fa65 	bl	8004984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0208 	orr.w	r2, r2, #8
 80044c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0204 	bic.w	r2, r2, #4
 80044d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69d9      	ldr	r1, [r3, #28]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
      break;
 80044ec:	e023      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 faaf 	bl	8004a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69d9      	ldr	r1, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	021a      	lsls	r2, r3, #8
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	61da      	str	r2, [r3, #28]
      break;
 800452e:	e002      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_TIM_ConfigClockSource+0x1c>
 8004560:	2302      	movs	r3, #2
 8004562:	e0b4      	b.n	80046ce <HAL_TIM_ConfigClockSource+0x186>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459c:	d03e      	beq.n	800461c <HAL_TIM_ConfigClockSource+0xd4>
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a2:	f200 8087 	bhi.w	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	f000 8086 	beq.w	80046ba <HAL_TIM_ConfigClockSource+0x172>
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	d87f      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b70      	cmp	r3, #112	; 0x70
 80045b6:	d01a      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0xa6>
 80045b8:	2b70      	cmp	r3, #112	; 0x70
 80045ba:	d87b      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b60      	cmp	r3, #96	; 0x60
 80045be:	d050      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x11a>
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d877      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b50      	cmp	r3, #80	; 0x50
 80045c6:	d03c      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0xfa>
 80045c8:	2b50      	cmp	r3, #80	; 0x50
 80045ca:	d873      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d058      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x13a>
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d86f      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d064      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b30      	cmp	r3, #48	; 0x30
 80045da:	d86b      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d060      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d867      	bhi.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05c      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x15a>
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d05a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	e062      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f000 faf0 	bl	8004be2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	609a      	str	r2, [r3, #8]
      break;
 800461a:	e04f      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f000 fad9 	bl	8004be2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463e:	609a      	str	r2, [r3, #8]
      break;
 8004640:	e03c      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f000 fa50 	bl	8004af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2150      	movs	r1, #80	; 0x50
 800465a:	4618      	mov	r0, r3
 800465c:	f000 faa7 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 8004660:	e02c      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 fa6e 	bl	8004b50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2160      	movs	r1, #96	; 0x60
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fa97 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 8004680:	e01c      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 fa30 	bl	8004af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fa87 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80046a0:	e00c      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f000 fa7e 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80046b2:	e003      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e000      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
	...

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <TIM_Base_SetConfig+0xb8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <TIM_Base_SetConfig+0xbc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <TIM_Base_SetConfig+0xc0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <TIM_Base_SetConfig+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <TIM_Base_SetConfig+0xbc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <TIM_Base_SetConfig+0xc0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <TIM_Base_SetConfig+0xb8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800

080047e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0201 	bic.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 0302 	bic.w	r3, r3, #2
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <TIM_OC1_SetConfig+0xc8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10c      	bne.n	800485a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0308 	bic.w	r3, r3, #8
 8004846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <TIM_OC1_SetConfig+0xc8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00

080048b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 0210 	bic.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0320 	bic.w	r3, r3, #32
 80048fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <TIM_OC2_SetConfig+0xd0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10d      	bne.n	800492c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a14      	ldr	r2, [pc, #80]	; (8004980 <TIM_OC2_SetConfig+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d113      	bne.n	800495c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	40012c00 	.word	0x40012c00

08004984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_OC3_SetConfig+0xd0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10d      	bne.n	80049fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <TIM_OC3_SetConfig+0xd0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d113      	bne.n	8004a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00

08004a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <TIM_OC4_SetConfig+0x98>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d109      	bne.n	8004acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00

08004af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 030a 	bic.w	r3, r3, #10
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0210 	bic.w	r2, r3, #16
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	031b      	lsls	r3, r3, #12
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f043 0307 	orr.w	r3, r3, #7
 8004bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	609a      	str	r2, [r3, #8]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2201      	movs	r2, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1a      	ldr	r2, [r3, #32]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1a      	ldr	r2, [r3, #32]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e046      	b.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10c      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800

08004d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e03d      	b.n	8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
	...

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	2600      	movs	r6, #0
 8004df0:	4d0c      	ldr	r5, [pc, #48]	; (8004e24 <__libc_init_array+0x38>)
 8004df2:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	f000 f822 	bl	8004e44 <_init>
 8004e00:	2600      	movs	r6, #0
 8004e02:	4d0a      	ldr	r5, [pc, #40]	; (8004e2c <__libc_init_array+0x40>)
 8004e04:	4c0a      	ldr	r4, [pc, #40]	; (8004e30 <__libc_init_array+0x44>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08004e9c 	.word	0x08004e9c
 8004e28:	08004e9c 	.word	0x08004e9c
 8004e2c:	08004e9c 	.word	0x08004e9c
 8004e30:	08004ea0 	.word	0x08004ea0

08004e34 <memset>:
 8004e34:	4603      	mov	r3, r0
 8004e36:	4402      	add	r2, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
