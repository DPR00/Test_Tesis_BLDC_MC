
Test_Tesis_BLDC_MC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008ba8  08008ba8  00018ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008df8  08008df8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08008df8  08008df8  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008df8  08008df8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dfc  08008dfc  00018dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08008e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200000b4  08008eb4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08008eb4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010917  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c1  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018df0  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011937  00000000  00000000  0004db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e57  00000000  00000000  0005f47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f22d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  000f2328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b4 	.word	0x200000b4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b8c 	.word	0x08008b8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b8 	.word	0x200000b8
 800014c:	08008b8c 	.word	0x08008b8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device){
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]

	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8001154:	233d      	movs	r3, #61	; 0x3d
 8001156:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode),10);
 8001158:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800115c:	230a      	movs	r3, #10
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2302      	movs	r3, #2
 8001162:	2150      	movs	r1, #80	; 0x50
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f003 fdad 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f001 ffde 	bl	800312c <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8001170:	f240 1307 	movw	r3, #263	; 0x107
 8001174:	853b      	strh	r3, [r7, #40]	; 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8001176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800117a:	230a      	movs	r3, #10
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2302      	movs	r3, #2
 8001180:	2150      	movs	r1, #80	; 0x50
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f003 fd9e 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 ffcf 	bl	800312c <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 800118e:	2308      	movs	r3, #8
 8001190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <BNO055_Init_I2C+0x184>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	015b      	lsls	r3, r3, #5
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <BNO055_Init_I2C+0x188>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <BNO055_Init_I2C+0x18c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80011b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011bc:	230a      	movs	r3, #10
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	2150      	movs	r1, #80	; 0x50
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f003 fd7d 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80011ca:	230a      	movs	r3, #10
 80011cc:	f887 3020 	strb.w	r3, [r7, #32]
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <BNO055_Init_I2C+0x190>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <BNO055_Init_I2C+0x194>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 80011e8:	f107 0220 	add.w	r2, r7, #32
 80011ec:	230a      	movs	r3, #10
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2302      	movs	r3, #2
 80011f2:	2150      	movs	r1, #80	; 0x50
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f003 fd65 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f001 ff96 	bl	800312c <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8001200:	230b      	movs	r3, #11
 8001202:	773b      	strb	r3, [r7, #28]
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <BNO055_Init_I2C+0x198>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 800120a:	f107 021c 	add.w	r2, r7, #28
 800120e:	230a      	movs	r3, #10
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2302      	movs	r3, #2
 8001214:	2150      	movs	r1, #80	; 0x50
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f003 fd54 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f001 ff85 	bl	800312c <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8001222:	2300      	movs	r3, #0
 8001224:	763b      	strb	r3, [r7, #24]
 8001226:	2309      	movs	r3, #9
 8001228:	767b      	strb	r3, [r7, #25]
 800122a:	2301      	movs	r3, #1
 800122c:	76bb      	strb	r3, [r7, #26]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <BNO055_Init_I2C+0x19c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	b25a      	sxtb	r2, r3
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <BNO055_Init_I2C+0x1a0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <BNO055_Init_I2C+0x1a4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b25b      	sxtb	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8001250:	f107 0218 	add.w	r2, r7, #24
 8001254:	230a      	movs	r3, #10
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2304      	movs	r3, #4
 800125a:	2150      	movs	r1, #80	; 0x50
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 fd31 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f001 ff62 	bl	800312c <HAL_Delay>

	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 8001268:	2307      	movs	r3, #7
 800126a:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 800126c:	f107 0214 	add.w	r2, r7, #20
 8001270:	230a      	movs	r3, #10
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2302      	movs	r3, #2
 8001276:	2150      	movs	r1, #80	; 0x50
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f003 fd23 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f001 ff54 	bl	800312c <HAL_Delay>
//	SendAccelData(USART1, (uint8_t*)conf_units);
//	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_units, sizeof(conf_units), 10);
//	HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8001284:	233e      	movs	r3, #62	; 0x3e
 8001286:	743b      	strb	r3, [r7, #16]
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <BNO055_Init_I2C+0x1a8>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 800128e:	f107 0210 	add.w	r2, r7, #16
 8001292:	230a      	movs	r3, #10
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2302      	movs	r3, #2
 8001298:	2150      	movs	r1, #80	; 0x50
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f003 fd12 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f001 ff43 	bl	800312c <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 80012a6:	233d      	movs	r3, #61	; 0x3d
 80012a8:	733b      	strb	r3, [r7, #12]
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <BNO055_Init_I2C+0x1ac>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	230a      	movs	r3, #10
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	2150      	movs	r1, #80	; 0x50
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f003 fd01 	bl	8004cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80012c2:	2032      	movs	r0, #50	; 0x32
 80012c4:	f001 ff32 	bl	800312c <HAL_Delay>

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000d2 	.word	0x200000d2
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000001 	.word	0x20000001
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200000d1 	.word	0x200000d1
 80012e4:	200000d0 	.word	0x200000d0
 80012e8:	200000d3 	.word	0x200000d3
 80012ec:	20000003 	.word	0x20000003
 80012f0:	20000004 	.word	0x20000004
 80012f4:	200000d4 	.word	0x200000d4
 80012f8:	20000005 	.word	0x20000005

080012fc <GetEulerData>:

	return status;
}

// Get sensor fusion data: euler angles
uint8_t GetEulerData(I2C_HandleTypeDef *hi2c_device, uint8_t* str){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af04      	add	r7, sp, #16
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_EUL_HEADING_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES, 100);
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2312      	movs	r3, #18
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	221a      	movs	r2, #26
 8001316:	2150      	movs	r1, #80	; 0x50
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f003 fdd1 	bl	8004ec0 <HAL_I2C_Mem_Read>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]

	return status;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <PIDController_Update>:

	pid->out = 0.0f;

}

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7ff fbf0 	bl	8000b20 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff fcf2 	bl	8000d34 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	69dc      	ldr	r4, [r3, #28]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fce7 	bl	8000d34 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fcdf 	bl	8000d34 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	461d      	mov	r5, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fbcf 	bl	8000b24 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4628      	mov	r0, r5
 800138c:	f7ff fcd2 	bl	8000d34 <__aeabi_fmul>
 8001390:	4603      	mov	r3, r0
 8001392:	4619      	mov	r1, r3
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fbc5 	bl	8000b24 <__addsf3>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	61da      	str	r2, [r3, #28]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMax) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4610      	mov	r0, r2
 80013ae:	f7ff fe7d 	bl	80010ac <__aeabi_fcmpgt>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <PIDController_Update+0x96>

        pid->integrator = pid->limMax;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	61da      	str	r2, [r3, #28]
 80013c0:	e00e      	b.n	80013e0 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMin) {
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff fe4f 	bl	8001070 <__aeabi_fcmplt>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <PIDController_Update+0xb4>

        pid->integrator = pid->limMin;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	61da      	str	r2, [r3, #28]

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fb9c 	bl	8000b24 <__addsf3>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fb92 	bl	8000b20 <__aeabi_fsub>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fc97 	bl	8000d34 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4619      	mov	r1, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fb87 	bl	8000b24 <__addsf3>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff fb7d 	bl	8000b20 <__aeabi_fsub>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7ff fc7f 	bl	8000d34 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fb72 	bl	8000b24 <__addsf3>
 8001440:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001442:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4619      	mov	r1, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fb69 	bl	8000b24 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff fb61 	bl	8000b24 <__addsf3>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fd18 	bl	8000e9c <__aeabi_fdiv>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb52 	bl	8000b24 <__addsf3>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff fb4a 	bl	8000b24 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f7ff fe02 	bl	80010ac <__aeabi_fcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b6:	e00e      	b.n	80014d6 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fdd4 	bl	8001070 <__aeabi_fcmplt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bdb0      	pop	{r4, r5, r7, pc}

080014ee <PIDController_Reset>:

void PIDController_Reset(PIDController *pid) {
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
 	pid->prevError  = 0.0f;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <normalizeAngle>:
 */

#include "STANLEY.h"
#include <math.h>

float normalizeAngle(float angle){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	const float PI = 3.141592653589f;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <normalizeAngle+0x6c>)
 8001532:	60fb      	str	r3, [r7, #12]

	while(angle > PI){
 8001534:	e00b      	b.n	800154e <normalizeAngle+0x26>
		angle = angle - 2*PI;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4619      	mov	r1, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff faf2 	bl	8000b24 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff faeb 	bl	8000b20 <__aeabi_fsub>
 800154a:	4603      	mov	r3, r0
 800154c:	607b      	str	r3, [r7, #4]
	while(angle > PI){
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fdab 	bl	80010ac <__aeabi_fcmpgt>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ec      	bne.n	8001536 <normalizeAngle+0xe>
	}
	while(angle < -PI){
 800155c:	e00b      	b.n	8001576 <normalizeAngle+0x4e>
			angle = angle + 2*PI;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4619      	mov	r1, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fade 	bl	8000b24 <__addsf3>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fad9 	bl	8000b24 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	607b      	str	r3, [r7, #4]
	while(angle < -PI){
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fd76 	bl	8001070 <__aeabi_fcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e9      	bne.n	800155e <normalizeAngle+0x36>
	}

	return angle;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40490fdb 	.word	0x40490fdb

08001598 <polyFit>:

float *polyFit(float x0, float x1, float y0, float y1){
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
	float m = (y1-y0)/(x1-x0);
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f7ff fab9 	bl	8000b20 <__aeabi_fsub>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461c      	mov	r4, r3
 80015b2:	68f9      	ldr	r1, [r7, #12]
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fab3 	bl	8000b20 <__aeabi_fsub>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fc6c 	bl	8000e9c <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
	float c = y0 - m*x0;
 80015c8:	68f9      	ldr	r1, [r7, #12]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff fbb2 	bl	8000d34 <__aeabi_fmul>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff faa3 	bl	8000b20 <__aeabi_fsub>
 80015da:	4603      	mov	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]
	static float p[2];
	p[0]= m; p[1]= c;
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <polyFit+0x5c>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <polyFit+0x5c>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6053      	str	r3, [r2, #4]

	return p;
 80015ea:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <polyFit+0x5c>)
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}
 80015f4:	200000d8 	.word	0x200000d8

080015f8 <calcular_posActual>:

float *calcular_posActual(float posX, float posY, float current_speed_rpm, float yaw, float ang_direc, float T){
 80015f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
	posX = posX + current_speed_rpm*cos(yaw + ang_direc)*T;
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7fe ff05 	bl	8000418 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe ff00 	bl	8000418 <__aeabi_f2d>
 8001618:	4680      	mov	r8, r0
 800161a:	4689      	mov	r9, r1
 800161c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f7ff fa80 	bl	8000b24 <__addsf3>
 8001624:	4603      	mov	r3, r0
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fef6 	bl	8000418 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f005 fffc 	bl	8007630 <cos>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4640      	mov	r0, r8
 800163e:	4649      	mov	r1, r9
 8001640:	f7fe ff42 	bl	80004c8 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4690      	mov	r8, r2
 800164a:	4699      	mov	r9, r3
 800164c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800164e:	f7fe fee3 	bl	8000418 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe ff35 	bl	80004c8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7fe fd79 	bl	800015c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fa01 	bl	8000a78 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	60fb      	str	r3, [r7, #12]
	posY = posY + current_speed_rpm*sin(yaw + ang_direc)*T;
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7fe fecc 	bl	8000418 <__aeabi_f2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe fec7 	bl	8000418 <__aeabi_f2d>
 800168a:	4680      	mov	r8, r0
 800168c:	4689      	mov	r9, r1
 800168e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff fa47 	bl	8000b24 <__addsf3>
 8001696:	4603      	mov	r3, r0
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe febd 	bl	8000418 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f006 f809 	bl	80076bc <sin>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4640      	mov	r0, r8
 80016b0:	4649      	mov	r1, r9
 80016b2:	f7fe ff09 	bl	80004c8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4690      	mov	r8, r2
 80016bc:	4699      	mov	r9, r3
 80016be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016c0:	f7fe feaa 	bl	8000418 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fefc 	bl	80004c8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fd40 	bl	800015c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9c8 	bl	8000a78 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	60bb      	str	r3, [r7, #8]

	static float arr_currPos[2];
	arr_currPos[0]= posX; arr_currPos[1]= posY;
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <calcular_posActual+0x10c>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <calcular_posActual+0x10c>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	6053      	str	r3, [r2, #4]

	return arr_currPos;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <calcular_posActual+0x10c>)
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001704:	200000e0 	.word	0x200000e0

08001708 <StanleyController_Update>:

	stanley->out = 0.0f;

}

float StanleyController_Update(StanleyController *stanley, float yaw, float vel, float arr_currPos[], float arr_path[]){
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b097      	sub	sp, #92	; 0x5c
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]

	float x = arr_currPos[0];
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
	float y = arr_currPos[1];
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
	float x0 = arr_path[0], y0 = arr_path[1], x1 = arr_path[2], y1 = arr_path[3];
 8001722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48
 8001728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
 800172e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
 8001734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c

	// path line equation
	float *p;
	p = polyFit(x0, x1, y0, y1);
 800173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800173e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001740:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001742:	f7ff ff29 	bl	8001598 <polyFit>
 8001746:	63b8      	str	r0, [r7, #56]	; 0x38
	float a = *p, b = 1.0f, c = *(p+1);
 8001748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
 800174e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
 8001754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c

	// path angle
	float path_angle = atan2f(y-y0, x-x0);
 800175a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800175c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800175e:	f7ff f9df 	bl	8000b20 <__aeabi_fsub>
 8001762:	4603      	mov	r3, r0
 8001764:	461c      	mov	r4, r3
 8001766:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001768:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800176a:	f7ff f9d9 	bl	8000b20 <__aeabi_fsub>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4620      	mov	r0, r4
 8001774:	f006 f80c 	bl	8007790 <atan2f>
 8001778:	62b8      	str	r0, [r7, #40]	; 0x28

	// crosstrack error
	float crosstrack_error = (a*x + b*y + c)/sqrt(a*a + b*b);
 800177a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800177c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800177e:	f7ff fad9 	bl	8000d34 <__aeabi_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	461c      	mov	r4, r3
 8001786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800178a:	f7ff fad3 	bl	8000d34 <__aeabi_fmul>
 800178e:	4603      	mov	r3, r0
 8001790:	4619      	mov	r1, r3
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff f9c6 	bl	8000b24 <__addsf3>
 8001798:	4603      	mov	r3, r0
 800179a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f9c1 	bl	8000b24 <__addsf3>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe37 	bl	8000418 <__aeabi_f2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017b2:	f7ff fabf 	bl	8000d34 <__aeabi_fmul>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461e      	mov	r6, r3
 80017ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017be:	f7ff fab9 	bl	8000d34 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4630      	mov	r0, r6
 80017c8:	f7ff f9ac 	bl	8000b24 <__addsf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe22 	bl	8000418 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f005 ffb4 	bl	8007748 <sqrt>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe ff98 	bl	800071c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f940 	bl	8000a78 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	657b      	str	r3, [r7, #84]	; 0x54

	// angle_cross_track
	float angle_cross_track = atan2f(y-y0, x-x0);
 80017fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001800:	f7ff f98e 	bl	8000b20 <__aeabi_fsub>
 8001804:	4603      	mov	r3, r0
 8001806:	461c      	mov	r4, r3
 8001808:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800180a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800180c:	f7ff f988 	bl	8000b20 <__aeabi_fsub>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f005 ffbb 	bl	8007790 <atan2f>
 800181a:	6278      	str	r0, [r7, #36]	; 0x24
	float angle_path2ct = path_angle - angle_cross_track;
 800181c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001820:	f7ff f97e 	bl	8000b20 <__aeabi_fsub>
 8001824:	4603      	mov	r3, r0
 8001826:	623b      	str	r3, [r7, #32]
	angle_path2ct = normalizeAngle(angle_path2ct);
 8001828:	6a38      	ldr	r0, [r7, #32]
 800182a:	f7ff fe7d 	bl	8001528 <normalizeAngle>
 800182e:	6238      	str	r0, [r7, #32]

	if(angle_path2ct > 0){
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff fc39 	bl	80010ac <__aeabi_fcmpgt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <StanleyController_Update+0x142>
		crosstrack_error = fabs(crosstrack_error);
 8001840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
 8001848:	e00f      	b.n	800186a <StanleyController_Update+0x162>
	}
	else{
		crosstrack_error = - fabs(crosstrack_error);
 800184a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fde1 	bl	8000418 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f90b 	bl	8000a78 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001868:	657b      	str	r3, [r7, #84]	; 0x54
	}

	float crosstrack_steer = atan2f(stanley->k*crosstrack_error, vel+stanley->ks);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fa5f 	bl	8000d34 <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	461c      	mov	r4, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f94f 	bl	8000b24 <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f005 ff80 	bl	8007790 <atan2f>
 8001890:	61f8      	str	r0, [r7, #28]

	// heading error
	float heading = path_angle - yaw;
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001896:	f7ff f943 	bl	8000b20 <__aeabi_fsub>
 800189a:	4603      	mov	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]
	heading = normalizeAngle(heading);
 800189e:	69b8      	ldr	r0, [r7, #24]
 80018a0:	f7ff fe42 	bl	8001528 <normalizeAngle>
 80018a4:	61b8      	str	r0, [r7, #24]

	float steer = heading + crosstrack_steer;
 80018a6:	69f9      	ldr	r1, [r7, #28]
 80018a8:	69b8      	ldr	r0, [r7, #24]
 80018aa:	f7ff f93b 	bl	8000b24 <__addsf3>
 80018ae:	4603      	mov	r3, r0
 80018b0:	617b      	str	r3, [r7, #20]

	stanley->out = steer;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	609a      	str	r2, [r3, #8]

	return steer;
 80018b8:	697b      	ldr	r3, [r7, #20]

}
 80018ba:	4618      	mov	r0, r3
 80018bc:	375c      	adds	r7, #92	; 0x5c
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ca:	f001 fbcd 	bl	8003068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ce:	f000 fa3d 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d2:	f000 fccd 	bl	8002270 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018d6:	f000 fa89 	bl	8001dec <MX_ADC1_Init>
  MX_TIM1_Init();
 80018da:	f000 fb29 	bl	8001f30 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018de:	f000 fbdf 	bl	80020a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018e2:	f000 fc29 	bl	8002138 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018e6:	f000 fc75 	bl	80021d4 <MX_TIM4_Init>
  MX_CAN_Init();
 80018ea:	f000 fabd 	bl	8001e68 <MX_CAN_Init>
  MX_I2C1_Init();
 80018ee:	f000 faf1 	bl	8001ed4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Inicializamos I2C imu
  BNO055_Init_I2C(&hi2c1);
 80018f2:	4856      	ldr	r0, [pc, #344]	; (8001a4c <main+0x188>)
 80018f4:	f7ff fc2a 	bl	800114c <BNO055_Init_I2C>

  // Inicializamos los timer timers
  HAL_TIM_Base_Start(&htim1);	// Timer de PWMs (10kH)
 80018f8:	4855      	ldr	r0, [pc, #340]	; (8001a50 <main+0x18c>)
 80018fa:	f004 feb5 	bl	8006668 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);	// Timer principal (2.5 kHz)
 80018fe:	4855      	ldr	r0, [pc, #340]	; (8001a54 <main+0x190>)
 8001900:	f004 fefc 	bl	80066fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);		// Timer para delay de microsegundos
 8001904:	4854      	ldr	r0, [pc, #336]	; (8001a58 <main+0x194>)
 8001906:	f004 feaf 	bl	8006668 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);	// Timer para el control (10Hz)
 800190a:	4854      	ldr	r0, [pc, #336]	; (8001a5c <main+0x198>)
 800190c:	f004 fef6 	bl	80066fc <HAL_TIM_Base_Start_IT>

  // Inicializamos los 3 canales de PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001910:	2100      	movs	r1, #0
 8001912:	484f      	ldr	r0, [pc, #316]	; (8001a50 <main+0x18c>)
 8001914:	f004 ff9c 	bl	8006850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001918:	2104      	movs	r1, #4
 800191a:	484d      	ldr	r0, [pc, #308]	; (8001a50 <main+0x18c>)
 800191c:	f004 ff98 	bl	8006850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001920:	2108      	movs	r1, #8
 8001922:	484b      	ldr	r0, [pc, #300]	; (8001a50 <main+0x18c>)
 8001924:	f004 ff94 	bl	8006850 <HAL_TIM_PWM_Start>

  // Iniciamos con 0 de duty los 3 PWM HIGH de loS MOSFETS
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <main+0x18c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <main+0x18c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001938:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <main+0x18c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c

  // Inicializamos en low las salidas LOW de los MOSFETS
  HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001946:	4846      	ldr	r0, [pc, #280]	; (8001a60 <main+0x19c>)
 8001948:	f003 f85f 	bl	8004a0a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001952:	4843      	ldr	r0, [pc, #268]	; (8001a60 <main+0x19c>)
 8001954:	f003 f859 	bl	8004a0a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195e:	4840      	ldr	r0, [pc, #256]	; (8001a60 <main+0x19c>)
 8001960:	f003 f853 	bl	8004a0a <HAL_GPIO_WritePin>

  //CAN
  HAL_CAN_Start(&hcan);
 8001964:	483f      	ldr	r0, [pc, #252]	; (8001a64 <main+0x1a0>)
 8001966:	f002 f92b 	bl	8003bc0 <HAL_CAN_Start>
  //CAN FIFO activation
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800196a:	2102      	movs	r1, #2
 800196c:	483d      	ldr	r0, [pc, #244]	; (8001a64 <main+0x1a0>)
 800196e:	f002 fb5b 	bl	8004028 <HAL_CAN_ActivateNotification>

//Configurando la transmision
  TxHeader.DLC = 8;  // Son 8 bytes de data
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <main+0x1a4>)
 8001974:	2208      	movs	r2, #8
 8001976:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <main+0x1a4>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Identificador del mensaje
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <main+0x1a4>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <main+0x1a4>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // Este es el ID que mandaremos al periferico
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <main+0x1a4>)
 800198c:	f240 1203 	movw	r2, #259	; 0x103
 8001990:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <main+0x1a4>)
 8001994:	2200      	movs	r2, #0
 8001996:	751a      	strb	r2, [r3, #20]

  // CAN_FLAG_REG Initialization
  CAN_FLAG_REG |=  (1<<GF);	// General Flag 1 (necessary)
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <main+0x1a8>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <main+0x1a8>)
 80019a4:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG = (CAN_FLAG_REG & (~(1 << SU))) | (SPEED_UNITS << SU); // speed unit setting a
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <main+0x1a8>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	f023 0308 	bic.w	r3, r3, #8
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <main+0x1a8>)
 80019b2:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<EM); // No Emergency
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <main+0x1a8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <main+0x1a8>)
 80019c0:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<PW); // Initial OFF
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <main+0x1a8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f023 0302 	bic.w	r3, r3, #2
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <main+0x1a8>)
 80019ce:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<CS0); //
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <main+0x1a8>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f023 0310 	bic.w	r3, r3, #16
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <main+0x1a8>)
 80019dc:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<CS1); // Cruise speed
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <main+0x1a8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f023 0320 	bic.w	r3, r3, #32
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <main+0x1a8>)
 80019ea:	701a      	strb	r2, [r3, #0]

  TxData[0] = 0; 	//Speed component
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <main+0x1ac>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;	//Speed component
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <main+0x1ac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;	//Duty Cycle
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <main+0x1ac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;	// ...
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <main+0x1ac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;	// ...
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <main+0x1ac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;	// ...
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <main+0x1ac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;	// ...
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <main+0x1ac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	719a      	strb	r2, [r3, #6]
  TxData[7] = CAN_FLAG_REG;	//Flags byte  [0 0 0 0 0 0 0 1] [x x cs cs su em pw gf]
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <main+0x1a8>)
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <main+0x1ac>)
 8001a1c:	71da      	strb	r2, [r3, #7]
  // em: emergency ( 1 for alert)
  // pw: Power flag (0 off, 1 on)
  // gf: general flag (1 always)

  // Incializamos el led de testeo apagado
  HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13,  GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <main+0x1b0>)
 8001a26:	f002 fff0 	bl	8004a0a <HAL_GPIO_WritePin>

  // Leemos los hall por primera vez
  read_hall();
 8001a2a:	f000 fce3 	bl	80023f4 <read_hall>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer2_flag == 1){
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <main+0x1b4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d129      	bne.n	8001a8a <main+0x1c6>
		  if (!TELEMETRY) {
			  get_adc();
 8001a36:	f000 fc9f 	bl	8002378 <get_adc>
			  }else{
				  desired_speed_rpm = RxData[0] + RxData[1];
			  }

		  }
		  read_hall();
 8001a3a:	f000 fcdb 	bl	80023f4 <read_hall>

		  if (direction == 0) bldc_move();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <main+0x1b8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11c      	bne.n	8001a80 <main+0x1bc>
 8001a46:	f000 fd21 	bl	800248c <bldc_move>
 8001a4a:	e01b      	b.n	8001a84 <main+0x1c0>
 8001a4c:	20000140 	.word	0x20000140
 8001a50:	20000194 	.word	0x20000194
 8001a54:	200001dc 	.word	0x200001dc
 8001a58:	20000224 	.word	0x20000224
 8001a5c:	2000026c 	.word	0x2000026c
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	20000118 	.word	0x20000118
 8001a68:	2000031c 	.word	0x2000031c
 8001a6c:	20000318 	.word	0x20000318
 8001a70:	20000354 	.word	0x20000354
 8001a74:	40011000 	.word	0x40011000
 8001a78:	20000314 	.word	0x20000314
 8001a7c:	200002bb 	.word	0x200002bb
		  else bldc_move_back();
 8001a80:	f000 fe1e 	bl	80026c0 <bldc_move_back>

		  timer2_flag = 0;
 8001a84:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <main+0x414>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
	  }

	  if (timer4_flag == 1){
 8001a8a:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <main+0x418>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f040 8102 	bne.w	8001c98 <main+0x3d4>

		  // Acá se realiza el control PID y Stanley
		  // CONTROL PID
		  uint8_t u = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]

		  PIDController_Update(&pid, desired_speed_rpm, current_speed_rpm);
 8001a98:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <main+0x41c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a91      	ldr	r2, [pc, #580]	; (8001ce4 <main+0x420>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4891      	ldr	r0, [pc, #580]	; (8001ce8 <main+0x424>)
 8001aa4:	f7ff fc42 	bl	800132c <PIDController_Update>

		  // Protection
		  if(desired_speed_rpm<=20){
 8001aa8:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <main+0x41c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	498f      	ldr	r1, [pc, #572]	; (8001cec <main+0x428>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fae8 	bl	8001084 <__aeabi_fcmple>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <main+0x1fc>
			  PIDController_Reset(&pid);
 8001aba:	488b      	ldr	r0, [pc, #556]	; (8001ce8 <main+0x424>)
 8001abc:	f7ff fd17 	bl	80014ee <PIDController_Reset>
		  }

		  integral = pid.integrator;
 8001ac0:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <main+0x424>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <main+0x42c>)
 8001ac6:	6013      	str	r3, [r2, #0]
		  u = pid.out;
 8001ac8:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <main+0x424>)
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb1d 	bl	800110c <__aeabi_f2uiz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
		  duty_cycle = u;
 8001ad6:	4a87      	ldr	r2, [pc, #540]	; (8001cf4 <main+0x430>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	7013      	strb	r3, [r2, #0]
		  //HAL_GPIO_TogglePin(GPIOC , TEST_LED_Pin);

		  // CONTROL STANLEY
		  if(TEST_STANLEY==1){
			  // Leer yaw
			  GetEulerData(&hi2c1, (uint8_t*)euler_readings);
 8001adc:	4986      	ldr	r1, [pc, #536]	; (8001cf8 <main+0x434>)
 8001ade:	4887      	ldr	r0, [pc, #540]	; (8001cfc <main+0x438>)
 8001ae0:	f7ff fc0c 	bl	80012fc <GetEulerData>
			  euler_data[0] = (((int16_t)((uint8_t *)(euler_readings))[1] << 8) | ((uint8_t *)(euler_readings))[0]);
 8001ae4:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <main+0x434>)
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <main+0x434>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <main+0x43c>)
 8001af8:	801a      	strh	r2, [r3, #0]
			  yaw = ((float)(euler_data[0]))*PI/180.0/16.0 ; // rad
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <main+0x43c>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f8c3 	bl	8000c8c <__aeabi_i2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a7e      	ldr	r2, [pc, #504]	; (8001d04 <main+0x440>)
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f911 	bl	8000d34 <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc7f 	bl	8000418 <__aeabi_f2d>
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <main+0x444>)
 8001b20:	f7fe fdfc 	bl	800071c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <main+0x448>)
 8001b32:	f7fe fdf3 	bl	800071c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ff9b 	bl	8000a78 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a72      	ldr	r2, [pc, #456]	; (8001d10 <main+0x44c>)
 8001b46:	6013      	str	r3, [r2, #0]

			  float *arr_currPos;
			  arr_currPos = calcular_posActual(posX, posY, current_speed_rpm, yaw, ang_direc, SAMPLE_TIME_S);
 8001b48:	4b72      	ldr	r3, [pc, #456]	; (8001d14 <main+0x450>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <main+0x454>)
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <main+0x420>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <main+0x44c>)
 8001b56:	681c      	ldr	r4, [r3, #0]
 8001b58:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <main+0x458>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4d70      	ldr	r5, [pc, #448]	; (8001d20 <main+0x45c>)
 8001b5e:	9501      	str	r5, [sp, #4]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4623      	mov	r3, r4
 8001b64:	f7ff fd48 	bl	80015f8 <calcular_posActual>
 8001b68:	6038      	str	r0, [r7, #0]
			  posX = arr_currPos[0];
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a69      	ldr	r2, [pc, #420]	; (8001d14 <main+0x450>)
 8001b70:	6013      	str	r3, [r2, #0]
			  posY = arr_currPos[1];
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <main+0x454>)
 8001b78:	6013      	str	r3, [r2, #0]

			  send_can_pos(posX, posY);	// Enviamos la data de Pos por CAN
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <main+0x450>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <main+0x454>)
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fecd 	bl	8002924 <send_can_pos>

			  if(RxData[6]!= 255 && RxData[7]!= 255){
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <main+0x460>)
 8001b8c:	799b      	ldrb	r3, [r3, #6]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d067      	beq.n	8001c62 <main+0x39e>
 8001b92:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <main+0x460>)
 8001b94:	79db      	ldrb	r3, [r3, #7]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d063      	beq.n	8001c62 <main+0x39e>
				  	arr_path[0] = RxData[0] + RxData[1]*0.001f;
 8001b9a:	4b62      	ldr	r3, [pc, #392]	; (8001d24 <main+0x460>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f874 	bl	8000c8c <__aeabi_i2f>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <main+0x460>)
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f86e 	bl	8000c8c <__aeabi_i2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	495d      	ldr	r1, [pc, #372]	; (8001d28 <main+0x464>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f8bd 	bl	8000d34 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7fe ffb0 	bl	8000b24 <__addsf3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <main+0x468>)
 8001bca:	601a      	str	r2, [r3, #0]
				  	arr_path[1] = RxData[2] + RxData[3]*0.001f;
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <main+0x460>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f85b 	bl	8000c8c <__aeabi_i2f>
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <main+0x460>)
 8001bda:	78db      	ldrb	r3, [r3, #3]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f855 	bl	8000c8c <__aeabi_i2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4950      	ldr	r1, [pc, #320]	; (8001d28 <main+0x464>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8a4 	bl	8000d34 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7fe ff97 	bl	8000b24 <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <main+0x468>)
 8001bfc:	605a      	str	r2, [r3, #4]
				  	arr_path[2] = RxData[4] + RxData[5]*0.001f;
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <main+0x460>)
 8001c00:	791b      	ldrb	r3, [r3, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f842 	bl	8000c8c <__aeabi_i2f>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <main+0x460>)
 8001c0c:	795b      	ldrb	r3, [r3, #5]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f83c 	bl	8000c8c <__aeabi_i2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4944      	ldr	r1, [pc, #272]	; (8001d28 <main+0x464>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f88b 	bl	8000d34 <__aeabi_fmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4619      	mov	r1, r3
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe ff7e 	bl	8000b24 <__addsf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <main+0x468>)
 8001c2e:	609a      	str	r2, [r3, #8]
				  	arr_path[3] = RxData[6] + RxData[7]*0.001f;
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <main+0x460>)
 8001c32:	799b      	ldrb	r3, [r3, #6]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f829 	bl	8000c8c <__aeabi_i2f>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <main+0x460>)
 8001c3e:	79db      	ldrb	r3, [r3, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f823 	bl	8000c8c <__aeabi_i2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4937      	ldr	r1, [pc, #220]	; (8001d28 <main+0x464>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f872 	bl	8000d34 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7fe ff65 	bl	8000b24 <__addsf3>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <main+0x468>)
 8001c60:	60da      	str	r2, [r3, #12]

			  }

			  steer = StanleyController_Update(&stanley, yaw, current_speed_rpm, arr_currPos, arr_path);
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <main+0x44c>)
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <main+0x420>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <main+0x468>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	482f      	ldr	r0, [pc, #188]	; (8001d30 <main+0x46c>)
 8001c72:	f7ff fd49 	bl	8001708 <StanleyController_Update>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a2e      	ldr	r2, [pc, #184]	; (8001d34 <main+0x470>)
 8001c7a:	6013      	str	r3, [r2, #0]

			  // Falta conversion de steer a stepsPAP

			  // actuar el pap
			  step(&htim3, stepsPAP, 0, 100); // 1600 steps = 1 rev con 100 us de Delay
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <main+0x474>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fa1d 	bl	80010c0 <__aeabi_f2iz>
 8001c86:	4601      	mov	r1, r0
 8001c88:	2364      	movs	r3, #100	; 0x64
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	482b      	ldr	r0, [pc, #172]	; (8001d3c <main+0x478>)
 8001c8e:	f000 ff81 	bl	8002b94 <step>
		  }

		  timer4_flag = 0;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <main+0x418>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
	  }

	  if (estimation_flag){
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <main+0x47c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f43f aec6 	beq.w	8001a2e <main+0x16a>
		  // HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
		  current_speed_rpm = steps*STEPS2RPM;
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <main+0x480>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <main+0x484>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ffe3 	bl	8000c84 <__aeabi_ui2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <main+0x420>)
 8001cc2:	6013      	str	r3, [r2, #0]
		  send_can_vel();	// Enviamos la data de vel por CAN
 8001cc4:	f000 fe92 	bl	80029ec <send_can_vel>
		  estimation_flag = 0;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <main+0x47c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
		  steps = 0;
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <main+0x480>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	801a      	strh	r2, [r3, #0]
	  if (timer2_flag == 1){
 8001cd4:	e6ab      	b.n	8001a2e <main+0x16a>
 8001cd6:	bf00      	nop
 8001cd8:	20000314 	.word	0x20000314
 8001cdc:	20000315 	.word	0x20000315
 8001ce0:	200002c0 	.word	0x200002c0
 8001ce4:	200002c4 	.word	0x200002c4
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	41a00000 	.word	0x41a00000
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	200002cc 	.word	0x200002cc
 8001cf8:	200002d0 	.word	0x200002d0
 8001cfc:	20000140 	.word	0x20000140
 8001d00:	200002e4 	.word	0x200002e4
 8001d04:	40490fdb 	.word	0x40490fdb
 8001d08:	40668000 	.word	0x40668000
 8001d0c:	40300000 	.word	0x40300000
 8001d10:	200002ec 	.word	0x200002ec
 8001d14:	200002f0 	.word	0x200002f0
 8001d18:	200002f4 	.word	0x200002f4
 8001d1c:	200002f8 	.word	0x200002f8
 8001d20:	3dcccccd 	.word	0x3dcccccd
 8001d24:	2000035c 	.word	0x2000035c
 8001d28:	3a83126f 	.word	0x3a83126f
 8001d2c:	20000300 	.word	0x20000300
 8001d30:	20000038 	.word	0x20000038
 8001d34:	200002fc 	.word	0x200002fc
 8001d38:	20000310 	.word	0x20000310
 8001d3c:	20000224 	.word	0x20000224
 8001d40:	20000317 	.word	0x20000317
 8001d44:	200002be 	.word	0x200002be
 8001d48:	76b981db 	.word	0x76b981db

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d56:	2228      	movs	r2, #40	; 0x28
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 fc60 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	2301      	movs	r3, #1
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d84:	2310      	movs	r3, #16
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fe9d 	bl	8005ad0 <HAL_RCC_OscConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001d9c:	f000 fede 	bl	8002b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da0:	230f      	movs	r3, #15
 8001da2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f90a 	bl	8005fd4 <HAL_RCC_ClockConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001dc6:	f000 fec9 	bl	8002b5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 fa8b 	bl	80062f0 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001de0:	f000 febc 	bl	8002b5c <Error_Handler>
  }
}
 8001de4:	bf00      	nop
 8001de6:	3750      	adds	r7, #80	; 0x50
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001dfe:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <MX_ADC1_Init+0x78>)
 8001e00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e2a:	f001 f9a3 	bl	8003174 <HAL_ADC_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e34:	f000 fe92 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_ADC1_Init+0x74>)
 8001e4a:	f001 fc2b 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e54:	f000 fe82 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200000e8 	.word	0x200000e8
 8001e64:	40012400 	.word	0x40012400

08001e68 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <MX_CAN_Init+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e74:	2208      	movs	r2, #8
 8001e76:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e90:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_CAN_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_CAN_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_CAN_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_CAN_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_CAN_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_CAN_Init+0x64>)
 8001eb8:	f001 fd87 	bl	80039ca <HAL_CAN_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001ec2:	f000 fe4b 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000118 	.word	0x20000118
 8001ed0:	40006400 	.word	0x40006400

08001ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C1_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f12:	f002 fd93 	bl	8004a3c <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 fe1e 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000140 	.word	0x20000140
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b096      	sub	sp, #88	; 0x58
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2220      	movs	r2, #32
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fb59 	bl	8007620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f70:	4a4a      	ldr	r2, [pc, #296]	; (800209c <MX_TIM1_Init+0x16c>)
 8001f72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f76:	2207      	movs	r2, #7
 8001f78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001f80:	4b45      	ldr	r3, [pc, #276]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f82:	2264      	movs	r2, #100	; 0x64
 8001f84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f98:	483f      	ldr	r0, [pc, #252]	; (8002098 <MX_TIM1_Init+0x168>)
 8001f9a:	f004 fb15 	bl	80065c8 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fa4:	f000 fdda 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4838      	ldr	r0, [pc, #224]	; (8002098 <MX_TIM1_Init+0x168>)
 8001fb6:	f004 feb7 	bl	8006d28 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fc0:	f000 fdcc 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fc4:	4834      	ldr	r0, [pc, #208]	; (8002098 <MX_TIM1_Init+0x168>)
 8001fc6:	f004 fbeb 	bl	80067a0 <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001fd0:	f000 fdc4 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	482d      	ldr	r0, [pc, #180]	; (8002098 <MX_TIM1_Init+0x168>)
 8001fe4:	f005 fa30 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001fee:	f000 fdb5 	bl	8002b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2360      	movs	r3, #96	; 0x60
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	4820      	ldr	r0, [pc, #128]	; (8002098 <MX_TIM1_Init+0x168>)
 8002018:	f004 fdc4 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002022:	f000 fd9b 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	2204      	movs	r2, #4
 800202c:	4619      	mov	r1, r3
 800202e:	481a      	ldr	r0, [pc, #104]	; (8002098 <MX_TIM1_Init+0x168>)
 8002030:	f004 fdb8 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800203a:	f000 fd8f 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	2208      	movs	r2, #8
 8002044:	4619      	mov	r1, r3
 8002046:	4814      	ldr	r0, [pc, #80]	; (8002098 <MX_TIM1_Init+0x168>)
 8002048:	f004 fdac 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002052:	f000 fd83 	bl	8002b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_TIM1_Init+0x168>)
 800207a:	f005 fa43 	bl	8007504 <HAL_TIMEx_ConfigBreakDeadTime>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002084:	f000 fd6a 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <MX_TIM1_Init+0x168>)
 800208a:	f000 ff31 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 800208e:	bf00      	nop
 8002090:	3758      	adds	r7, #88	; 0x58
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000194 	.word	0x20000194
 800209c:	40012c00 	.word	0x40012c00

080020a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM2_Init+0x94>)
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM2_Init+0x94>)
 80020c6:	2207      	movs	r2, #7
 80020c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM2_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM2_Init+0x94>)
 80020d2:	f240 128f 	movw	r2, #399	; 0x18f
 80020d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_TIM2_Init+0x94>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM2_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM2_Init+0x94>)
 80020e6:	f004 fa6f 	bl	80065c8 <HAL_TIM_Base_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020f0:	f000 fd34 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_TIM2_Init+0x94>)
 8002102:	f004 fe11 	bl	8006d28 <HAL_TIM_ConfigClockSource>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800210c:	f000 fd26 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_TIM2_Init+0x94>)
 800211e:	f005 f993 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002128:	f000 fd18 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200001dc 	.word	0x200001dc

08002138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM3_Init+0x94>)
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <MX_TIM3_Init+0x98>)
 8002158:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <MX_TIM3_Init+0x94>)
 800215c:	2207      	movs	r2, #7
 800215e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM3_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <MX_TIM3_Init+0x94>)
 8002168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800216c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_TIM3_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_TIM3_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <MX_TIM3_Init+0x94>)
 800217c:	f004 fa24 	bl	80065c8 <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002186:	f000 fce9 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4619      	mov	r1, r3
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <MX_TIM3_Init+0x94>)
 8002198:	f004 fdc6 	bl	8006d28 <HAL_TIM_ConfigClockSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021a2:	f000 fcdb 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <MX_TIM3_Init+0x94>)
 80021b4:	f005 f948 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021be:	f000 fccd 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000224 	.word	0x20000224
 80021d0:	40000400 	.word	0x40000400

080021d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM4_Init+0x94>)
 80021f2:	4a1e      	ldr	r2, [pc, #120]	; (800226c <MX_TIM4_Init+0x98>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <MX_TIM4_Init+0x94>)
 80021f8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <MX_TIM4_Init+0x94>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <MX_TIM4_Init+0x94>)
 8002206:	2263      	movs	r2, #99	; 0x63
 8002208:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MX_TIM4_Init+0x94>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_TIM4_Init+0x94>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002216:	4814      	ldr	r0, [pc, #80]	; (8002268 <MX_TIM4_Init+0x94>)
 8002218:	f004 f9d6 	bl	80065c8 <HAL_TIM_Base_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002222:	f000 fc9b 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4619      	mov	r1, r3
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_TIM4_Init+0x94>)
 8002234:	f004 fd78 	bl	8006d28 <HAL_TIM_ConfigClockSource>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800223e:	f000 fc8d 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800224a:	463b      	mov	r3, r7
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_TIM4_Init+0x94>)
 8002250:	f005 f8fa 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800225a:	f000 fc7f 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000026c 	.word	0x2000026c
 800226c:	40000800 	.word	0x40000800

08002270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002284:	4b38      	ldr	r3, [pc, #224]	; (8002368 <MX_GPIO_Init+0xf8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a37      	ldr	r2, [pc, #220]	; (8002368 <MX_GPIO_Init+0xf8>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <MX_GPIO_Init+0xf8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <MX_GPIO_Init+0xf8>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <MX_GPIO_Init+0xf8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <MX_GPIO_Init+0xf8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <MX_GPIO_Init+0xf8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <MX_GPIO_Init+0xf8>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <MX_GPIO_Init+0xf8>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d2:	4826      	ldr	r0, [pc, #152]	; (800236c <MX_GPIO_Init+0xfc>)
 80022d4:	f002 fb99 	bl	8004a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	2106      	movs	r1, #6
 80022dc:	4824      	ldr	r0, [pc, #144]	; (8002370 <MX_GPIO_Init+0x100>)
 80022de:	f002 fb94 	bl	8004a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_LOW_Pin|B_LOW_Pin|C_LOW_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80022e8:	4822      	ldr	r0, [pc, #136]	; (8002374 <MX_GPIO_Init+0x104>)
 80022ea:	f002 fb8e 	bl	8004a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 80022ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	4819      	ldr	r0, [pc, #100]	; (800236c <MX_GPIO_Init+0xfc>)
 8002308:	f002 f9e4 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800230c:	2306      	movs	r3, #6
 800230e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2302      	movs	r3, #2
 800231a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <MX_GPIO_Init+0x100>)
 8002324:	f002 f9d6 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8002328:	f240 4303 	movw	r3, #1027	; 0x403
 800232c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4619      	mov	r1, r3
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_GPIO_Init+0x104>)
 800233e:	f002 f9c9 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_LOW_Pin B_LOW_Pin C_LOW_Pin */
  GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin|C_LOW_Pin;
 8002342:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_GPIO_Init+0x104>)
 800235c:	f002 f9ba 	bl	80046d4 <HAL_GPIO_Init>

}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	40011000 	.word	0x40011000
 8002370:	40010800 	.word	0x40010800
 8002374:	40010c00 	.word	0x40010c00

08002378 <get_adc>:

/* USER CODE BEGIN 4 */
//FUNCIONES

void get_adc(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	// Obtenemos la data del ADC
	HAL_ADC_Start(&hadc1);
 800237c:	4819      	ldr	r0, [pc, #100]	; (80023e4 <get_adc+0x6c>)
 800237e:	f000 ffd1 	bl	8003324 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002382:	f04f 31ff 	mov.w	r1, #4294967295
 8002386:	4817      	ldr	r0, [pc, #92]	; (80023e4 <get_adc+0x6c>)
 8002388:	f001 f87a 	bl	8003480 <HAL_ADC_PollForConversion>

	raw_adc = HAL_ADC_GetValue(&hadc1);
 800238c:	4815      	ldr	r0, [pc, #84]	; (80023e4 <get_adc+0x6c>)
 800238e:	f001 f97d 	bl	800368c <HAL_ADC_GetValue>
 8002392:	4603      	mov	r3, r0
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <get_adc+0x70>)
 8002398:	801a      	strh	r2, [r3, #0]
//	// Para que el sistema se suelte cuando el deseado sea menos del 10%
//	if (duty_cycle<10){
//		duty_cycle = 0;
//	}

	rate_adc = STEP_ADC_RPM*48*12/VOLTAJE;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <get_adc+0x74>)
 800239c:	2278      	movs	r2, #120	; 0x78
 800239e:	801a      	strh	r2, [r3, #0]
	raw_adc = rate_adc*(raw_adc/rate_adc);
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <get_adc+0x70>)
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <get_adc+0x74>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <get_adc+0x74>)
 80023b0:	8812      	ldrh	r2, [r2, #0]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <get_adc+0x70>)
 80023ba:	801a      	strh	r2, [r3, #0]
	desired_speed_rpm = raw_adc*STEP_ADC_RPM/rate_adc;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <get_adc+0x70>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <get_adc+0x74>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fc55 	bl	8000c84 <__aeabi_ui2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <get_adc+0x78>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200000e8 	.word	0x200000e8
 80023e8:	200002b4 	.word	0x200002b4
 80023ec:	200002b6 	.word	0x200002b6
 80023f0:	200002c0 	.word	0x200002c0

080023f4 <read_hall>:

void read_hall(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	hall_a = HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin);
 80023f8:	2101      	movs	r1, #1
 80023fa:	481d      	ldr	r0, [pc, #116]	; (8002470 <read_hall+0x7c>)
 80023fc:	f002 faee 	bl	80049dc <HAL_GPIO_ReadPin>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <read_hall+0x80>)
 8002406:	701a      	strb	r2, [r3, #0]
	hall_b = HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin);
 8002408:	2102      	movs	r1, #2
 800240a:	4819      	ldr	r0, [pc, #100]	; (8002470 <read_hall+0x7c>)
 800240c:	f002 fae6 	bl	80049dc <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <read_hall+0x84>)
 8002416:	701a      	strb	r2, [r3, #0]
	hall_c = HAL_GPIO_ReadPin(HALL_C_GPIO_Port,HALL_C_Pin);
 8002418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241c:	4814      	ldr	r0, [pc, #80]	; (8002470 <read_hall+0x7c>)
 800241e:	f002 fadd 	bl	80049dc <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <read_hall+0x88>)
 8002428:	701a      	strb	r2, [r3, #0]
//	}
	// end testing


	// Descomentar luego del testeo
	bldc_step = hall_a + 2*hall_b + 4*hall_c;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <read_hall+0x88>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <read_hall+0x84>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <read_hall+0x80>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <read_hall+0x8c>)
 8002448:	701a      	strb	r2, [r3, #0]

	// Para calcular velocidad
	if (bldc_step != bldc_prev_step){
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <read_hall+0x8c>)
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <read_hall+0x90>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d005      	beq.n	8002462 <read_hall+0x6e>
		steps += 1;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <read_hall+0x94>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <read_hall+0x94>)
 8002460:	801a      	strh	r2, [r3, #0]
	}

	bldc_prev_step	= bldc_step;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <read_hall+0x8c>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <read_hall+0x90>)
 8002468:	701a      	strb	r2, [r3, #0]


}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40010c00 	.word	0x40010c00
 8002474:	200002b8 	.word	0x200002b8
 8002478:	200002b9 	.word	0x200002b9
 800247c:	200002ba 	.word	0x200002ba
 8002480:	200002bd 	.word	0x200002bd
 8002484:	200002bc 	.word	0x200002bc
 8002488:	200002be 	.word	0x200002be

0800248c <bldc_move>:

void bldc_move(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

	switch(bldc_step){
 8002490:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <bldc_move+0x224>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	2b05      	cmp	r3, #5
 8002498:	f200 80e8 	bhi.w	800266c <bldc_move+0x1e0>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <bldc_move+0x18>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024bd 	.word	0x080024bd
 80024a8:	08002505 	.word	0x08002505
 80024ac:	0800254d 	.word	0x0800254d
 80024b0:	08002595 	.word	0x08002595
 80024b4:	080025dd 	.word	0x080025dd
 80024b8:	08002625 	.word	0x08002625
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80024bc:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <bldc_move+0x228>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80024c4:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <bldc_move+0x228>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d2:	4879      	ldr	r0, [pc, #484]	; (80026b8 <bldc_move+0x22c>)
 80024d4:	f002 fa99 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024de:	4876      	ldr	r0, [pc, #472]	; (80026b8 <bldc_move+0x22c>)
 80024e0:	f002 fa93 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80024e4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80024e8:	f000 fa04 	bl	80028f4 <delay_us>


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 80024ec:	4b73      	ldr	r3, [pc, #460]	; (80026bc <bldc_move+0x230>)
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <bldc_move+0x228>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 80024f6:	2201      	movs	r2, #1
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	486e      	ldr	r0, [pc, #440]	; (80026b8 <bldc_move+0x22c>)
 80024fe:	f002 fa84 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 8002502:	e0d2      	b.n	80026aa <bldc_move+0x21e>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <bldc_move+0x228>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <bldc_move+0x228>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800251a:	4867      	ldr	r0, [pc, #412]	; (80026b8 <bldc_move+0x22c>)
 800251c:	f002 fa75 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002526:	4864      	ldr	r0, [pc, #400]	; (80026b8 <bldc_move+0x22c>)
 8002528:	f002 fa6f 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 800252c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002530:	f000 f9e0 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <bldc_move+0x230>)
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <bldc_move+0x228>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002544:	485c      	ldr	r0, [pc, #368]	; (80026b8 <bldc_move+0x22c>)
 8002546:	f002 fa60 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 800254a:	e0ae      	b.n	80026aa <bldc_move+0x21e>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <bldc_move+0x228>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8002554:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <bldc_move+0x228>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002562:	4855      	ldr	r0, [pc, #340]	; (80026b8 <bldc_move+0x22c>)
 8002564:	f002 fa51 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800256e:	4852      	ldr	r0, [pc, #328]	; (80026b8 <bldc_move+0x22c>)
 8002570:	f002 fa4b 	bl	8004a0a <HAL_GPIO_WritePin>


		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002574:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002578:	f000 f9bc 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <bldc_move+0x230>)
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <bldc_move+0x228>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	484a      	ldr	r0, [pc, #296]	; (80026b8 <bldc_move+0x22c>)
 800258e:	f002 fa3c 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 8002592:	e08a      	b.n	80026aa <bldc_move+0x21e>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <bldc_move+0x228>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 800259c:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <bldc_move+0x228>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025aa:	4843      	ldr	r0, [pc, #268]	; (80026b8 <bldc_move+0x22c>)
 80025ac:	f002 fa2d 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b6:	4840      	ldr	r0, [pc, #256]	; (80026b8 <bldc_move+0x22c>)
 80025b8:	f002 fa27 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80025bc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80025c0:	f000 f998 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 80025c4:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <bldc_move+0x230>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <bldc_move+0x228>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d4:	4838      	ldr	r0, [pc, #224]	; (80026b8 <bldc_move+0x22c>)
 80025d6:	f002 fa18 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 80025da:	e066      	b.n	80026aa <bldc_move+0x21e>

	case 5:

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <bldc_move+0x228>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <bldc_move+0x228>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025f2:	4831      	ldr	r0, [pc, #196]	; (80026b8 <bldc_move+0x22c>)
 80025f4:	f002 fa09 	bl	8004a0a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fe:	482e      	ldr	r0, [pc, #184]	; (80026b8 <bldc_move+0x22c>)
 8002600:	f002 fa03 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002604:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002608:	f000 f974 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <bldc_move+0x230>)
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <bldc_move+0x228>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261c:	4826      	ldr	r0, [pc, #152]	; (80026b8 <bldc_move+0x22c>)
 800261e:	f002 f9f4 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 8002622:	e042      	b.n	80026aa <bldc_move+0x21e>

	case 6:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <bldc_move+0x228>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <bldc_move+0x228>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	639a      	str	r2, [r3, #56]	; 0x38



		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <bldc_move+0x22c>)
 800263c:	f002 f9e5 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002646:	481c      	ldr	r0, [pc, #112]	; (80026b8 <bldc_move+0x22c>)
 8002648:	f002 f9df 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 800264c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002650:	f000 f950 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <bldc_move+0x230>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <bldc_move+0x228>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <bldc_move+0x22c>)
 8002666:	f002 f9d0 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 800266a:	e01e      	b.n	80026aa <bldc_move+0x21e>

	default:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <bldc_move+0x228>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <bldc_move+0x228>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <bldc_move+0x228>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268a:	480b      	ldr	r0, [pc, #44]	; (80026b8 <bldc_move+0x22c>)
 800268c:	f002 f9bd 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002696:	4808      	ldr	r0, [pc, #32]	; (80026b8 <bldc_move+0x22c>)
 8002698:	f002 f9b7 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <bldc_move+0x22c>)
 80026a4:	f002 f9b1 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 80026a8:	bf00      	nop
	}
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200002bd 	.word	0x200002bd
 80026b4:	20000194 	.word	0x20000194
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	200002cc 	.word	0x200002cc

080026c0 <bldc_move_back>:

void bldc_move_back(void){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

	switch(bldc_step){
 80026c4:	4b87      	ldr	r3, [pc, #540]	; (80028e4 <bldc_move_back+0x224>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	f200 80e8 	bhi.w	80028a0 <bldc_move_back+0x1e0>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <bldc_move_back+0x18>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	08002859 	.word	0x08002859
 80026dc:	08002811 	.word	0x08002811
 80026e0:	080027c9 	.word	0x080027c9
 80026e4:	08002781 	.word	0x08002781
 80026e8:	08002739 	.word	0x08002739
 80026ec:	080026f1 	.word	0x080026f1
	case 6:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80026f0:	4b7d      	ldr	r3, [pc, #500]	; (80028e8 <bldc_move_back+0x228>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <bldc_move_back+0x228>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002706:	4879      	ldr	r0, [pc, #484]	; (80028ec <bldc_move_back+0x22c>)
 8002708:	f002 f97f 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002712:	4876      	ldr	r0, [pc, #472]	; (80028ec <bldc_move_back+0x22c>)
 8002714:	f002 f979 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002718:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800271c:	f000 f8ea 	bl	80028f4 <delay_us>


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 8002720:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <bldc_move_back+0x230>)
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <bldc_move_back+0x228>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002730:	486e      	ldr	r0, [pc, #440]	; (80028ec <bldc_move_back+0x22c>)
 8002732:	f002 f96a 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 8002736:	e0d2      	b.n	80028de <bldc_move_back+0x21e>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <bldc_move_back+0x228>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <bldc_move_back+0x228>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800274e:	4867      	ldr	r0, [pc, #412]	; (80028ec <bldc_move_back+0x22c>)
 8002750:	f002 f95b 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800275a:	4864      	ldr	r0, [pc, #400]	; (80028ec <bldc_move_back+0x22c>)
 800275c:	f002 f955 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002760:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002764:	f000 f8c6 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 8002768:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <bldc_move_back+0x230>)
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <bldc_move_back+0x228>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002778:	485c      	ldr	r0, [pc, #368]	; (80028ec <bldc_move_back+0x22c>)
 800277a:	f002 f946 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 800277e:	e0ae      	b.n	80028de <bldc_move_back+0x21e>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <bldc_move_back+0x228>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <bldc_move_back+0x228>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002796:	4855      	ldr	r0, [pc, #340]	; (80028ec <bldc_move_back+0x22c>)
 8002798:	f002 f937 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 800279c:	2200      	movs	r2, #0
 800279e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027a2:	4852      	ldr	r0, [pc, #328]	; (80028ec <bldc_move_back+0x22c>)
 80027a4:	f002 f931 	bl	8004a0a <HAL_GPIO_WritePin>


		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80027a8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80027ac:	f000 f8a2 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);	//B_HIGH
 80027b0:	4b4f      	ldr	r3, [pc, #316]	; (80028f0 <bldc_move_back+0x230>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <bldc_move_back+0x228>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c0:	484a      	ldr	r0, [pc, #296]	; (80028ec <bldc_move_back+0x22c>)
 80027c2:	f002 f922 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 80027c6:	e08a      	b.n	80028de <bldc_move_back+0x21e>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80027c8:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <bldc_move_back+0x228>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <bldc_move_back+0x228>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027de:	4843      	ldr	r0, [pc, #268]	; (80028ec <bldc_move_back+0x22c>)
 80027e0:	f002 f913 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ea:	4840      	ldr	r0, [pc, #256]	; (80028ec <bldc_move_back+0x22c>)
 80027ec:	f002 f90d 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 80027f0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80027f4:	f000 f87e 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <bldc_move_back+0x230>)
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <bldc_move_back+0x228>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002808:	4838      	ldr	r0, [pc, #224]	; (80028ec <bldc_move_back+0x22c>)
 800280a:	f002 f8fe 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 800280e:	e066      	b.n	80028de <bldc_move_back+0x21e>

	case 2:

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <bldc_move_back+0x228>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <bldc_move_back+0x228>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002826:	4831      	ldr	r0, [pc, #196]	; (80028ec <bldc_move_back+0x22c>)
 8002828:	f002 f8ef 	bl	8004a0a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002832:	482e      	ldr	r0, [pc, #184]	; (80028ec <bldc_move_back+0x22c>)
 8002834:	f002 f8e9 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002838:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800283c:	f000 f85a 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);	//A_HIGH
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <bldc_move_back+0x230>)
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <bldc_move_back+0x228>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002850:	4826      	ldr	r0, [pc, #152]	; (80028ec <bldc_move_back+0x22c>)
 8002852:	f002 f8da 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 8002856:	e042      	b.n	80028de <bldc_move_back+0x21e>

	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <bldc_move_back+0x228>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <bldc_move_back+0x228>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	639a      	str	r2, [r3, #56]	; 0x38



		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286e:	481f      	ldr	r0, [pc, #124]	; (80028ec <bldc_move_back+0x22c>)
 8002870:	f002 f8cb 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800287a:	481c      	ldr	r0, [pc, #112]	; (80028ec <bldc_move_back+0x22c>)
 800287c:	f002 f8c5 	bl	8004a0a <HAL_GPIO_WritePin>

		// Delay
		delay_us(COMMUTATION_DELAY_US);
 8002880:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002884:	f000 f836 	bl	80028f4 <delay_us>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);	//C_HIGH
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <bldc_move_back+0x230>)
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <bldc_move_back+0x228>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <bldc_move_back+0x22c>)
 800289a:	f002 f8b6 	bl	8004a0a <HAL_GPIO_WritePin>

		break;
 800289e:	e01e      	b.n	80028de <bldc_move_back+0x21e>

	default:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	//A_HIGH
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <bldc_move_back+0x228>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//B_HIGH
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <bldc_move_back+0x228>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//C_HIGH
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <bldc_move_back+0x228>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <bldc_move_back+0x22c>)
 80028c0:	f002 f8a3 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <bldc_move_back+0x22c>)
 80028cc:	f002 f89d 	bl	8004a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <bldc_move_back+0x22c>)
 80028d8:	f002 f897 	bl	8004a0a <HAL_GPIO_WritePin>
		break;
 80028dc:	bf00      	nop
	}
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002bd 	.word	0x200002bd
 80028e8:	20000194 	.word	0x20000194
 80028ec:	40010c00 	.word	0x40010c00
 80028f0:	200002cc 	.word	0x200002cc

080028f4 <delay_us>:

void delay_us(uint16_t us){
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <delay_us+0x2c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8002906:	bf00      	nop
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <delay_us+0x2c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3f9      	bcc.n	8002908 <delay_us+0x14>
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000224 	.word	0x20000224

08002924 <send_can_pos>:

void send_can_pos(float actX, float actY){
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]

	uint8_t x0_int = (int) actX;
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fbc6 	bl	80010c0 <__aeabi_f2iz>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]
    uint8_t x0_float = (int)(100*(actX - x0_int));
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f9a6 	bl	8000c8c <__aeabi_i2f>
 8002940:	4603      	mov	r3, r0
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe f8eb 	bl	8000b20 <__aeabi_fsub>
 800294a:	4603      	mov	r3, r0
 800294c:	4922      	ldr	r1, [pc, #136]	; (80029d8 <send_can_pos+0xb4>)
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f9f0 	bl	8000d34 <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fbb2 	bl	80010c0 <__aeabi_f2iz>
 800295c:	4603      	mov	r3, r0
 800295e:	73bb      	strb	r3, [r7, #14]
    uint8_t y0_int = (int) actY;
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f7fe fbad 	bl	80010c0 <__aeabi_f2iz>
 8002966:	4603      	mov	r3, r0
 8002968:	737b      	strb	r3, [r7, #13]
    uint8_t y0_float = (int)(100*(actY - y0_int));
 800296a:	7b7b      	ldrb	r3, [r7, #13]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f98d 	bl	8000c8c <__aeabi_i2f>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	f7fe f8d2 	bl	8000b20 <__aeabi_fsub>
 800297c:	4603      	mov	r3, r0
 800297e:	4916      	ldr	r1, [pc, #88]	; (80029d8 <send_can_pos+0xb4>)
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f9d7 	bl	8000d34 <__aeabi_fmul>
 8002986:	4603      	mov	r3, r0
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fb99 	bl	80010c0 <__aeabi_f2iz>
 800298e:	4603      	mov	r3, r0
 8002990:	733b      	strb	r3, [r7, #12]

	TxData[0] = x0_int;
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <send_can_pos+0xb8>)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	7013      	strb	r3, [r2, #0]
	TxData[1] = x0_float;
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <send_can_pos+0xb8>)
 800299a:	7bbb      	ldrb	r3, [r7, #14]
 800299c:	7053      	strb	r3, [r2, #1]
	TxData[2] = y0_int;
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <send_can_pos+0xb8>)
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	7093      	strb	r3, [r2, #2]
	TxData[3] = y0_float;
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <send_can_pos+0xb8>)
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	70d3      	strb	r3, [r2, #3]
	TxData[4] = 100;
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <send_can_pos+0xb8>)
 80029ac:	2264      	movs	r2, #100	; 0x64
 80029ae:	711a      	strb	r2, [r3, #4]
	TxData[5] = 100;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <send_can_pos+0xb8>)
 80029b2:	2264      	movs	r2, #100	; 0x64
 80029b4:	715a      	strb	r2, [r3, #5]
	TxData[6] = 100;
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <send_can_pos+0xb8>)
 80029b8:	2264      	movs	r2, #100	; 0x64
 80029ba:	719a      	strb	r2, [r3, #6]
	TxData[7] = 100;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <send_can_pos+0xb8>)
 80029be:	2264      	movs	r2, #100	; 0x64
 80029c0:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <send_can_pos+0xbc>)
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <send_can_pos+0xb8>)
 80029c6:	4907      	ldr	r1, [pc, #28]	; (80029e4 <send_can_pos+0xc0>)
 80029c8:	4807      	ldr	r0, [pc, #28]	; (80029e8 <send_can_pos+0xc4>)
 80029ca:	f001 f93d 	bl	8003c48 <HAL_CAN_AddTxMessage>

}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	42c80000 	.word	0x42c80000
 80029dc:	20000354 	.word	0x20000354
 80029e0:	20000350 	.word	0x20000350
 80029e4:	2000031c 	.word	0x2000031c
 80029e8:	20000118 	.word	0x20000118

080029ec <send_can_vel>:

void send_can_vel(void){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

	if (SPEED_UNITS == 0){
		// Current speed (RPM)
		if (current_speed_rpm > 255){
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <send_can_vel+0xc4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	492f      	ldr	r1, [pc, #188]	; (8002ab4 <send_can_vel+0xc8>)
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fb58 	bl	80010ac <__aeabi_fcmpgt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <send_can_vel+0x3a>
				TxData[0] = 255;
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <send_can_vel+0xcc>)
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	701a      	strb	r2, [r3, #0]
				TxData[1] = current_speed_rpm - 255;
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <send_can_vel+0xc4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4929      	ldr	r1, [pc, #164]	; (8002ab4 <send_can_vel+0xc8>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f886 	bl	8000b20 <__aeabi_fsub>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fb78 	bl	800110c <__aeabi_f2uiz>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <send_can_vel+0xcc>)
 8002a22:	705a      	strb	r2, [r3, #1]
 8002a24:	e00b      	b.n	8002a3e <send_can_vel+0x52>
		}
		else{
			TxData[0] = current_speed_rpm;
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <send_can_vel+0xc4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fb6e 	bl	800110c <__aeabi_f2uiz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <send_can_vel+0xcc>)
 8002a36:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <send_can_vel+0xcc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	705a      	strb	r2, [r3, #1]
		}
		// Desired speed (RPM)
		if (desired_speed_rpm > 255){
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <send_can_vel+0xd0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	491c      	ldr	r1, [pc, #112]	; (8002ab4 <send_can_vel+0xc8>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fb31 	bl	80010ac <__aeabi_fcmpgt>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <send_can_vel+0x88>
				TxData[3] = 255;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <send_can_vel+0xcc>)
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	70da      	strb	r2, [r3, #3]
				TxData[4] = desired_speed_rpm - 255;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <send_can_vel+0xd0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <send_can_vel+0xc8>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f85f 	bl	8000b20 <__aeabi_fsub>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fb51 	bl	800110c <__aeabi_f2uiz>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <send_can_vel+0xcc>)
 8002a70:	711a      	strb	r2, [r3, #4]
 8002a72:	e00b      	b.n	8002a8c <send_can_vel+0xa0>
		}
		else{
			TxData[3] = desired_speed_rpm;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <send_can_vel+0xd0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fb47 	bl	800110c <__aeabi_f2uiz>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <send_can_vel+0xcc>)
 8002a84:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <send_can_vel+0xcc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	711a      	strb	r2, [r3, #4]
		TxData[1] = 0;

	}

	// Alojamos el duty cycle
	TxData[2] = duty_cycle;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <send_can_vel+0xd4>)
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <send_can_vel+0xcc>)
 8002a92:	709a      	strb	r2, [r3, #2]

	TxData[6] = 255;
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <send_can_vel+0xcc>)
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	719a      	strb	r2, [r3, #6]
	TxData[7] = 255;	// Actualizamos con los flag
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <send_can_vel+0xcc>)
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <send_can_vel+0xd8>)
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <send_can_vel+0xcc>)
 8002aa4:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <send_can_vel+0xdc>)
 8002aa6:	4809      	ldr	r0, [pc, #36]	; (8002acc <send_can_vel+0xe0>)
 8002aa8:	f001 f8ce 	bl	8003c48 <HAL_CAN_AddTxMessage>

}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200002c4 	.word	0x200002c4
 8002ab4:	437f0000 	.word	0x437f0000
 8002ab8:	20000354 	.word	0x20000354
 8002abc:	200002c0 	.word	0x200002c0
 8002ac0:	200002cc 	.word	0x200002cc
 8002ac4:	20000350 	.word	0x20000350
 8002ac8:	2000031c 	.word	0x2000031c
 8002acc:	20000118 	.word	0x20000118

08002ad0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2){
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d102      	bne.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x16>

		timer2_flag = 1;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]

	}
	if (htim == &htim4){
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d112      	bne.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x44>

		timer4_flag = 1;
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]

		if (timer4_counts == 10/ESTIMATION_RATE){
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d105      	bne.n	8002b08 <HAL_TIM_PeriodElapsedCallback+0x38>
			estimation_flag = 1;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]

			timer4_counts = 0;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
		}
		timer4_counts += 1;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b12:	701a      	strb	r2, [r3, #0]
	}
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200001dc 	.word	0x200001dc
 8002b24:	20000314 	.word	0x20000314
 8002b28:	2000026c 	.word	0x2000026c
 8002b2c:	20000315 	.word	0x20000315
 8002b30:	20000316 	.word	0x20000316
 8002b34:	20000317 	.word	0x20000317

08002b38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f001 f94d 	bl	8003de6 <HAL_CAN_GetRxMessage>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000035c 	.word	0x2000035c
 8002b58:	20000334 	.word	0x20000334

08002b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
}
 8002b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <Error_Handler+0x8>

08002b66 <microDelay>:
#include "stepper.h"



void microDelay(TIM_HandleTypeDef* tim_device, uint16_t delay)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(tim_device, 0);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(tim_device) < delay);
 8002b7a:	bf00      	nop
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d3f9      	bcc.n	8002b7c <microDelay+0x16>
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <step>:


void step (TIM_HandleTypeDef* tim_device, int steps, uint8_t direction, uint16_t delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	71fb      	strb	r3, [r7, #7]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80bb      	strh	r3, [r7, #4]
  int x;
  if (direction == 0) // clockwise
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <step+0x28>
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4815      	ldr	r0, [pc, #84]	; (8002c0c <step+0x78>)
 8002bb6:	f001 ff28 	bl	8004a0a <HAL_GPIO_WritePin>
 8002bba:	e004      	b.n	8002bc6 <step+0x32>
  else // counter-clockwise
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4812      	ldr	r0, [pc, #72]	; (8002c0c <step+0x78>)
 8002bc2:	f001 ff22 	bl	8004a0a <HAL_GPIO_WritePin>

  for(x=0; x<steps; x=x+1)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e016      	b.n	8002bfa <step+0x66>
  {
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2104      	movs	r1, #4
 8002bd0:	480e      	ldr	r0, [pc, #56]	; (8002c0c <step+0x78>)
 8002bd2:	f001 ff1a 	bl	8004a0a <HAL_GPIO_WritePin>
    microDelay(tim_device, delay);
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ffc3 	bl	8002b66 <microDelay>
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2104      	movs	r1, #4
 8002be4:	4809      	ldr	r0, [pc, #36]	; (8002c0c <step+0x78>)
 8002be6:	f001 ff10 	bl	8004a0a <HAL_GPIO_WritePin>
    microDelay(tim_device, delay);
 8002bea:	88bb      	ldrh	r3, [r7, #4]
 8002bec:	4619      	mov	r1, r3
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff ffb9 	bl	8002b66 <microDelay>
  for(x=0; x<steps; x=x+1)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	dbe4      	blt.n	8002bcc <step+0x38>
  }

}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40010800 	.word	0x40010800

08002c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6193      	str	r3, [r2, #24]
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_MspInit+0x5c>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_MspInit+0x60>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_MspInit+0x60>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40010000 	.word	0x40010000

08002c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_ADC_MspInit+0x6c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d121      	bne.n	8002cd8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_ADC_MspInit+0x70>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SPEED_REF_Pin;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPEED_REF_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <HAL_ADC_MspInit+0x74>)
 8002cd4:	f001 fcfe 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40012400 	.word	0x40012400
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010800 	.word	0x40010800

08002cec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <HAL_CAN_MspInit+0xac>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d141      	bne.n	8002d90 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d16:	61d3      	str	r3, [r2, #28]
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_CAN_MspInit+0xb0>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <HAL_CAN_MspInit+0xb4>)
 8002d52:	f001 fcbf 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480d      	ldr	r0, [pc, #52]	; (8002da0 <HAL_CAN_MspInit+0xb4>)
 8002d6c:	f001 fcb2 	bl	80046d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2014      	movs	r0, #20
 8002d76:	f001 fc76 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d7a:	2014      	movs	r0, #20
 8002d7c:	f001 fc8f 	bl	800469e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	2015      	movs	r0, #21
 8002d86:	f001 fc6e 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002d8a:	2015      	movs	r0, #21
 8002d8c:	f001 fc87 	bl	800469e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002d90:	bf00      	nop
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40006400 	.word	0x40006400
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010800 	.word	0x40010800

08002da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_I2C_MspInit+0x70>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d123      	bne.n	8002e0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002dca:	f043 0308 	orr.w	r3, r3, #8
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ddc:	23c0      	movs	r3, #192	; 0xc0
 8002dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de0:	2312      	movs	r3, #18
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4619      	mov	r1, r3
 8002dee:	480b      	ldr	r0, [pc, #44]	; (8002e1c <HAL_I2C_MspInit+0x78>)
 8002df0:	f001 fc70 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfe:	61d3      	str	r3, [r2, #28]
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_I2C_MspInit+0x74>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e0c:	bf00      	nop
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40005400 	.word	0x40005400
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010c00 	.word	0x40010c00

08002e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <HAL_TIM_Base_MspInit+0xc0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10c      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e32:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e3c:	6193      	str	r3, [r2, #24]
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e4a:	e044      	b.n	8002ed6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d114      	bne.n	8002e80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	201c      	movs	r0, #28
 8002e74:	f001 fbf7 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e78:	201c      	movs	r0, #28
 8002e7a:	f001 fc10 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 8002e7e:	e02a      	b.n	8002ed6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_TIM_Base_MspInit+0xc8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	61d3      	str	r3, [r2, #28]
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	e018      	b.n	8002ed6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a10      	ldr	r2, [pc, #64]	; (8002eec <HAL_TIM_Base_MspInit+0xcc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d113      	bne.n	8002ed6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_TIM_Base_MspInit+0xc4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	201e      	movs	r0, #30
 8002ecc:	f001 fbcb 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ed0:	201e      	movs	r0, #30
 8002ed2:	f001 fbe4 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800

08002ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_TIM_MspPostInit+0x74>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_TIM_MspPostInit+0x78>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_MspPostInit+0x78>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_TIM_MspPostInit+0x78>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin;
 8002f28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 0310 	add.w	r3, r7, #16
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <HAL_TIM_MspPostInit+0x7c>)
 8002f3e:	f001 fbc9 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C_HIGH_Pin;
 8002f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(C_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_TIM_MspPostInit+0x7c>)
 8002f58:	f001 fbbc 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40010800 	.word	0x40010800

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <NMI_Handler+0x4>

08002f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler+0x4>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <MemManage_Handler+0x4>

08002f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <BusFault_Handler+0x4>

08002f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <UsageFault_Handler+0x4>

08002f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb6:	f000 f89d 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002fc6:	f001 f854 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000118 	.word	0x20000118

08002fd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <CAN1_RX1_IRQHandler+0x10>)
 8002fda:	f001 f84a 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000118 	.word	0x20000118

08002fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <TIM2_IRQHandler+0x10>)
 8002fee:	f003 fcd1 	bl	8006994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200001dc 	.word	0x200001dc

08002ffc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <TIM4_IRQHandler+0x10>)
 8003002:	f003 fcc7 	bl	8006994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000026c 	.word	0x2000026c

08003010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800301c:	f7ff fff8 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003022:	490c      	ldr	r1, [pc, #48]	; (8003054 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003024:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003038:	4c09      	ldr	r4, [pc, #36]	; (8003060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003046:	f004 fac7 	bl	80075d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800304a:	f7fe fc3b 	bl	80018c4 <main>
  bx lr
 800304e:	4770      	bx	lr
  ldr r0, =_sdata
 8003050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003054:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003058:	08008e00 	.word	0x08008e00
  ldr r2, =_sbss
 800305c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003060:	20000368 	.word	0x20000368

08003064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC1_2_IRQHandler>
	...

08003068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_Init+0x28>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_Init+0x28>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f001 fae9 	bl	8004650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307e:	200f      	movs	r0, #15
 8003080:	f000 f808 	bl	8003094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003084:	f7ff fdc4 	bl	8002c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000

08003094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_InitTick+0x54>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_InitTick+0x58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fb01 	bl	80046ba <HAL_SYSTICK_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00e      	b.n	80030e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d80a      	bhi.n	80030de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c8:	2200      	movs	r2, #0
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	f001 fac9 	bl	8004666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d4:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_InitTick+0x5c>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000044 	.word	0x20000044
 80030ec:	2000004c 	.word	0x2000004c
 80030f0:	20000048 	.word	0x20000048

080030f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_IncTick+0x1c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_IncTick+0x20>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <HAL_IncTick+0x20>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	2000004c 	.word	0x2000004c
 8003114:	20000364 	.word	0x20000364

08003118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_GetTick+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000364 	.word	0x20000364

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff fff0 	bl	8003118 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003152:	bf00      	nop
 8003154:	f7ff ffe0 	bl	8003118 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000004c 	.word	0x2000004c

08003174 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0be      	b.n	8003314 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fd5e 	bl	8002c74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fbc5 	bl	8003948 <ADC_ConversionStop_Disable>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8099 	bne.w	8003302 <HAL_ADC_Init+0x18e>
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8095 	bne.w	8003302 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031e0:	f023 0302 	bic.w	r3, r3, #2
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7b1b      	ldrb	r3, [r3, #12]
 80031fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d003      	beq.n	8003216 <HAL_ADC_Init+0xa2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_ADC_Init+0xa8>
 8003216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321a:	e000      	b.n	800321e <HAL_ADC_Init+0xaa>
 800321c:	2300      	movs	r3, #0
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7d1b      	ldrb	r3, [r3, #20]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d119      	bne.n	8003260 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7b1b      	ldrb	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	3b01      	subs	r3, #1
 800323a:	035a      	lsls	r2, r3, #13
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e00b      	b.n	8003260 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_ADC_Init+0x1a8>)
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003290:	d003      	beq.n	800329a <HAL_ADC_Init+0x126>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d104      	bne.n	80032a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	3b01      	subs	r3, #1
 80032a0:	051b      	lsls	r3, r3, #20
 80032a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_ADC_Init+0x1ac>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10b      	bne.n	80032e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032de:	e018      	b.n	8003312 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f023 0312 	bic.w	r3, r3, #18
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003300:	e007      	b.n	8003312 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	ffe1f7fd 	.word	0xffe1f7fd
 8003320:	ff1f0efe 	.word	0xff1f0efe

08003324 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_Start+0x1a>
 800333a:	2302      	movs	r3, #2
 800333c:	e098      	b.n	8003470 <HAL_ADC_Start+0x14c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 faa4 	bl	8003894 <ADC_Enable>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 8087 	bne.w	8003466 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a41      	ldr	r2, [pc, #260]	; (8003478 <HAL_ADC_Start+0x154>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d105      	bne.n	8003382 <HAL_ADC_Start+0x5e>
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_ADC_Start+0x158>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d026      	beq.n	80033ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033ac:	e01d      	b.n	80033ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2f      	ldr	r2, [pc, #188]	; (800347c <HAL_ADC_Start+0x158>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_ADC_Start+0xaa>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <HAL_ADC_Start+0x154>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10d      	bne.n	80033ea <HAL_ADC_Start+0xc6>
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_ADC_Start+0x158>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f023 0206 	bic.w	r2, r3, #6
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
 8003402:	e002      	b.n	800340a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0202 	mvn.w	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003426:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800342a:	d113      	bne.n	8003454 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003430:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_ADC_Start+0x154>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d105      	bne.n	8003442 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_ADC_Start+0x158>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e00c      	b.n	800346e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e003      	b.n	800346e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012800 	.word	0x40012800
 800347c:	40012400 	.word	0x40012400

08003480 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003496:	f7ff fe3f 	bl	8003118 <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0d3      	b.n	800366a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d131      	bne.n	8003534 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12a      	bne.n	8003534 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034de:	e021      	b.n	8003524 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d01d      	beq.n	8003524 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_ADC_PollForConversion+0x7e>
 80034ee:	f7ff fe13 	bl	8003118 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d212      	bcs.n	8003524 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0a2      	b.n	800366a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0d6      	beq.n	80034e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003532:	e070      	b.n	8003616 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_ADC_PollForConversion+0x1f4>)
 8003536:	681c      	ldr	r4, [r3, #0]
 8003538:	2002      	movs	r0, #2
 800353a:	f002 ff8f 	bl	800645c <HAL_RCCEx_GetPeriphCLKFreq>
 800353e:	4603      	mov	r3, r0
 8003540:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_ADC_PollForConversion+0x1f8>)
 800354c:	400b      	ands	r3, r1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <HAL_ADC_PollForConversion+0x104>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	4b48      	ldr	r3, [pc, #288]	; (800367c <HAL_ADC_PollForConversion+0x1fc>)
 800355a:	400b      	ands	r3, r1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_ADC_PollForConversion+0x104>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_ADC_PollForConversion+0x200>)
 8003568:	400b      	ands	r3, r1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_ADC_PollForConversion+0x100>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68d9      	ldr	r1, [r3, #12]
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_ADC_PollForConversion+0x204>)
 8003576:	400b      	ands	r3, r1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_PollForConversion+0x100>
 800357c:	2314      	movs	r3, #20
 800357e:	e020      	b.n	80035c2 <HAL_ADC_PollForConversion+0x142>
 8003580:	2329      	movs	r3, #41	; 0x29
 8003582:	e01e      	b.n	80035c2 <HAL_ADC_PollForConversion+0x142>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6919      	ldr	r1, [r3, #16]
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_ADC_PollForConversion+0x200>)
 800358c:	400b      	ands	r3, r1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_ADC_PollForConversion+0x120>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_ADC_PollForConversion+0x204>)
 800359a:	400b      	ands	r3, r1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <HAL_ADC_PollForConversion+0x13c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6919      	ldr	r1, [r3, #16]
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_ADC_PollForConversion+0x208>)
 80035a8:	400b      	ands	r3, r1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x140>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68d9      	ldr	r1, [r3, #12]
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_ADC_PollForConversion+0x208>)
 80035b6:	400b      	ands	r3, r1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x140>
 80035bc:	2354      	movs	r3, #84	; 0x54
 80035be:	e000      	b.n	80035c2 <HAL_ADC_PollForConversion+0x142>
 80035c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035c8:	e021      	b.n	800360e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d01a      	beq.n	8003608 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_ADC_PollForConversion+0x168>
 80035d8:	f7ff fd9e 	bl	8003118 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d20f      	bcs.n	8003608 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d90b      	bls.n	8003608 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e030      	b.n	800366a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	429a      	cmp	r2, r3
 8003614:	d8d9      	bhi.n	80035ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0212 	mvn.w	r2, #18
 800361e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003636:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800363a:	d115      	bne.n	8003668 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	20000044 	.word	0x20000044
 8003678:	24924924 	.word	0x24924924
 800367c:	00924924 	.word	0x00924924
 8003680:	12492492 	.word	0x12492492
 8003684:	00492492 	.word	0x00492492
 8003688:	00249249 	.word	0x00249249

0800368c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0dc      	b.n	800387e <HAL_ADC_ConfigChannel+0x1da>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d81c      	bhi.n	800370e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b05      	subs	r3, #5
 80036e6:	221f      	movs	r2, #31
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4019      	ands	r1, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	3b05      	subs	r3, #5
 8003700:	fa00 f203 	lsl.w	r2, r0, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	; 0x34
 800370c:	e03c      	b.n	8003788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d81c      	bhi.n	8003750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3b23      	subs	r3, #35	; 0x23
 8003728:	221f      	movs	r2, #31
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	4019      	ands	r1, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	3b23      	subs	r3, #35	; 0x23
 8003742:	fa00 f203 	lsl.w	r2, r0, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
 800374e:	e01b      	b.n	8003788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b41      	subs	r3, #65	; 0x41
 8003762:	221f      	movs	r2, #31
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	4019      	ands	r1, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b41      	subs	r3, #65	; 0x41
 800377c:	fa00 f203 	lsl.w	r2, r0, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b09      	cmp	r3, #9
 800378e:	d91c      	bls.n	80037ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68d9      	ldr	r1, [r3, #12]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	3b1e      	subs	r3, #30
 80037a2:	2207      	movs	r2, #7
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	4019      	ands	r1, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6898      	ldr	r0, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	3b1e      	subs	r3, #30
 80037bc:	fa00 f203 	lsl.w	r2, r0, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e019      	b.n	80037fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6919      	ldr	r1, [r3, #16]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	2207      	movs	r2, #7
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	4019      	ands	r1, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6898      	ldr	r0, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	fa00 f203 	lsl.w	r2, r0, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b10      	cmp	r3, #16
 8003804:	d003      	beq.n	800380e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800380a:	2b11      	cmp	r3, #17
 800380c:	d132      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_ADC_ConfigChannel+0x1e4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d125      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d126      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003834:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b10      	cmp	r3, #16
 800383c:	d11a      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_ADC_ConfigChannel+0x1e8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_ADC_ConfigChannel+0x1ec>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	0c9a      	lsrs	r2, r3, #18
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003854:	e002      	b.n	800385c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3b01      	subs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f9      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x1b2>
 8003862:	e007      	b.n	8003874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012400 	.word	0x40012400
 800388c:	20000044 	.word	0x20000044
 8003890:	431bde83 	.word	0x431bde83

08003894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d040      	beq.n	8003934 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <ADC_Enable+0xac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <ADC_Enable+0xb0>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038d0:	e002      	b.n	80038d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038de:	f7ff fc1b 	bl	8003118 <HAL_GetTick>
 80038e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038e4:	e01f      	b.n	8003926 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038e6:	f7ff fc17 	bl	8003118 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d918      	bls.n	8003926 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d011      	beq.n	8003926 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d1d8      	bne.n	80038e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000044 	.word	0x20000044
 8003944:	431bde83 	.word	0x431bde83

08003948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d12e      	bne.n	80039c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003972:	f7ff fbd1 	bl	8003118 <HAL_GetTick>
 8003976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003978:	e01b      	b.n	80039b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397a:	f7ff fbcd 	bl	8003118 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d914      	bls.n	80039b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	f043 0210 	orr.w	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e007      	b.n	80039c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d0dc      	beq.n	800397a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ed      	b.n	8003bb8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff f97f 	bl	8002cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039fe:	f7ff fb8b 	bl	8003118 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a04:	e012      	b.n	8003a2c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a06:	f7ff fb87 	bl	8003118 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b0a      	cmp	r3, #10
 8003a12:	d90b      	bls.n	8003a2c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2205      	movs	r2, #5
 8003a24:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0c5      	b.n	8003bb8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0e5      	beq.n	8003a06 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0202 	bic.w	r2, r2, #2
 8003a48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4a:	f7ff fb65 	bl	8003118 <HAL_GetTick>
 8003a4e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a50:	e012      	b.n	8003a78 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a52:	f7ff fb61 	bl	8003118 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b0a      	cmp	r3, #10
 8003a5e:	d90b      	bls.n	8003a78 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e09f      	b.n	8003bb8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7e1b      	ldrb	r3, [r3, #24]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7e5b      	ldrb	r3, [r3, #25]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d108      	bne.n	8003aca <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e007      	b.n	8003ada <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7e9b      	ldrb	r3, [r3, #26]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0220 	orr.w	r2, r2, #32
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e007      	b.n	8003b04 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0220 	bic.w	r2, r2, #32
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7edb      	ldrb	r3, [r3, #27]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d108      	bne.n	8003b1e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0210 	bic.w	r2, r2, #16
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e007      	b.n	8003b2e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0210 	orr.w	r2, r2, #16
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7f1b      	ldrb	r3, [r3, #28]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0208 	orr.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e007      	b.n	8003b58 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0208 	bic.w	r2, r2, #8
 8003b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7f5b      	ldrb	r3, [r3, #29]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0204 	orr.w	r2, r2, #4
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e007      	b.n	8003b82 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	ea42 0103 	orr.w	r1, r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d12e      	bne.n	8003c32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bec:	f7ff fa94 	bl	8003118 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bf2:	e012      	b.n	8003c1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bf4:	f7ff fa90 	bl	8003118 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b0a      	cmp	r3, #10
 8003c00:	d90b      	bls.n	8003c1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2205      	movs	r2, #5
 8003c12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e012      	b.n	8003c40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e006      	b.n	8003c40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d003      	beq.n	8003c74 <HAL_CAN_AddTxMessage+0x2c>
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	f040 80ad 	bne.w	8003dce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8095 	beq.w	8003dbe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	0e1b      	lsrs	r3, r3, #24
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6809      	ldr	r1, [r1, #0]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	440b      	add	r3, r1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e00f      	b.n	8003cec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cd6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ce0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	440b      	add	r3, r1
 8003cea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6819      	ldr	r1, [r3, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	7d1b      	ldrb	r3, [r3, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d111      	bne.n	8003d2c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3318      	adds	r3, #24
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	6811      	ldr	r1, [r2, #0]
 8003d1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3318      	adds	r3, #24
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	440b      	add	r3, r1
 8003d28:	3304      	adds	r3, #4
 8003d2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3307      	adds	r3, #7
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	061a      	lsls	r2, r3, #24
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3306      	adds	r3, #6
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3305      	adds	r3, #5
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	4313      	orrs	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	3204      	adds	r2, #4
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	4610      	mov	r0, r2
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	6811      	ldr	r1, [r2, #0]
 8003d54:	ea43 0200 	orr.w	r2, r3, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3303      	adds	r3, #3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	061a      	lsls	r2, r3, #24
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3302      	adds	r3, #2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	4610      	mov	r0, r2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	6811      	ldr	r1, [r2, #0]
 8003d8a:	ea43 0200 	orr.w	r2, r3, r0
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3318      	adds	r3, #24
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	4413      	add	r3, r2
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6811      	ldr	r1, [r2, #0]
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3318      	adds	r3, #24
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	440b      	add	r3, r1
 8003db8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e00e      	b.n	8003ddc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e006      	b.n	8003ddc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3724      	adds	r7, #36	; 0x24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003de6:	b480      	push	{r7}
 8003de8:	b087      	sub	sp, #28
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d003      	beq.n	8003e0a <HAL_CAN_GetRxMessage+0x24>
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f040 8103 	bne.w	8004010 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0f7      	b.n	800401e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0e8      	b.n	800401e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	331b      	adds	r3, #27
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0204 	and.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	331b      	adds	r3, #27
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	4413      	add	r3, r2
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0d5b      	lsrs	r3, r3, #21
 8003e7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e00b      	b.n	8003e9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	331b      	adds	r3, #27
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	331b      	adds	r3, #27
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0202 	and.w	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	331b      	adds	r3, #27
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	611a      	str	r2, [r3, #16]
 8003ed0:	e00b      	b.n	8003eea <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	331b      	adds	r3, #27
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	331b      	adds	r3, #27
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	331b      	adds	r3, #27
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3304      	adds	r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0a1a      	lsrs	r2, r3, #8
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0c1a      	lsrs	r2, r3, #16
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	3302      	adds	r3, #2
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e1a      	lsrs	r2, r3, #24
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3303      	adds	r3, #3
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	0a1a      	lsrs	r2, r3, #8
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3305      	adds	r3, #5
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0c1a      	lsrs	r2, r3, #16
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	3306      	adds	r3, #6
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0e1a      	lsrs	r2, r3, #24
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	3307      	adds	r3, #7
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0220 	orr.w	r2, r2, #32
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e007      	b.n	800400c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e006      	b.n	800401e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004038:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d002      	beq.n	8004046 <HAL_CAN_ActivateNotification+0x1e>
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d109      	bne.n	800405a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6959      	ldr	r1, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e006      	b.n	8004068 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d07c      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d023      	beq.n	800410a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f983 	bl	80043e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80040da:	e016      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	e00c      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e002      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f986 	bl	8004416 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d024      	beq.n	800415e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f962 	bl	80043f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800412e:	e016      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	e00c      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	e002      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f965 	bl	8004428 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d024      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004170:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f941 	bl	8004404 <HAL_CAN_TxMailbox2CompleteCallback>
 8004182:	e016      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e00c      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e002      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f944 	bl	800443a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f92a 	bl	800444c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fe fc91 	bl	8002b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004230:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2210      	movs	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2208      	movs	r2, #8
 8004254:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f90a 	bl	8004470 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8f2 	bl	800445e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2210      	movs	r2, #16
 8004294:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8f3 	bl	8004482 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2208      	movs	r2, #8
 80042b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8eb 	bl	8004494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07b      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d072      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d043      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03e      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d02b      	beq.n	800439c <HAL_CAN_IRQHandler+0x32a>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d82e      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004348:	2b50      	cmp	r3, #80	; 0x50
 800434a:	d022      	beq.n	8004392 <HAL_CAN_IRQHandler+0x320>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d82a      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d019      	beq.n	8004388 <HAL_CAN_IRQHandler+0x316>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d826      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004358:	2b30      	cmp	r3, #48	; 0x30
 800435a:	d010      	beq.n	800437e <HAL_CAN_IRQHandler+0x30c>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d822      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d002      	beq.n	800436a <HAL_CAN_IRQHandler+0x2f8>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d005      	beq.n	8004374 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004368:	e01d      	b.n	80043a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004372:	e019      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f043 0310 	orr.w	r3, r3, #16
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800437c:	e014      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004386:	e00f      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004390:	e00a      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800439a:	e005      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043a4:	e000      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80043a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2204      	movs	r2, #4
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f867 	bl	80044a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043d8:	bf00      	nop
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	60d3      	str	r3, [r2, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__NVIC_GetPriorityGrouping+0x18>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 0307 	and.w	r3, r3, #7
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db0b      	blt.n	8004546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4906      	ldr	r1, [pc, #24]	; (8004550 <__NVIC_EnableIRQ+0x34>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2001      	movs	r0, #1
 800453e:	fa00 f202 	lsl.w	r2, r0, r2
 8004542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	bf28      	it	cs
 80045c6:	2304      	movcs	r3, #4
 80045c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d902      	bls.n	80045d8 <NVIC_EncodePriority+0x30>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3b03      	subs	r3, #3
 80045d6:	e000      	b.n	80045da <NVIC_EncodePriority+0x32>
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	401a      	ands	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43d9      	mvns	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	4313      	orrs	r3, r2
         );
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461c:	d301      	bcc.n	8004622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461e:	2301      	movs	r3, #1
 8004620:	e00f      	b.n	8004642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <SysTick_Config+0x40>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462a:	210f      	movs	r1, #15
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	f7ff ff90 	bl	8004554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <SysTick_Config+0x40>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <SysTick_Config+0x40>)
 800463c:	2207      	movs	r2, #7
 800463e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000e010 	.word	0xe000e010

08004650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff2d 	bl	80044b8 <__NVIC_SetPriorityGrouping>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004678:	f7ff ff42 	bl	8004500 <__NVIC_GetPriorityGrouping>
 800467c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff ff90 	bl	80045a8 <NVIC_EncodePriority>
 8004688:	4602      	mov	r2, r0
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff5f 	bl	8004554 <__NVIC_SetPriority>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff35 	bl	800451c <__NVIC_EnableIRQ>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ffa2 	bl	800460c <SysTick_Config>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b08b      	sub	sp, #44	; 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046e2:	2300      	movs	r3, #0
 80046e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e6:	e169      	b.n	80049bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046e8:	2201      	movs	r2, #1
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	429a      	cmp	r2, r3
 8004702:	f040 8158 	bne.w	80049b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a9a      	ldr	r2, [pc, #616]	; (8004974 <HAL_GPIO_Init+0x2a0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d05e      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
 8004710:	4a98      	ldr	r2, [pc, #608]	; (8004974 <HAL_GPIO_Init+0x2a0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d875      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 8004716:	4a98      	ldr	r2, [pc, #608]	; (8004978 <HAL_GPIO_Init+0x2a4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d058      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
 800471c:	4a96      	ldr	r2, [pc, #600]	; (8004978 <HAL_GPIO_Init+0x2a4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d86f      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 8004722:	4a96      	ldr	r2, [pc, #600]	; (800497c <HAL_GPIO_Init+0x2a8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d052      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
 8004728:	4a94      	ldr	r2, [pc, #592]	; (800497c <HAL_GPIO_Init+0x2a8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d869      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 800472e:	4a94      	ldr	r2, [pc, #592]	; (8004980 <HAL_GPIO_Init+0x2ac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d04c      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
 8004734:	4a92      	ldr	r2, [pc, #584]	; (8004980 <HAL_GPIO_Init+0x2ac>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d863      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 800473a:	4a92      	ldr	r2, [pc, #584]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d046      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
 8004740:	4a90      	ldr	r2, [pc, #576]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d85d      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 8004746:	2b12      	cmp	r3, #18
 8004748:	d82a      	bhi.n	80047a0 <HAL_GPIO_Init+0xcc>
 800474a:	2b12      	cmp	r3, #18
 800474c:	d859      	bhi.n	8004802 <HAL_GPIO_Init+0x12e>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_GPIO_Init+0x80>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	080047cf 	.word	0x080047cf
 8004758:	080047a9 	.word	0x080047a9
 800475c:	080047bb 	.word	0x080047bb
 8004760:	080047fd 	.word	0x080047fd
 8004764:	08004803 	.word	0x08004803
 8004768:	08004803 	.word	0x08004803
 800476c:	08004803 	.word	0x08004803
 8004770:	08004803 	.word	0x08004803
 8004774:	08004803 	.word	0x08004803
 8004778:	08004803 	.word	0x08004803
 800477c:	08004803 	.word	0x08004803
 8004780:	08004803 	.word	0x08004803
 8004784:	08004803 	.word	0x08004803
 8004788:	08004803 	.word	0x08004803
 800478c:	08004803 	.word	0x08004803
 8004790:	08004803 	.word	0x08004803
 8004794:	08004803 	.word	0x08004803
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	4a79      	ldr	r2, [pc, #484]	; (8004988 <HAL_GPIO_Init+0x2b4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047a6:	e02c      	b.n	8004802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	623b      	str	r3, [r7, #32]
          break;
 80047ae:	e029      	b.n	8004804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	3304      	adds	r3, #4
 80047b6:	623b      	str	r3, [r7, #32]
          break;
 80047b8:	e024      	b.n	8004804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	3308      	adds	r3, #8
 80047c0:	623b      	str	r3, [r7, #32]
          break;
 80047c2:	e01f      	b.n	8004804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	330c      	adds	r3, #12
 80047ca:	623b      	str	r3, [r7, #32]
          break;
 80047cc:	e01a      	b.n	8004804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047d6:	2304      	movs	r3, #4
 80047d8:	623b      	str	r3, [r7, #32]
          break;
 80047da:	e013      	b.n	8004804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047e4:	2308      	movs	r3, #8
 80047e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	611a      	str	r2, [r3, #16]
          break;
 80047ee:	e009      	b.n	8004804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047f0:	2308      	movs	r3, #8
 80047f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	615a      	str	r2, [r3, #20]
          break;
 80047fa:	e003      	b.n	8004804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047fc:	2300      	movs	r3, #0
 80047fe:	623b      	str	r3, [r7, #32]
          break;
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x130>
          break;
 8004802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2bff      	cmp	r3, #255	; 0xff
 8004808:	d801      	bhi.n	800480e <HAL_GPIO_Init+0x13a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	e001      	b.n	8004812 <HAL_GPIO_Init+0x13e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2bff      	cmp	r3, #255	; 0xff
 8004818:	d802      	bhi.n	8004820 <HAL_GPIO_Init+0x14c>
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	e002      	b.n	8004826 <HAL_GPIO_Init+0x152>
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	3b08      	subs	r3, #8
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	210f      	movs	r1, #15
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	401a      	ands	r2, r3
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	431a      	orrs	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80b1 	beq.w	80049b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <HAL_GPIO_Init+0x2b8>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	4a4c      	ldr	r2, [pc, #304]	; (800498c <HAL_GPIO_Init+0x2b8>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6193      	str	r3, [r2, #24]
 8004860:	4b4a      	ldr	r3, [pc, #296]	; (800498c <HAL_GPIO_Init+0x2b8>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800486c:	4a48      	ldr	r2, [pc, #288]	; (8004990 <HAL_GPIO_Init+0x2bc>)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	3302      	adds	r3, #2
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <HAL_GPIO_Init+0x2c0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_GPIO_Init+0x1ec>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <HAL_GPIO_Init+0x2c4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00d      	beq.n	80048bc <HAL_GPIO_Init+0x1e8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3e      	ldr	r2, [pc, #248]	; (800499c <HAL_GPIO_Init+0x2c8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <HAL_GPIO_Init+0x1e4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <HAL_GPIO_Init+0x2cc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_GPIO_Init+0x1e0>
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <HAL_GPIO_Init+0x1ee>
 80048b4:	2304      	movs	r3, #4
 80048b6:	e004      	b.n	80048c2 <HAL_GPIO_Init+0x1ee>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e002      	b.n	80048c2 <HAL_GPIO_Init+0x1ee>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_GPIO_Init+0x1ee>
 80048c0:	2300      	movs	r3, #0
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	f002 0203 	and.w	r2, r2, #3
 80048c8:	0092      	lsls	r2, r2, #2
 80048ca:	4093      	lsls	r3, r2
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048d2:	492f      	ldr	r1, [pc, #188]	; (8004990 <HAL_GPIO_Init+0x2bc>)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	492c      	ldr	r1, [pc, #176]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	43db      	mvns	r3, r3
 8004902:	4928      	ldr	r1, [pc, #160]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004904:	4013      	ands	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	4922      	ldr	r1, [pc, #136]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
 8004920:	e006      	b.n	8004930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004922:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	43db      	mvns	r3, r3
 800492a:	491e      	ldr	r1, [pc, #120]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 800492c:	4013      	ands	r3, r2
 800492e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d006      	beq.n	800494a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4918      	ldr	r1, [pc, #96]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
 8004948:	e006      	b.n	8004958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	43db      	mvns	r3, r3
 8004952:	4914      	ldr	r1, [pc, #80]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004954:	4013      	ands	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d021      	beq.n	80049a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	490e      	ldr	r1, [pc, #56]	; (80049a4 <HAL_GPIO_Init+0x2d0>)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	e021      	b.n	80049b6 <HAL_GPIO_Init+0x2e2>
 8004972:	bf00      	nop
 8004974:	10320000 	.word	0x10320000
 8004978:	10310000 	.word	0x10310000
 800497c:	10220000 	.word	0x10220000
 8004980:	10210000 	.word	0x10210000
 8004984:	10120000 	.word	0x10120000
 8004988:	10110000 	.word	0x10110000
 800498c:	40021000 	.word	0x40021000
 8004990:	40010000 	.word	0x40010000
 8004994:	40010800 	.word	0x40010800
 8004998:	40010c00 	.word	0x40010c00
 800499c:	40011000 	.word	0x40011000
 80049a0:	40011400 	.word	0x40011400
 80049a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_GPIO_Init+0x304>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	4909      	ldr	r1, [pc, #36]	; (80049d8 <HAL_GPIO_Init+0x304>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	3301      	adds	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f47f ae8e 	bne.w	80046e8 <HAL_GPIO_Init+0x14>
  }
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	372c      	adds	r7, #44	; 0x2c
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40010400 	.word	0x40010400

080049dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	e001      	b.n	80049fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	807b      	strh	r3, [r7, #2]
 8004a16:	4613      	mov	r3, r2
 8004a18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a1a:	787b      	ldrb	r3, [r7, #1]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a26:	e003      	b.n	8004a30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	041a      	lsls	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	611a      	str	r2, [r3, #16]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
	...

08004a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e12b      	b.n	8004ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fe f99e 	bl	8002da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2224      	movs	r2, #36	; 0x24
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f001 fbe0 	bl	8006264 <HAL_RCC_GetPCLK1Freq>
 8004aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4a81      	ldr	r2, [pc, #516]	; (8004cb0 <HAL_I2C_Init+0x274>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d807      	bhi.n	8004ac0 <HAL_I2C_Init+0x84>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a80      	ldr	r2, [pc, #512]	; (8004cb4 <HAL_I2C_Init+0x278>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bf94      	ite	ls
 8004ab8:	2301      	movls	r3, #1
 8004aba:	2300      	movhi	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e006      	b.n	8004ace <HAL_I2C_Init+0x92>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a7d      	ldr	r2, [pc, #500]	; (8004cb8 <HAL_I2C_Init+0x27c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	bf94      	ite	ls
 8004ac8:	2301      	movls	r3, #1
 8004aca:	2300      	movhi	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0e7      	b.n	8004ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a78      	ldr	r2, [pc, #480]	; (8004cbc <HAL_I2C_Init+0x280>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0c9b      	lsrs	r3, r3, #18
 8004ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <HAL_I2C_Init+0x274>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d802      	bhi.n	8004b10 <HAL_I2C_Init+0xd4>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	e009      	b.n	8004b24 <HAL_I2C_Init+0xe8>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	4a69      	ldr	r2, [pc, #420]	; (8004cc0 <HAL_I2C_Init+0x284>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	099b      	lsrs	r3, r3, #6
 8004b22:	3301      	adds	r3, #1
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	495c      	ldr	r1, [pc, #368]	; (8004cb0 <HAL_I2C_Init+0x274>)
 8004b40:	428b      	cmp	r3, r1
 8004b42:	d819      	bhi.n	8004b78 <HAL_I2C_Init+0x13c>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e59      	subs	r1, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b58:	400b      	ands	r3, r1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_I2C_Init+0x138>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1e59      	subs	r1, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b72:	e051      	b.n	8004c18 <HAL_I2C_Init+0x1dc>
 8004b74:	2304      	movs	r3, #4
 8004b76:	e04f      	b.n	8004c18 <HAL_I2C_Init+0x1dc>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d111      	bne.n	8004ba4 <HAL_I2C_Init+0x168>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	440b      	add	r3, r1
 8004b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e012      	b.n	8004bca <HAL_I2C_Init+0x18e>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e58      	subs	r0, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	0099      	lsls	r1, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_I2C_Init+0x196>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e022      	b.n	8004c18 <HAL_I2C_Init+0x1dc>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_I2C_Init+0x1bc>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1e58      	subs	r0, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	440b      	add	r3, r1
 8004be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bec:	3301      	adds	r3, #1
 8004bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	e00f      	b.n	8004c18 <HAL_I2C_Init+0x1dc>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	6809      	ldr	r1, [r1, #0]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6911      	ldr	r1, [r2, #16]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68d2      	ldr	r2, [r2, #12]
 8004c52:	4311      	orrs	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	000186a0 	.word	0x000186a0
 8004cb4:	001e847f 	.word	0x001e847f
 8004cb8:	003d08ff 	.word	0x003d08ff
 8004cbc:	431bde83 	.word	0x431bde83
 8004cc0:	10624dd3 	.word	0x10624dd3

08004cc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	817b      	strh	r3, [r7, #10]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cd8:	f7fe fa1e 	bl	8003118 <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	f040 80e0 	bne.w	8004eac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2319      	movs	r3, #25
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4970      	ldr	r1, [pc, #448]	; (8004eb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fcb4 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0d3      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_I2C_Master_Transmit+0x50>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0cc      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d007      	beq.n	8004d3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2221      	movs	r2, #33	; 0x21
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2210      	movs	r2, #16
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	893a      	ldrh	r2, [r7, #8]
 8004d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a50      	ldr	r2, [pc, #320]	; (8004ebc <HAL_I2C_Master_Transmit+0x1f8>)
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d7c:	8979      	ldrh	r1, [r7, #10]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb04 	bl	8005390 <I2C_MasterRequestWrite>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e08d      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004da8:	e066      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fd72 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d107      	bne.n	8004dd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e06b      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d11b      	bne.n	8004e4c <HAL_I2C_Master_Transmit+0x188>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	6a39      	ldr	r1, [r7, #32]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fd69 	bl	8005928 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d107      	bne.n	8004e74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e01a      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d194      	bne.n	8004daa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000

08004ec0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	817b      	strh	r3, [r7, #10]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	813b      	strh	r3, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ede:	f7fe f91b 	bl	8003118 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 8244 	bne.w	800537a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2319      	movs	r3, #25
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4982      	ldr	r1, [pc, #520]	; (8005104 <HAL_I2C_Mem_Read+0x244>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fbb1 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e237      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x5a>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e230      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2222      	movs	r2, #34	; 0x22
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a62      	ldr	r2, [pc, #392]	; (8005108 <HAL_I2C_Mem_Read+0x248>)
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f82:	88f8      	ldrh	r0, [r7, #6]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa7e 	bl	8005494 <I2C_RequestMemoryRead>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e1ec      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d113      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e1c0      	b.n	8005354 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11e      	bne.n	8005018 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fea:	b672      	cpsid	i
}
 8004fec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005014:	b662      	cpsie	i
}
 8005016:	e035      	b.n	8005084 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b02      	cmp	r3, #2
 800501e:	d11e      	bne.n	800505e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005030:	b672      	cpsid	i
}
 8005032:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005058:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800505a:	b662      	cpsie	i
}
 800505c:	e012      	b.n	8005084 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005084:	e166      	b.n	8005354 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 811f 	bhi.w	80052ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d123      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fc8b 	bl	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e167      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050de:	e139      	b.n	8005354 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d152      	bne.n	800518e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2200      	movs	r2, #0
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <HAL_I2C_Mem_Read+0x24c>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fab6 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e13c      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
 8005102:	bf00      	nop
 8005104:	00100002 	.word	0x00100002
 8005108:	ffff0000 	.word	0xffff0000
 800510c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005110:	b672      	cpsid	i
}
 8005112:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005156:	b662      	cpsie	i
}
 8005158:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800518c:	e0e2      	b.n	8005354 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2200      	movs	r2, #0
 8005196:	497b      	ldr	r1, [pc, #492]	; (8005384 <HAL_I2C_Mem_Read+0x4c4>)
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fa63 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0e9      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051b8:	b672      	cpsid	i
}
 80051ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051ee:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_I2C_Mem_Read+0x4c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	4a65      	ldr	r2, [pc, #404]	; (800538c <HAL_I2C_Mem_Read+0x4cc>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	0a1a      	lsrs	r2, r3, #8
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	00da      	lsls	r2, r3, #3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	3b01      	subs	r3, #1
 800520c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d118      	bne.n	8005246 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005236:	b662      	cpsie	i
}
 8005238:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e09a      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d1d9      	bne.n	8005208 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005296:	b662      	cpsie	i
}
 8005298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052cc:	e042      	b.n	8005354 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fb70 	bl	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e04c      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d118      	bne.n	8005354 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	f47f ae94 	bne.w	8005086 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3728      	adds	r7, #40	; 0x28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	00010004 	.word	0x00010004
 8005388:	20000044 	.word	0x20000044
 800538c:	14f8b589 	.word	0x14f8b589

08005390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	460b      	mov	r3, r1
 800539e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d006      	beq.n	80053ba <I2C_MasterRequestWrite+0x2a>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d003      	beq.n	80053ba <I2C_MasterRequestWrite+0x2a>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053b8:	d108      	bne.n	80053cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	e00b      	b.n	80053e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2b12      	cmp	r3, #18
 80053d2:	d107      	bne.n	80053e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f937 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	d103      	bne.n	8005414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e035      	b.n	8005484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005420:	d108      	bne.n	8005434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005422:	897b      	ldrh	r3, [r7, #10]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005430:	611a      	str	r2, [r3, #16]
 8005432:	e01b      	b.n	800546c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005434:	897b      	ldrh	r3, [r7, #10]
 8005436:	11db      	asrs	r3, r3, #7
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 0306 	and.w	r3, r3, #6
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f063 030f 	orn	r3, r3, #15
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	490e      	ldr	r1, [pc, #56]	; (800548c <I2C_MasterRequestWrite+0xfc>)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f980 	bl	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e010      	b.n	8005484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005462:	897b      	ldrh	r3, [r7, #10]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <I2C_MasterRequestWrite+0x100>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f970 	bl	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	00010008 	.word	0x00010008
 8005490:	00010002 	.word	0x00010002

08005494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8c2 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f4:	d103      	bne.n	80054fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e0aa      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	4952      	ldr	r1, [pc, #328]	; (8005660 <I2C_RequestMemoryRead+0x1cc>)
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f91d 	bl	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e097      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	6a39      	ldr	r1, [r7, #32]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f9a8 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b04      	cmp	r3, #4
 8005554:	d107      	bne.n	8005566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e076      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	e021      	b.n	80055c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b29b      	uxth	r3, r3
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	6a39      	ldr	r1, [r7, #32]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f982 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d107      	bne.n	80055b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e050      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b6:	893b      	ldrh	r3, [r7, #8]
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	6a39      	ldr	r1, [r7, #32]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f967 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d107      	bne.n	80055e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e035      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2200      	movs	r2, #0
 8005604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f82b 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d103      	bne.n	800562c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e013      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005630:	897b      	ldrh	r3, [r7, #10]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	4906      	ldr	r1, [pc, #24]	; (8005660 <I2C_RequestMemoryRead+0x1cc>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f886 	bl	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	00010002 	.word	0x00010002

08005664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005674:	e048      	b.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d044      	beq.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fd fd4b 	bl	8003118 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d139      	bne.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	0c1b      	lsrs	r3, r3, #16
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10d      	bne.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	43da      	mvns	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	e00c      	b.n	80056d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	43da      	mvns	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d116      	bne.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e023      	b.n	8005750 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	0c1b      	lsrs	r3, r3, #16
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10d      	bne.n	800572e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	43da      	mvns	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4013      	ands	r3, r2
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	e00c      	b.n	8005748 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	429a      	cmp	r2, r3
 800574c:	d093      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005766:	e071      	b.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d123      	bne.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0204 	orr.w	r2, r3, #4
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e067      	b.n	8005890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d041      	beq.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fd fca6 	bl	8003118 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d136      	bne.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10c      	bne.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	43da      	mvns	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e00b      	b.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	43da      	mvns	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e021      	b.n	8005890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10c      	bne.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	43da      	mvns	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e00b      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f af6d 	bne.w	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a4:	e034      	b.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8e3 	bl	8005a72 <I2C_IsAcknowledgeFailed>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e034      	b.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d028      	beq.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fd fc2b 	bl	8003118 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11d      	bne.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	d016      	beq.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e007      	b.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d1c3      	bne.n	80058a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005934:	e034      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f89b 	bl	8005a72 <I2C_IsAcknowledgeFailed>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e034      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d028      	beq.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fd fbe3 	bl	8003118 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11d      	bne.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d016      	beq.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e007      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d1c3      	bne.n	8005936 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c4:	e049      	b.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d119      	bne.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0210 	mvn.w	r2, #16
 80059dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e030      	b.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a08:	f7fd fb86 	bl	8003118 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d11d      	bne.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d016      	beq.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e007      	b.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d1ae      	bne.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d11b      	bne.n	8005ac2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e272      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8087 	beq.w	8005bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af0:	4b92      	ldr	r3, [pc, #584]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d00c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005afc:	4b8f      	ldr	r3, [pc, #572]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 030c 	and.w	r3, r3, #12
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d112      	bne.n	8005b2e <HAL_RCC_OscConfig+0x5e>
 8005b08:	4b8c      	ldr	r3, [pc, #560]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d10b      	bne.n	8005b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b16:	4b89      	ldr	r3, [pc, #548]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d06c      	beq.n	8005bfc <HAL_RCC_OscConfig+0x12c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d168      	bne.n	8005bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e24c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x76>
 8005b38:	4b80      	ldr	r3, [pc, #512]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a7f      	ldr	r2, [pc, #508]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e02e      	b.n	8005ba4 <HAL_RCC_OscConfig+0xd4>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x98>
 8005b4e:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7a      	ldr	r2, [pc, #488]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4b78      	ldr	r3, [pc, #480]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a77      	ldr	r2, [pc, #476]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	e01d      	b.n	8005ba4 <HAL_RCC_OscConfig+0xd4>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCC_OscConfig+0xbc>
 8005b72:	4b72      	ldr	r3, [pc, #456]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a71      	ldr	r2, [pc, #452]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a6e      	ldr	r2, [pc, #440]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e00b      	b.n	8005ba4 <HAL_RCC_OscConfig+0xd4>
 8005b8c:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6a      	ldr	r2, [pc, #424]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	4b68      	ldr	r3, [pc, #416]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a67      	ldr	r2, [pc, #412]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd fab4 	bl	8003118 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7fd fab0 	bl	8003118 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e200      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	4b5d      	ldr	r3, [pc, #372]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0xe4>
 8005bd2:	e014      	b.n	8005bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fd faa0 	bl	8003118 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fd fa9c 	bl	8003118 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e1ec      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x10c>
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d063      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c0a:	4b4c      	ldr	r3, [pc, #304]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c16:	4b49      	ldr	r3, [pc, #292]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d11c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x18c>
 8005c22:	4b46      	ldr	r3, [pc, #280]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d116      	bne.n	8005c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c2e:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_RCC_OscConfig+0x176>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e1c0      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c46:	4b3d      	ldr	r3, [pc, #244]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4939      	ldr	r1, [pc, #228]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5a:	e03a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d020      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_OscConfig+0x270>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fd fa55 	bl	8003118 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c72:	f7fd fa51 	bl	8003118 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e1a1      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c84:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4927      	ldr	r1, [pc, #156]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]
 8005ca4:	e015      	b.n	8005cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca6:	4b26      	ldr	r3, [pc, #152]	; (8005d40 <HAL_RCC_OscConfig+0x270>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fd fa34 	bl	8003118 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb4:	f7fd fa30 	bl	8003118 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e180      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03a      	beq.n	8005d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d019      	beq.n	8005d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <HAL_RCC_OscConfig+0x274>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cec:	f7fd fa14 	bl	8003118 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf4:	f7fd fa10 	bl	8003118 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e160      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <HAL_RCC_OscConfig+0x26c>)
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d12:	2001      	movs	r0, #1
 8005d14:	f000 face 	bl	80062b4 <RCC_Delay>
 8005d18:	e01c      	b.n	8005d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_RCC_OscConfig+0x274>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d20:	f7fd f9fa 	bl	8003118 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d26:	e00f      	b.n	8005d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d28:	f7fd f9f6 	bl	8003118 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d908      	bls.n	8005d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e146      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	42420000 	.word	0x42420000
 8005d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d48:	4b92      	ldr	r3, [pc, #584]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e9      	bne.n	8005d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80a6 	beq.w	8005eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d66:	4b8b      	ldr	r3, [pc, #556]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d72:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4a87      	ldr	r2, [pc, #540]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	61d3      	str	r3, [r2, #28]
 8005d7e:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8e:	4b82      	ldr	r3, [pc, #520]	; (8005f98 <HAL_RCC_OscConfig+0x4c8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d118      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d9a:	4b7f      	ldr	r3, [pc, #508]	; (8005f98 <HAL_RCC_OscConfig+0x4c8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7e      	ldr	r2, [pc, #504]	; (8005f98 <HAL_RCC_OscConfig+0x4c8>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da6:	f7fd f9b7 	bl	8003118 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dae:	f7fd f9b3 	bl	8003118 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b64      	cmp	r3, #100	; 0x64
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e103      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc0:	4b75      	ldr	r3, [pc, #468]	; (8005f98 <HAL_RCC_OscConfig+0x4c8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x312>
 8005dd4:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	4a6e      	ldr	r2, [pc, #440]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6213      	str	r3, [r2, #32]
 8005de0:	e02d      	b.n	8005e3e <HAL_RCC_OscConfig+0x36e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x334>
 8005dea:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	4a69      	ldr	r2, [pc, #420]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	6213      	str	r3, [r2, #32]
 8005df6:	4b67      	ldr	r3, [pc, #412]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	4a66      	ldr	r2, [pc, #408]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	6213      	str	r3, [r2, #32]
 8005e02:	e01c      	b.n	8005e3e <HAL_RCC_OscConfig+0x36e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d10c      	bne.n	8005e26 <HAL_RCC_OscConfig+0x356>
 8005e0c:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	4a60      	ldr	r2, [pc, #384]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e12:	f043 0304 	orr.w	r3, r3, #4
 8005e16:	6213      	str	r3, [r2, #32]
 8005e18:	4b5e      	ldr	r3, [pc, #376]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6213      	str	r3, [r2, #32]
 8005e24:	e00b      	b.n	8005e3e <HAL_RCC_OscConfig+0x36e>
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4a5a      	ldr	r2, [pc, #360]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6213      	str	r3, [r2, #32]
 8005e32:	4b58      	ldr	r3, [pc, #352]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	4a57      	ldr	r2, [pc, #348]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d015      	beq.n	8005e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fd f967 	bl	8003118 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f7fd f963 	bl	8003118 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e0b1      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	4b4b      	ldr	r3, [pc, #300]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ee      	beq.n	8005e4e <HAL_RCC_OscConfig+0x37e>
 8005e70:	e014      	b.n	8005e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e72:	f7fd f951 	bl	8003118 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7a:	f7fd f94d 	bl	8003118 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e09b      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e90:	4b40      	ldr	r3, [pc, #256]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1ee      	bne.n	8005e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea2:	4b3c      	ldr	r3, [pc, #240]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4a3b      	ldr	r2, [pc, #236]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8087 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb8:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 030c 	and.w	r3, r3, #12
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d061      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d146      	bne.n	8005f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ecc:	4b33      	ldr	r3, [pc, #204]	; (8005f9c <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed2:	f7fd f921 	bl	8003118 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eda:	f7fd f91d 	bl	8003118 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e06d      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eec:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f00:	d108      	bne.n	8005f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4921      	ldr	r1, [pc, #132]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f14:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a19      	ldr	r1, [r3, #32]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	430b      	orrs	r3, r1
 8005f26:	491b      	ldr	r1, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_RCC_OscConfig+0x4cc>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f32:	f7fd f8f1 	bl	8003118 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3a:	f7fd f8ed 	bl	8003118 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e03d      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x46a>
 8005f58:	e035      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <HAL_RCC_OscConfig+0x4cc>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f60:	f7fd f8da 	bl	8003118 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f68:	f7fd f8d6 	bl	8003118 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e026      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1f0      	bne.n	8005f68 <HAL_RCC_OscConfig+0x498>
 8005f86:	e01e      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e019      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40007000 	.word	0x40007000
 8005f9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCC_OscConfig+0x500>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d106      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000

08005fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0d0      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b6a      	ldr	r3, [pc, #424]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d910      	bls.n	8006018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b67      	ldr	r3, [pc, #412]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 0207 	bic.w	r2, r3, #7
 8005ffe:	4965      	ldr	r1, [pc, #404]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b63      	ldr	r3, [pc, #396]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0b8      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006030:	4b59      	ldr	r3, [pc, #356]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4a58      	ldr	r2, [pc, #352]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800603a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006048:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a52      	ldr	r2, [pc, #328]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	494d      	ldr	r1, [pc, #308]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d040      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d115      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e07f      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d107      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e073      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a2:	4b3d      	ldr	r3, [pc, #244]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e06b      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4936      	ldr	r1, [pc, #216]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060c4:	f7fd f828 	bl	8003118 <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060cc:	f7fd f824 	bl	8003118 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e053      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e2:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 020c 	and.w	r2, r3, #12
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d1eb      	bne.n	80060cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d210      	bcs.n	8006124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 0207 	bic.w	r2, r3, #7
 800610a:	4922      	ldr	r1, [pc, #136]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e032      	b.n	800618a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4916      	ldr	r1, [pc, #88]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	490e      	ldr	r1, [pc, #56]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006162:	f000 f821 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8006166:	4602      	mov	r2, r0
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	490a      	ldr	r1, [pc, #40]	; (800619c <HAL_RCC_ClockConfig+0x1c8>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <HAL_RCC_ClockConfig+0x1cc>)
 800617c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc ff86 	bl	8003094 <HAL_InitTick>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40022000 	.word	0x40022000
 8006198:	40021000 	.word	0x40021000
 800619c:	08008ba8 	.word	0x08008ba8
 80061a0:	20000044 	.word	0x20000044
 80061a4:	20000048 	.word	0x20000048

080061a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <HAL_RCC_GetSysClockFreq+0x94>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d002      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0x30>
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d003      	beq.n	80061de <HAL_RCC_GetSysClockFreq+0x36>
 80061d6:	e027      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCC_GetSysClockFreq+0x98>)
 80061da:	613b      	str	r3, [r7, #16]
      break;
 80061dc:	e027      	b.n	800622e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0c9b      	lsrs	r3, r3, #18
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80061e8:	5cd3      	ldrb	r3, [r2, r3]
 80061ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061f6:	4b11      	ldr	r3, [pc, #68]	; (800623c <HAL_RCC_GetSysClockFreq+0x94>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	0c5b      	lsrs	r3, r3, #17
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	4a11      	ldr	r2, [pc, #68]	; (8006248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <HAL_RCC_GetSysClockFreq+0x98>)
 800620a:	fb03 f202 	mul.w	r2, r3, r2
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e004      	b.n	8006222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <HAL_RCC_GetSysClockFreq+0xa4>)
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	613b      	str	r3, [r7, #16]
      break;
 8006226:	e002      	b.n	800622e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_GetSysClockFreq+0x98>)
 800622a:	613b      	str	r3, [r7, #16]
      break;
 800622c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622e:	693b      	ldr	r3, [r7, #16]
}
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40021000 	.word	0x40021000
 8006240:	007a1200 	.word	0x007a1200
 8006244:	08008bc0 	.word	0x08008bc0
 8006248:	08008bd0 	.word	0x08008bd0
 800624c:	003d0900 	.word	0x003d0900

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <HAL_RCC_GetHCLKFreq+0x10>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	20000044 	.word	0x20000044

08006264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006268:	f7ff fff2 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 800626c:	4602      	mov	r2, r0
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4903      	ldr	r1, [pc, #12]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800627a:	5ccb      	ldrb	r3, [r1, r3]
 800627c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40021000 	.word	0x40021000
 8006288:	08008bb8 	.word	0x08008bb8

0800628c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006290:	f7ff ffde 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006294:	4602      	mov	r2, r0
 8006296:	4b05      	ldr	r3, [pc, #20]	; (80062ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	0adb      	lsrs	r3, r3, #11
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	4903      	ldr	r1, [pc, #12]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a2:	5ccb      	ldrb	r3, [r1, r3]
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40021000 	.word	0x40021000
 80062b0:	08008bb8 	.word	0x08008bb8

080062b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <RCC_Delay+0x34>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <RCC_Delay+0x38>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0a5b      	lsrs	r3, r3, #9
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062d0:	bf00      	nop
  }
  while (Delay --);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1e5a      	subs	r2, r3, #1
 80062d6:	60fa      	str	r2, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f9      	bne.n	80062d0 <RCC_Delay+0x1c>
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr
 80062e8:	20000044 	.word	0x20000044
 80062ec:	10624dd3 	.word	0x10624dd3

080062f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006310:	4b4f      	ldr	r3, [pc, #316]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b4c      	ldr	r3, [pc, #304]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4a4b      	ldr	r2, [pc, #300]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006326:	61d3      	str	r3, [r2, #28]
 8006328:	4b49      	ldr	r3, [pc, #292]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	4b46      	ldr	r3, [pc, #280]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d118      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a42      	ldr	r2, [pc, #264]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006350:	f7fc fee2 	bl	8003118 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006356:	e008      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fc fede 	bl	8003118 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e06d      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636a:	4b3a      	ldr	r3, [pc, #232]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006376:	4b36      	ldr	r3, [pc, #216]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02e      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d027      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006394:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063a4:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063aa:	4a29      	ldr	r2, [pc, #164]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d014      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fc fead 	bl	8003118 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fc fea9 	bl	8003118 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e036      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ee      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4917      	ldr	r1, [pc, #92]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d105      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006414:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	490b      	ldr	r1, [pc, #44]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4904      	ldr	r1, [pc, #16]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
 8006458:	42420440 	.word	0x42420440

0800645c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b10      	cmp	r3, #16
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b10      	cmp	r3, #16
 8006482:	f200 808a 	bhi.w	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d045      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d075      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006492:	e082      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800649a:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d07b      	beq.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	0c9b      	lsrs	r3, r3, #18
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80064b0:	5cd3      	ldrb	r3, [r2, r3]
 80064b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d015      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064be:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	0c5b      	lsrs	r3, r3, #17
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	4a3b      	ldr	r2, [pc, #236]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80064ca:	5cd3      	ldrb	r3, [r2, r3]
 80064cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80064d8:	4a38      	ldr	r2, [pc, #224]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e004      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4a34      	ldr	r2, [pc, #208]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80064f4:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006500:	d102      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	61bb      	str	r3, [r7, #24]
      break;
 8006506:	e04a      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	61bb      	str	r3, [r7, #24]
      break;
 8006516:	e042      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006528:	d108      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e01f      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006546:	d109      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006554:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e00f      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	d11c      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006568:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d016      	beq.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006574:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006578:	61bb      	str	r3, [r7, #24]
      break;
 800657a:	e012      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800657c:	e011      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800657e:	f7ff fe85 	bl	800628c <HAL_RCC_GetPCLK2Freq>
 8006582:	4602      	mov	r2, r0
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	0b9b      	lsrs	r3, r3, #14
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	3301      	adds	r3, #1
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fbb2 f3f3 	udiv	r3, r2, r3
 8006596:	61bb      	str	r3, [r7, #24]
      break;
 8006598:	e004      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800659a:	bf00      	nop
 800659c:	e002      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80065a2:	bf00      	nop
    }
  }
  return (frequency);
 80065a4:	69bb      	ldr	r3, [r7, #24]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	08008bd4 	.word	0x08008bd4
 80065b8:	08008be4 	.word	0x08008be4
 80065bc:	007a1200 	.word	0x007a1200
 80065c0:	003d0900 	.word	0x003d0900
 80065c4:	aaaaaaab 	.word	0xaaaaaaab

080065c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e041      	b.n	800665e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fc fc16 	bl	8002e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f000 fc7a 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d001      	beq.n	8006680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e032      	b.n	80066e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <HAL_TIM_Base_Start+0x88>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <HAL_TIM_Base_Start+0x48>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669a:	d009      	beq.n	80066b0 <HAL_TIM_Base_Start+0x48>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <HAL_TIM_Base_Start+0x8c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_TIM_Base_Start+0x48>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <HAL_TIM_Base_Start+0x90>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d111      	bne.n	80066d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b06      	cmp	r3, #6
 80066c0:	d010      	beq.n	80066e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0201 	orr.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d2:	e007      	b.n	80066e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800

080066fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e03a      	b.n	800678a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a18      	ldr	r2, [pc, #96]	; (8006794 <HAL_TIM_Base_Start_IT+0x98>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x58>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d009      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x58>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <HAL_TIM_Base_Start_IT+0x9c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x58>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a13      	ldr	r2, [pc, #76]	; (800679c <HAL_TIM_Base_Start_IT+0xa0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d111      	bne.n	8006778 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d010      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	e007      	b.n	8006788 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800

080067a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e041      	b.n	8006836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f839 	bl	800683e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f000 fb8e 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start+0x24>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e022      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d109      	bne.n	800688e <HAL_TIM_PWM_Start+0x3e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e015      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start+0x58>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e008      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e05e      	b.n	8006980 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x82>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	e013      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x92>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e0:	e00b      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_PWM_Start+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	e003      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fd7c 	bl	8007400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <HAL_TIM_PWM_Start+0x138>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d107      	bne.n	8006922 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <HAL_TIM_PWM_Start+0x138>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_TIM_PWM_Start+0xfa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d009      	beq.n	800694a <HAL_TIM_PWM_Start+0xfa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a14      	ldr	r2, [pc, #80]	; (800698c <HAL_TIM_PWM_Start+0x13c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_TIM_PWM_Start+0xfa>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a12      	ldr	r2, [pc, #72]	; (8006990 <HAL_TIM_PWM_Start+0x140>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d111      	bne.n	800696e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b06      	cmp	r3, #6
 800695a:	d010      	beq.n	800697e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696c:	e007      	b.n	800697e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0201 	orr.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800

08006994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d122      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d11b      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0202 	mvn.w	r2, #2
 80069c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa76 	bl	8006ec8 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa69 	bl	8006eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa78 	bl	8006eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d122      	bne.n	8006a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d11b      	bne.n	8006a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0204 	mvn.w	r2, #4
 8006a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa4c 	bl	8006ec8 <HAL_TIM_IC_CaptureCallback>
 8006a30:	e005      	b.n	8006a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa3f 	bl	8006eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa4e 	bl	8006eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d122      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d11b      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0208 	mvn.w	r2, #8
 8006a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa22 	bl	8006ec8 <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa15 	bl	8006eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa24 	bl	8006eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d122      	bne.n	8006aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b10      	cmp	r3, #16
 8006ab2:	d11b      	bne.n	8006aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0210 	mvn.w	r2, #16
 8006abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9f8 	bl	8006ec8 <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9eb 	bl	8006eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9fa 	bl	8006eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10e      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d107      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0201 	mvn.w	r2, #1
 8006b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb ffdc 	bl	8002ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d10e      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b30:	2b80      	cmp	r3, #128	; 0x80
 8006b32:	d107      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fd3a 	bl	80075b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d10e      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d107      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9be 	bl	8006eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d10e      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0220 	mvn.w	r2, #32
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fd05 	bl	80075a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e0ae      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b0c      	cmp	r3, #12
 8006bce:	f200 809f 	bhi.w	8006d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006c0d 	.word	0x08006c0d
 8006bdc:	08006d11 	.word	0x08006d11
 8006be0:	08006d11 	.word	0x08006d11
 8006be4:	08006d11 	.word	0x08006d11
 8006be8:	08006c4d 	.word	0x08006c4d
 8006bec:	08006d11 	.word	0x08006d11
 8006bf0:	08006d11 	.word	0x08006d11
 8006bf4:	08006d11 	.word	0x08006d11
 8006bf8:	08006c8f 	.word	0x08006c8f
 8006bfc:	08006d11 	.word	0x08006d11
 8006c00:	08006d11 	.word	0x08006d11
 8006c04:	08006d11 	.word	0x08006d11
 8006c08:	08006ccf 	.word	0x08006ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f9d6 	bl	8006fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0208 	orr.w	r2, r2, #8
 8006c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0204 	bic.w	r2, r2, #4
 8006c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6999      	ldr	r1, [r3, #24]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	619a      	str	r2, [r3, #24]
      break;
 8006c4a:	e064      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fa1c 	bl	8007090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6999      	ldr	r1, [r3, #24]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	021a      	lsls	r2, r3, #8
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	619a      	str	r2, [r3, #24]
      break;
 8006c8c:	e043      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fa65 	bl	8007164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0208 	orr.w	r2, r2, #8
 8006ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0204 	bic.w	r2, r2, #4
 8006cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69d9      	ldr	r1, [r3, #28]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	61da      	str	r2, [r3, #28]
      break;
 8006ccc:	e023      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 faaf 	bl	8007238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69d9      	ldr	r1, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	021a      	lsls	r2, r3, #8
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	61da      	str	r2, [r3, #28]
      break;
 8006d0e:	e002      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
      break;
 8006d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_TIM_ConfigClockSource+0x1c>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e0b4      	b.n	8006eae <HAL_TIM_ConfigClockSource+0x186>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7c:	d03e      	beq.n	8006dfc <HAL_TIM_ConfigClockSource+0xd4>
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d82:	f200 8087 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8a:	f000 8086 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x172>
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d87f      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b70      	cmp	r3, #112	; 0x70
 8006d96:	d01a      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xa6>
 8006d98:	2b70      	cmp	r3, #112	; 0x70
 8006d9a:	d87b      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b60      	cmp	r3, #96	; 0x60
 8006d9e:	d050      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x11a>
 8006da0:	2b60      	cmp	r3, #96	; 0x60
 8006da2:	d877      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b50      	cmp	r3, #80	; 0x50
 8006da6:	d03c      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0xfa>
 8006da8:	2b50      	cmp	r3, #80	; 0x50
 8006daa:	d873      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d058      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x13a>
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d86f      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006db4:	2b30      	cmp	r3, #48	; 0x30
 8006db6:	d064      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x15a>
 8006db8:	2b30      	cmp	r3, #48	; 0x30
 8006dba:	d86b      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d060      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x15a>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d867      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05c      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x15a>
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d05a      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x15a>
 8006dcc:	e062      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f000 faf0 	bl	80073c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	609a      	str	r2, [r3, #8]
      break;
 8006dfa:	e04f      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6899      	ldr	r1, [r3, #8]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f000 fad9 	bl	80073c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e1e:	609a      	str	r2, [r3, #8]
      break;
 8006e20:	e03c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fa50 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2150      	movs	r1, #80	; 0x50
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 faa7 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006e40:	e02c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6859      	ldr	r1, [r3, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f000 fa6e 	bl	8007330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2160      	movs	r1, #96	; 0x60
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fa97 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006e60:	e01c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f000 fa30 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2140      	movs	r1, #64	; 0x40
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fa87 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006e80:	e00c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f000 fa7e 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006e92:	e003      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e000      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
	...

08006f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <TIM_Base_SetConfig+0xb8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <TIM_Base_SetConfig+0x30>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1e:	d007      	beq.n	8006f30 <TIM_Base_SetConfig+0x30>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <TIM_Base_SetConfig+0xbc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_Base_SetConfig+0x30>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <TIM_Base_SetConfig+0xc0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d108      	bne.n	8006f42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1c      	ldr	r2, [pc, #112]	; (8006fb8 <TIM_Base_SetConfig+0xb8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_Base_SetConfig+0x62>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d007      	beq.n	8006f62 <TIM_Base_SetConfig+0x62>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <TIM_Base_SetConfig+0xbc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_Base_SetConfig+0x62>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <TIM_Base_SetConfig+0xc0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d108      	bne.n	8006f74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <TIM_Base_SetConfig+0xb8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d103      	bne.n	8006fa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	615a      	str	r2, [r3, #20]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800

08006fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f023 0201 	bic.w	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f023 0302 	bic.w	r3, r3, #2
 800700c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1c      	ldr	r2, [pc, #112]	; (800708c <TIM_OC1_SetConfig+0xc8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10c      	bne.n	800703a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f023 0308 	bic.w	r3, r3, #8
 8007026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f023 0304 	bic.w	r3, r3, #4
 8007038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a13      	ldr	r2, [pc, #76]	; (800708c <TIM_OC1_SetConfig+0xc8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d111      	bne.n	8007066 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	621a      	str	r2, [r3, #32]
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40012c00 	.word	0x40012c00

08007090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f023 0210 	bic.w	r2, r3, #16
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0320 	bic.w	r3, r3, #32
 80070da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <TIM_OC2_SetConfig+0xd0>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10d      	bne.n	800710c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <TIM_OC2_SetConfig+0xd0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d113      	bne.n	800713c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	40012c00 	.word	0x40012c00

08007164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <TIM_OC3_SetConfig+0xd0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10d      	bne.n	80071de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a14      	ldr	r2, [pc, #80]	; (8007234 <TIM_OC3_SetConfig+0xd0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d113      	bne.n	800720e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40012c00 	.word	0x40012c00

08007238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <TIM_OC4_SetConfig+0x98>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d109      	bne.n	80072ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800729e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	019b      	lsls	r3, r3, #6
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	621a      	str	r2, [r3, #32]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00

080072d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 030a 	bic.w	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0210 	bic.w	r2, r3, #16
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800735a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	031b      	lsls	r3, r3, #12
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800736c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr

0800738e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f043 0307 	orr.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b087      	sub	sp, #28
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	021a      	lsls	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	609a      	str	r2, [r3, #8]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	2201      	movs	r2, #1
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	43db      	mvns	r3, r3
 8007422:	401a      	ands	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	431a      	orrs	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800745c:	2302      	movs	r3, #2
 800745e:	e046      	b.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ac:	d009      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a12      	ldr	r2, [pc, #72]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a10      	ldr	r2, [pc, #64]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d10c      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800

08007504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800751c:	2302      	movs	r3, #2
 800751e:	e03d      	b.n	800759c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
	...

080075cc <__errno>:
 80075cc:	4b01      	ldr	r3, [pc, #4]	; (80075d4 <__errno+0x8>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000050 	.word	0x20000050

080075d8 <__libc_init_array>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	2600      	movs	r6, #0
 80075dc:	4d0c      	ldr	r5, [pc, #48]	; (8007610 <__libc_init_array+0x38>)
 80075de:	4c0d      	ldr	r4, [pc, #52]	; (8007614 <__libc_init_array+0x3c>)
 80075e0:	1b64      	subs	r4, r4, r5
 80075e2:	10a4      	asrs	r4, r4, #2
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	d109      	bne.n	80075fc <__libc_init_array+0x24>
 80075e8:	f001 fad0 	bl	8008b8c <_init>
 80075ec:	2600      	movs	r6, #0
 80075ee:	4d0a      	ldr	r5, [pc, #40]	; (8007618 <__libc_init_array+0x40>)
 80075f0:	4c0a      	ldr	r4, [pc, #40]	; (800761c <__libc_init_array+0x44>)
 80075f2:	1b64      	subs	r4, r4, r5
 80075f4:	10a4      	asrs	r4, r4, #2
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	d105      	bne.n	8007606 <__libc_init_array+0x2e>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007600:	4798      	blx	r3
 8007602:	3601      	adds	r6, #1
 8007604:	e7ee      	b.n	80075e4 <__libc_init_array+0xc>
 8007606:	f855 3b04 	ldr.w	r3, [r5], #4
 800760a:	4798      	blx	r3
 800760c:	3601      	adds	r6, #1
 800760e:	e7f2      	b.n	80075f6 <__libc_init_array+0x1e>
 8007610:	08008df8 	.word	0x08008df8
 8007614:	08008df8 	.word	0x08008df8
 8007618:	08008df8 	.word	0x08008df8
 800761c:	08008dfc 	.word	0x08008dfc

08007620 <memset>:
 8007620:	4603      	mov	r3, r0
 8007622:	4402      	add	r2, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <cos>:
 8007630:	b530      	push	{r4, r5, lr}
 8007632:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <cos+0x84>)
 8007634:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007638:	4293      	cmp	r3, r2
 800763a:	b087      	sub	sp, #28
 800763c:	dc06      	bgt.n	800764c <cos+0x1c>
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	b007      	add	sp, #28
 8007644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007648:	f000 bbd6 	b.w	8007df8 <__kernel_cos>
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <cos+0x88>)
 800764e:	4293      	cmp	r3, r2
 8007650:	dd05      	ble.n	800765e <cos+0x2e>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	f7f8 fd7f 	bl	8000158 <__aeabi_dsub>
 800765a:	b007      	add	sp, #28
 800765c:	bd30      	pop	{r4, r5, pc}
 800765e:	aa02      	add	r2, sp, #8
 8007660:	f000 f89a 	bl	8007798 <__ieee754_rem_pio2>
 8007664:	f000 0003 	and.w	r0, r0, #3
 8007668:	2801      	cmp	r0, #1
 800766a:	d009      	beq.n	8007680 <cos+0x50>
 800766c:	2802      	cmp	r0, #2
 800766e:	d011      	beq.n	8007694 <cos+0x64>
 8007670:	b9b8      	cbnz	r0, 80076a2 <cos+0x72>
 8007672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767a:	f000 fbbd 	bl	8007df8 <__kernel_cos>
 800767e:	e7ec      	b.n	800765a <cos+0x2a>
 8007680:	9000      	str	r0, [sp, #0]
 8007682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768a:	f000 ffb5 	bl	80085f8 <__kernel_sin>
 800768e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007692:	e7e2      	b.n	800765a <cos+0x2a>
 8007694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769c:	f000 fbac 	bl	8007df8 <__kernel_cos>
 80076a0:	e7f5      	b.n	800768e <cos+0x5e>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ae:	f000 ffa3 	bl	80085f8 <__kernel_sin>
 80076b2:	e7d2      	b.n	800765a <cos+0x2a>
 80076b4:	3fe921fb 	.word	0x3fe921fb
 80076b8:	7fefffff 	.word	0x7fefffff

080076bc <sin>:
 80076bc:	b530      	push	{r4, r5, lr}
 80076be:	4a20      	ldr	r2, [pc, #128]	; (8007740 <sin+0x84>)
 80076c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076c4:	4293      	cmp	r3, r2
 80076c6:	b087      	sub	sp, #28
 80076c8:	dc06      	bgt.n	80076d8 <sin+0x1c>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2200      	movs	r2, #0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	f000 ff91 	bl	80085f8 <__kernel_sin>
 80076d6:	e006      	b.n	80076e6 <sin+0x2a>
 80076d8:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <sin+0x88>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	dd05      	ble.n	80076ea <sin+0x2e>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	f7f8 fd39 	bl	8000158 <__aeabi_dsub>
 80076e6:	b007      	add	sp, #28
 80076e8:	bd30      	pop	{r4, r5, pc}
 80076ea:	aa02      	add	r2, sp, #8
 80076ec:	f000 f854 	bl	8007798 <__ieee754_rem_pio2>
 80076f0:	f000 0003 	and.w	r0, r0, #3
 80076f4:	2801      	cmp	r0, #1
 80076f6:	d009      	beq.n	800770c <sin+0x50>
 80076f8:	2802      	cmp	r0, #2
 80076fa:	d00e      	beq.n	800771a <sin+0x5e>
 80076fc:	b9c0      	cbnz	r0, 8007730 <sin+0x74>
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	2301      	movs	r3, #1
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770a:	e7e2      	b.n	80076d2 <sin+0x16>
 800770c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f000 fb70 	bl	8007df8 <__kernel_cos>
 8007718:	e7e5      	b.n	80076e6 <sin+0x2a>
 800771a:	2301      	movs	r3, #1
 800771c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007726:	f000 ff67 	bl	80085f8 <__kernel_sin>
 800772a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800772e:	e7da      	b.n	80076e6 <sin+0x2a>
 8007730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007738:	f000 fb5e 	bl	8007df8 <__kernel_cos>
 800773c:	e7f5      	b.n	800772a <sin+0x6e>
 800773e:	bf00      	nop
 8007740:	3fe921fb 	.word	0x3fe921fb
 8007744:	7fefffff 	.word	0x7fefffff

08007748 <sqrt>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	f000 fa1b 	bl	8007b88 <__ieee754_sqrt>
 8007752:	4632      	mov	r2, r6
 8007754:	4604      	mov	r4, r0
 8007756:	460d      	mov	r5, r1
 8007758:	463b      	mov	r3, r7
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f94d 	bl	80009fc <__aeabi_dcmpun>
 8007762:	b990      	cbnz	r0, 800778a <sqrt+0x42>
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f9 f91e 	bl	80009ac <__aeabi_dcmplt>
 8007770:	b158      	cbz	r0, 800778a <sqrt+0x42>
 8007772:	f7ff ff2b 	bl	80075cc <__errno>
 8007776:	2321      	movs	r3, #33	; 0x21
 8007778:	2200      	movs	r2, #0
 800777a:	6003      	str	r3, [r0, #0]
 800777c:	2300      	movs	r3, #0
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	f7f8 ffcb 	bl	800071c <__aeabi_ddiv>
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007790 <atan2f>:
 8007790:	f000 baaa 	b.w	8007ce8 <__ieee754_atan2f>
 8007794:	0000      	movs	r0, r0
	...

08007798 <__ieee754_rem_pio2>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	4614      	mov	r4, r2
 800779e:	4ac4      	ldr	r2, [pc, #784]	; (8007ab0 <__ieee754_rem_pio2+0x318>)
 80077a0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80077a4:	b08d      	sub	sp, #52	; 0x34
 80077a6:	4592      	cmp	sl, r2
 80077a8:	9104      	str	r1, [sp, #16]
 80077aa:	dc07      	bgt.n	80077bc <__ieee754_rem_pio2+0x24>
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	e9c4 0100 	strd	r0, r1, [r4]
 80077b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80077b8:	2500      	movs	r5, #0
 80077ba:	e024      	b.n	8007806 <__ieee754_rem_pio2+0x6e>
 80077bc:	4abd      	ldr	r2, [pc, #756]	; (8007ab4 <__ieee754_rem_pio2+0x31c>)
 80077be:	4592      	cmp	sl, r2
 80077c0:	dc72      	bgt.n	80078a8 <__ieee754_rem_pio2+0x110>
 80077c2:	9b04      	ldr	r3, [sp, #16]
 80077c4:	4dbc      	ldr	r5, [pc, #752]	; (8007ab8 <__ieee754_rem_pio2+0x320>)
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8007a78 <__ieee754_rem_pio2+0x2e0>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	dd36      	ble.n	800783e <__ieee754_rem_pio2+0xa6>
 80077d0:	f7f8 fcc2 	bl	8000158 <__aeabi_dsub>
 80077d4:	45aa      	cmp	sl, r5
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	d018      	beq.n	800780e <__ieee754_rem_pio2+0x76>
 80077dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8007a80 <__ieee754_rem_pio2+0x2e8>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fcb9 	bl	8000158 <__aeabi_dsub>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4630      	mov	r0, r6
 80077ec:	e9c4 2300 	strd	r2, r3, [r4]
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f8 fcb1 	bl	8000158 <__aeabi_dsub>
 80077f6:	a3a2      	add	r3, pc, #648	; (adr r3, 8007a80 <__ieee754_rem_pio2+0x2e8>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f8 fcac 	bl	8000158 <__aeabi_dsub>
 8007800:	2501      	movs	r5, #1
 8007802:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007806:	4628      	mov	r0, r5
 8007808:	b00d      	add	sp, #52	; 0x34
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	a39e      	add	r3, pc, #632	; (adr r3, 8007a88 <__ieee754_rem_pio2+0x2f0>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fca0 	bl	8000158 <__aeabi_dsub>
 8007818:	a39d      	add	r3, pc, #628	; (adr r3, 8007a90 <__ieee754_rem_pio2+0x2f8>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f8 fc99 	bl	8000158 <__aeabi_dsub>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4630      	mov	r0, r6
 800782c:	e9c4 2300 	strd	r2, r3, [r4]
 8007830:	4639      	mov	r1, r7
 8007832:	f7f8 fc91 	bl	8000158 <__aeabi_dsub>
 8007836:	a396      	add	r3, pc, #600	; (adr r3, 8007a90 <__ieee754_rem_pio2+0x2f8>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	e7de      	b.n	80077fc <__ieee754_rem_pio2+0x64>
 800783e:	f7f8 fc8d 	bl	800015c <__adddf3>
 8007842:	45aa      	cmp	sl, r5
 8007844:	4606      	mov	r6, r0
 8007846:	460f      	mov	r7, r1
 8007848:	d016      	beq.n	8007878 <__ieee754_rem_pio2+0xe0>
 800784a:	a38d      	add	r3, pc, #564	; (adr r3, 8007a80 <__ieee754_rem_pio2+0x2e8>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fc84 	bl	800015c <__adddf3>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4630      	mov	r0, r6
 800785a:	e9c4 2300 	strd	r2, r3, [r4]
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fc7a 	bl	8000158 <__aeabi_dsub>
 8007864:	a386      	add	r3, pc, #536	; (adr r3, 8007a80 <__ieee754_rem_pio2+0x2e8>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fc77 	bl	800015c <__adddf3>
 800786e:	f04f 35ff 	mov.w	r5, #4294967295
 8007872:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007876:	e7c6      	b.n	8007806 <__ieee754_rem_pio2+0x6e>
 8007878:	a383      	add	r3, pc, #524	; (adr r3, 8007a88 <__ieee754_rem_pio2+0x2f0>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fc6d 	bl	800015c <__adddf3>
 8007882:	a383      	add	r3, pc, #524	; (adr r3, 8007a90 <__ieee754_rem_pio2+0x2f8>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	f7f8 fc66 	bl	800015c <__adddf3>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4630      	mov	r0, r6
 8007896:	e9c4 2300 	strd	r2, r3, [r4]
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fc5c 	bl	8000158 <__aeabi_dsub>
 80078a0:	a37b      	add	r3, pc, #492	; (adr r3, 8007a90 <__ieee754_rem_pio2+0x2f8>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	e7e0      	b.n	800786a <__ieee754_rem_pio2+0xd2>
 80078a8:	4a84      	ldr	r2, [pc, #528]	; (8007abc <__ieee754_rem_pio2+0x324>)
 80078aa:	4592      	cmp	sl, r2
 80078ac:	f300 80d5 	bgt.w	8007a5a <__ieee754_rem_pio2+0x2c2>
 80078b0:	f000 ff58 	bl	8008764 <fabs>
 80078b4:	a378      	add	r3, pc, #480	; (adr r3, 8007a98 <__ieee754_rem_pio2+0x300>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	f7f8 fe03 	bl	80004c8 <__aeabi_dmul>
 80078c2:	2200      	movs	r2, #0
 80078c4:	4b7e      	ldr	r3, [pc, #504]	; (8007ac0 <__ieee754_rem_pio2+0x328>)
 80078c6:	f7f8 fc49 	bl	800015c <__adddf3>
 80078ca:	f7f9 f8ad 	bl	8000a28 <__aeabi_d2iz>
 80078ce:	4605      	mov	r5, r0
 80078d0:	f7f8 fd90 	bl	80003f4 <__aeabi_i2d>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078dc:	a366      	add	r3, pc, #408	; (adr r3, 8007a78 <__ieee754_rem_pio2+0x2e0>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fdf1 	bl	80004c8 <__aeabi_dmul>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f8 fc33 	bl	8000158 <__aeabi_dsub>
 80078f2:	a363      	add	r3, pc, #396	; (adr r3, 8007a80 <__ieee754_rem_pio2+0x2e8>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4680      	mov	r8, r0
 80078fa:	4689      	mov	r9, r1
 80078fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007900:	f7f8 fde2 	bl	80004c8 <__aeabi_dmul>
 8007904:	2d1f      	cmp	r5, #31
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	dc0e      	bgt.n	800792a <__ieee754_rem_pio2+0x192>
 800790c:	4b6d      	ldr	r3, [pc, #436]	; (8007ac4 <__ieee754_rem_pio2+0x32c>)
 800790e:	1e6a      	subs	r2, r5, #1
 8007910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007914:	4553      	cmp	r3, sl
 8007916:	d008      	beq.n	800792a <__ieee754_rem_pio2+0x192>
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f8 fc1a 	bl	8000158 <__aeabi_dsub>
 8007924:	e9c4 0100 	strd	r0, r1, [r4]
 8007928:	e013      	b.n	8007952 <__ieee754_rem_pio2+0x1ba>
 800792a:	463b      	mov	r3, r7
 800792c:	4632      	mov	r2, r6
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f8 fc11 	bl	8000158 <__aeabi_dsub>
 8007936:	ea4f 532a 	mov.w	r3, sl, asr #20
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007940:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007944:	f1ba 0f10 	cmp.w	sl, #16
 8007948:	dc1f      	bgt.n	800798a <__ieee754_rem_pio2+0x1f2>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	e9c4 2300 	strd	r2, r3, [r4]
 8007952:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007956:	4640      	mov	r0, r8
 8007958:	4653      	mov	r3, sl
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fbfc 	bl	8000158 <__aeabi_dsub>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	f7f8 fbf8 	bl	8000158 <__aeabi_dsub>
 8007968:	460b      	mov	r3, r1
 800796a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800796e:	9904      	ldr	r1, [sp, #16]
 8007970:	4602      	mov	r2, r0
 8007972:	2900      	cmp	r1, #0
 8007974:	f6bf af47 	bge.w	8007806 <__ieee754_rem_pio2+0x6e>
 8007978:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800797c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007980:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007984:	60e3      	str	r3, [r4, #12]
 8007986:	426d      	negs	r5, r5
 8007988:	e73d      	b.n	8007806 <__ieee754_rem_pio2+0x6e>
 800798a:	a33f      	add	r3, pc, #252	; (adr r3, 8007a88 <__ieee754_rem_pio2+0x2f0>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007994:	f7f8 fd98 	bl	80004c8 <__aeabi_dmul>
 8007998:	4606      	mov	r6, r0
 800799a:	460f      	mov	r7, r1
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f8 fbd8 	bl	8000158 <__aeabi_dsub>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4682      	mov	sl, r0
 80079ae:	468b      	mov	fp, r1
 80079b0:	4640      	mov	r0, r8
 80079b2:	4649      	mov	r1, r9
 80079b4:	f7f8 fbd0 	bl	8000158 <__aeabi_dsub>
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	f7f8 fbcc 	bl	8000158 <__aeabi_dsub>
 80079c0:	a333      	add	r3, pc, #204	; (adr r3, 8007a90 <__ieee754_rem_pio2+0x2f8>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	4606      	mov	r6, r0
 80079c8:	460f      	mov	r7, r1
 80079ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ce:	f7f8 fd7b 	bl	80004c8 <__aeabi_dmul>
 80079d2:	4632      	mov	r2, r6
 80079d4:	463b      	mov	r3, r7
 80079d6:	f7f8 fbbf 	bl	8000158 <__aeabi_dsub>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 fbb7 	bl	8000158 <__aeabi_dsub>
 80079ea:	9a05      	ldr	r2, [sp, #20]
 80079ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b31      	cmp	r3, #49	; 0x31
 80079f4:	dc06      	bgt.n	8007a04 <__ieee754_rem_pio2+0x26c>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	46d0      	mov	r8, sl
 80079fc:	46d9      	mov	r9, fp
 80079fe:	e9c4 2300 	strd	r2, r3, [r4]
 8007a02:	e7a6      	b.n	8007952 <__ieee754_rem_pio2+0x1ba>
 8007a04:	a326      	add	r3, pc, #152	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0e:	f7f8 fd5b 	bl	80004c8 <__aeabi_dmul>
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	f7f8 fb9b 	bl	8000158 <__aeabi_dsub>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4680      	mov	r8, r0
 8007a28:	4689      	mov	r9, r1
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	f7f8 fb93 	bl	8000158 <__aeabi_dsub>
 8007a32:	4632      	mov	r2, r6
 8007a34:	463b      	mov	r3, r7
 8007a36:	f7f8 fb8f 	bl	8000158 <__aeabi_dsub>
 8007a3a:	a31b      	add	r3, pc, #108	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x310>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a48:	f7f8 fd3e 	bl	80004c8 <__aeabi_dmul>
 8007a4c:	4632      	mov	r2, r6
 8007a4e:	463b      	mov	r3, r7
 8007a50:	f7f8 fb82 	bl	8000158 <__aeabi_dsub>
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	e75e      	b.n	8007918 <__ieee754_rem_pio2+0x180>
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	; (8007ac8 <__ieee754_rem_pio2+0x330>)
 8007a5c:	4592      	cmp	sl, r2
 8007a5e:	dd35      	ble.n	8007acc <__ieee754_rem_pio2+0x334>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	f7f8 fb78 	bl	8000158 <__aeabi_dsub>
 8007a68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a6c:	e9c4 0100 	strd	r0, r1, [r4]
 8007a70:	e6a2      	b.n	80077b8 <__ieee754_rem_pio2+0x20>
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	54400000 	.word	0x54400000
 8007a7c:	3ff921fb 	.word	0x3ff921fb
 8007a80:	1a626331 	.word	0x1a626331
 8007a84:	3dd0b461 	.word	0x3dd0b461
 8007a88:	1a600000 	.word	0x1a600000
 8007a8c:	3dd0b461 	.word	0x3dd0b461
 8007a90:	2e037073 	.word	0x2e037073
 8007a94:	3ba3198a 	.word	0x3ba3198a
 8007a98:	6dc9c883 	.word	0x6dc9c883
 8007a9c:	3fe45f30 	.word	0x3fe45f30
 8007aa0:	2e000000 	.word	0x2e000000
 8007aa4:	3ba3198a 	.word	0x3ba3198a
 8007aa8:	252049c1 	.word	0x252049c1
 8007aac:	397b839a 	.word	0x397b839a
 8007ab0:	3fe921fb 	.word	0x3fe921fb
 8007ab4:	4002d97b 	.word	0x4002d97b
 8007ab8:	3ff921fb 	.word	0x3ff921fb
 8007abc:	413921fb 	.word	0x413921fb
 8007ac0:	3fe00000 	.word	0x3fe00000
 8007ac4:	08008be8 	.word	0x08008be8
 8007ac8:	7fefffff 	.word	0x7fefffff
 8007acc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007ad0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007ad4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007ad8:	460f      	mov	r7, r1
 8007ada:	4606      	mov	r6, r0
 8007adc:	f7f8 ffa4 	bl	8000a28 <__aeabi_d2iz>
 8007ae0:	f7f8 fc88 	bl	80003f4 <__aeabi_i2d>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007af0:	f7f8 fb32 	bl	8000158 <__aeabi_dsub>
 8007af4:	2200      	movs	r2, #0
 8007af6:	4b22      	ldr	r3, [pc, #136]	; (8007b80 <__ieee754_rem_pio2+0x3e8>)
 8007af8:	f7f8 fce6 	bl	80004c8 <__aeabi_dmul>
 8007afc:	460f      	mov	r7, r1
 8007afe:	4606      	mov	r6, r0
 8007b00:	f7f8 ff92 	bl	8000a28 <__aeabi_d2iz>
 8007b04:	f7f8 fc76 	bl	80003f4 <__aeabi_i2d>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b14:	f7f8 fb20 	bl	8000158 <__aeabi_dsub>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4b19      	ldr	r3, [pc, #100]	; (8007b80 <__ieee754_rem_pio2+0x3e8>)
 8007b1c:	f7f8 fcd4 	bl	80004c8 <__aeabi_dmul>
 8007b20:	f04f 0803 	mov.w	r8, #3
 8007b24:	2600      	movs	r6, #0
 8007b26:	2700      	movs	r7, #0
 8007b28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b2c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007b30:	4632      	mov	r2, r6
 8007b32:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8007b36:	463b      	mov	r3, r7
 8007b38:	46c2      	mov	sl, r8
 8007b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b3e:	f7f8 ff2b 	bl	8000998 <__aeabi_dcmpeq>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d1f4      	bne.n	8007b30 <__ieee754_rem_pio2+0x398>
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <__ieee754_rem_pio2+0x3ec>)
 8007b48:	462a      	mov	r2, r5
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	4621      	mov	r1, r4
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	a806      	add	r0, sp, #24
 8007b54:	4653      	mov	r3, sl
 8007b56:	f000 fa0d 	bl	8007f74 <__kernel_rem_pio2>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f6bf ae51 	bge.w	8007806 <__ieee754_rem_pio2+0x6e>
 8007b64:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b6c:	e9c4 2300 	strd	r2, r3, [r4]
 8007b70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007b7c:	e703      	b.n	8007986 <__ieee754_rem_pio2+0x1ee>
 8007b7e:	bf00      	nop
 8007b80:	41700000 	.word	0x41700000
 8007b84:	08008c68 	.word	0x08008c68

08007b88 <__ieee754_sqrt>:
 8007b88:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007ce4 <__ieee754_sqrt+0x15c>
 8007b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b90:	ea3c 0c01 	bics.w	ip, ip, r1
 8007b94:	4606      	mov	r6, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	460c      	mov	r4, r1
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	d10f      	bne.n	8007bc2 <__ieee754_sqrt+0x3a>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	f7f8 fc8f 	bl	80004c8 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 fad3 	bl	800015c <__adddf3>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	dc0e      	bgt.n	8007be4 <__ieee754_sqrt+0x5c>
 8007bc6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007bca:	ea5c 0707 	orrs.w	r7, ip, r7
 8007bce:	d0f4      	beq.n	8007bba <__ieee754_sqrt+0x32>
 8007bd0:	b141      	cbz	r1, 8007be4 <__ieee754_sqrt+0x5c>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	f7f8 fabf 	bl	8000158 <__aeabi_dsub>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	f7f8 fd9d 	bl	800071c <__aeabi_ddiv>
 8007be2:	e7e8      	b.n	8007bb6 <__ieee754_sqrt+0x2e>
 8007be4:	1521      	asrs	r1, r4, #20
 8007be6:	d075      	beq.n	8007cd4 <__ieee754_sqrt+0x14c>
 8007be8:	07cc      	lsls	r4, r1, #31
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007bf2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007bfa:	bf5e      	ittt	pl
 8007bfc:	0fd9      	lsrpl	r1, r3, #31
 8007bfe:	005b      	lslpl	r3, r3, #1
 8007c00:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007c04:	0fd9      	lsrs	r1, r3, #31
 8007c06:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007c0a:	2516      	movs	r5, #22
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c12:	107f      	asrs	r7, r7, #1
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	1846      	adds	r6, r0, r1
 8007c18:	4296      	cmp	r6, r2
 8007c1a:	bfde      	ittt	le
 8007c1c:	1b92      	suble	r2, r2, r6
 8007c1e:	1870      	addle	r0, r6, r1
 8007c20:	1864      	addle	r4, r4, r1
 8007c22:	0052      	lsls	r2, r2, #1
 8007c24:	3d01      	subs	r5, #1
 8007c26:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c2a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c32:	d1f0      	bne.n	8007c16 <__ieee754_sqrt+0x8e>
 8007c34:	4629      	mov	r1, r5
 8007c36:	f04f 0e20 	mov.w	lr, #32
 8007c3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007c3e:	4282      	cmp	r2, r0
 8007c40:	eb06 0c05 	add.w	ip, r6, r5
 8007c44:	dc02      	bgt.n	8007c4c <__ieee754_sqrt+0xc4>
 8007c46:	d113      	bne.n	8007c70 <__ieee754_sqrt+0xe8>
 8007c48:	459c      	cmp	ip, r3
 8007c4a:	d811      	bhi.n	8007c70 <__ieee754_sqrt+0xe8>
 8007c4c:	f1bc 0f00 	cmp.w	ip, #0
 8007c50:	eb0c 0506 	add.w	r5, ip, r6
 8007c54:	da43      	bge.n	8007cde <__ieee754_sqrt+0x156>
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	db41      	blt.n	8007cde <__ieee754_sqrt+0x156>
 8007c5a:	f100 0801 	add.w	r8, r0, #1
 8007c5e:	1a12      	subs	r2, r2, r0
 8007c60:	4640      	mov	r0, r8
 8007c62:	459c      	cmp	ip, r3
 8007c64:	bf88      	it	hi
 8007c66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007c6a:	eba3 030c 	sub.w	r3, r3, ip
 8007c6e:	4431      	add	r1, r6
 8007c70:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007c74:	f1be 0e01 	subs.w	lr, lr, #1
 8007c78:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007c84:	d1db      	bne.n	8007c3e <__ieee754_sqrt+0xb6>
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d006      	beq.n	8007c98 <__ieee754_sqrt+0x110>
 8007c8a:	1c48      	adds	r0, r1, #1
 8007c8c:	bf0b      	itete	eq
 8007c8e:	4671      	moveq	r1, lr
 8007c90:	3101      	addne	r1, #1
 8007c92:	3401      	addeq	r4, #1
 8007c94:	f021 0101 	bicne.w	r1, r1, #1
 8007c98:	1063      	asrs	r3, r4, #1
 8007c9a:	0849      	lsrs	r1, r1, #1
 8007c9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ca0:	07e2      	lsls	r2, r4, #31
 8007ca2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007ca6:	bf48      	it	mi
 8007ca8:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007cac:	460e      	mov	r6, r1
 8007cae:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007cb2:	e782      	b.n	8007bba <__ieee754_sqrt+0x32>
 8007cb4:	0ada      	lsrs	r2, r3, #11
 8007cb6:	3815      	subs	r0, #21
 8007cb8:	055b      	lsls	r3, r3, #21
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d0fa      	beq.n	8007cb4 <__ieee754_sqrt+0x12c>
 8007cbe:	02d5      	lsls	r5, r2, #11
 8007cc0:	d50a      	bpl.n	8007cd8 <__ieee754_sqrt+0x150>
 8007cc2:	f1c1 0420 	rsb	r4, r1, #32
 8007cc6:	fa23 f404 	lsr.w	r4, r3, r4
 8007cca:	1e4d      	subs	r5, r1, #1
 8007ccc:	408b      	lsls	r3, r1
 8007cce:	4322      	orrs	r2, r4
 8007cd0:	1b41      	subs	r1, r0, r5
 8007cd2:	e789      	b.n	8007be8 <__ieee754_sqrt+0x60>
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	e7f0      	b.n	8007cba <__ieee754_sqrt+0x132>
 8007cd8:	0052      	lsls	r2, r2, #1
 8007cda:	3101      	adds	r1, #1
 8007cdc:	e7ef      	b.n	8007cbe <__ieee754_sqrt+0x136>
 8007cde:	4680      	mov	r8, r0
 8007ce0:	e7bd      	b.n	8007c5e <__ieee754_sqrt+0xd6>
 8007ce2:	bf00      	nop
 8007ce4:	7ff00000 	.word	0x7ff00000

08007ce8 <__ieee754_atan2f>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007cee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	dc05      	bgt.n	8007d02 <__ieee754_atan2f+0x1a>
 8007cf6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007cfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007cfe:	4607      	mov	r7, r0
 8007d00:	dd04      	ble.n	8007d0c <__ieee754_atan2f+0x24>
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7f8 ff0e 	bl	8000b24 <__addsf3>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	e011      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007d0c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007d10:	d103      	bne.n	8007d1a <__ieee754_atan2f+0x32>
 8007d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d16:	f000 be29 	b.w	800896c <atanf>
 8007d1a:	178c      	asrs	r4, r1, #30
 8007d1c:	f004 0402 	and.w	r4, r4, #2
 8007d20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007d24:	b932      	cbnz	r2, 8007d34 <__ieee754_atan2f+0x4c>
 8007d26:	2c02      	cmp	r4, #2
 8007d28:	d04c      	beq.n	8007dc4 <__ieee754_atan2f+0xdc>
 8007d2a:	2c03      	cmp	r4, #3
 8007d2c:	d100      	bne.n	8007d30 <__ieee754_atan2f+0x48>
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <__ieee754_atan2f+0xec>)
 8007d30:	4618      	mov	r0, r3
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	b91e      	cbnz	r6, 8007d3e <__ieee754_atan2f+0x56>
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	da4a      	bge.n	8007dd0 <__ieee754_atan2f+0xe8>
 8007d3a:	4b27      	ldr	r3, [pc, #156]	; (8007dd8 <__ieee754_atan2f+0xf0>)
 8007d3c:	e7f8      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007d3e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007d42:	d10e      	bne.n	8007d62 <__ieee754_atan2f+0x7a>
 8007d44:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d48:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d4c:	d105      	bne.n	8007d5a <__ieee754_atan2f+0x72>
 8007d4e:	2c02      	cmp	r4, #2
 8007d50:	d83a      	bhi.n	8007dc8 <__ieee754_atan2f+0xe0>
 8007d52:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <__ieee754_atan2f+0xf4>)
 8007d54:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d58:	e7ea      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007d5a:	2c02      	cmp	r4, #2
 8007d5c:	d836      	bhi.n	8007dcc <__ieee754_atan2f+0xe4>
 8007d5e:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <__ieee754_atan2f+0xf8>)
 8007d60:	e7f8      	b.n	8007d54 <__ieee754_atan2f+0x6c>
 8007d62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d66:	d0e6      	beq.n	8007d36 <__ieee754_atan2f+0x4e>
 8007d68:	1b92      	subs	r2, r2, r6
 8007d6a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8007d6e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007d72:	da17      	bge.n	8007da4 <__ieee754_atan2f+0xbc>
 8007d74:	2900      	cmp	r1, #0
 8007d76:	da01      	bge.n	8007d7c <__ieee754_atan2f+0x94>
 8007d78:	303c      	adds	r0, #60	; 0x3c
 8007d7a:	db15      	blt.n	8007da8 <__ieee754_atan2f+0xc0>
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7f9 f88d 	bl	8000e9c <__aeabi_fdiv>
 8007d82:	f000 feff 	bl	8008b84 <fabsf>
 8007d86:	f000 fdf1 	bl	800896c <atanf>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2c01      	cmp	r4, #1
 8007d8e:	d00d      	beq.n	8007dac <__ieee754_atan2f+0xc4>
 8007d90:	2c02      	cmp	r4, #2
 8007d92:	d00e      	beq.n	8007db2 <__ieee754_atan2f+0xca>
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	d0cb      	beq.n	8007d30 <__ieee754_atan2f+0x48>
 8007d98:	4912      	ldr	r1, [pc, #72]	; (8007de4 <__ieee754_atan2f+0xfc>)
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7f8 fec2 	bl	8000b24 <__addsf3>
 8007da0:	4911      	ldr	r1, [pc, #68]	; (8007de8 <__ieee754_atan2f+0x100>)
 8007da2:	e00c      	b.n	8007dbe <__ieee754_atan2f+0xd6>
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <__ieee754_atan2f+0x104>)
 8007da6:	e7f1      	b.n	8007d8c <__ieee754_atan2f+0xa4>
 8007da8:	2300      	movs	r3, #0
 8007daa:	e7ef      	b.n	8007d8c <__ieee754_atan2f+0xa4>
 8007dac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007db0:	e7be      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007db2:	490c      	ldr	r1, [pc, #48]	; (8007de4 <__ieee754_atan2f+0xfc>)
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7f8 feb5 	bl	8000b24 <__addsf3>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	480a      	ldr	r0, [pc, #40]	; (8007de8 <__ieee754_atan2f+0x100>)
 8007dbe:	f7f8 feaf 	bl	8000b20 <__aeabi_fsub>
 8007dc2:	e7a1      	b.n	8007d08 <__ieee754_atan2f+0x20>
 8007dc4:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <__ieee754_atan2f+0x100>)
 8007dc6:	e7b3      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <__ieee754_atan2f+0x108>)
 8007dca:	e7b1      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e7af      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <__ieee754_atan2f+0x104>)
 8007dd2:	e7ad      	b.n	8007d30 <__ieee754_atan2f+0x48>
 8007dd4:	c0490fdb 	.word	0xc0490fdb
 8007dd8:	bfc90fdb 	.word	0xbfc90fdb
 8007ddc:	08008d70 	.word	0x08008d70
 8007de0:	08008d7c 	.word	0x08008d7c
 8007de4:	33bbbd2e 	.word	0x33bbbd2e
 8007de8:	40490fdb 	.word	0x40490fdb
 8007dec:	3fc90fdb 	.word	0x3fc90fdb
 8007df0:	3f490fdb 	.word	0x3f490fdb
 8007df4:	00000000 	.word	0x00000000

08007df8 <__kernel_cos>:
 8007df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007e00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007e04:	4680      	mov	r8, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	e9cd 2300 	strd	r2, r3, [sp]
 8007e0c:	da04      	bge.n	8007e18 <__kernel_cos+0x20>
 8007e0e:	f7f8 fe0b 	bl	8000a28 <__aeabi_d2iz>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f000 8086 	beq.w	8007f24 <__kernel_cos+0x12c>
 8007e18:	4642      	mov	r2, r8
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fb52 	bl	80004c8 <__aeabi_dmul>
 8007e24:	2200      	movs	r2, #0
 8007e26:	4b4e      	ldr	r3, [pc, #312]	; (8007f60 <__kernel_cos+0x168>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	f7f8 fb4c 	bl	80004c8 <__aeabi_dmul>
 8007e30:	a33f      	add	r3, pc, #252	; (adr r3, 8007f30 <__kernel_cos+0x138>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fb43 	bl	80004c8 <__aeabi_dmul>
 8007e42:	a33d      	add	r3, pc, #244	; (adr r3, 8007f38 <__kernel_cos+0x140>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 f988 	bl	800015c <__adddf3>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fb3a 	bl	80004c8 <__aeabi_dmul>
 8007e54:	a33a      	add	r3, pc, #232	; (adr r3, 8007f40 <__kernel_cos+0x148>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 f97d 	bl	8000158 <__aeabi_dsub>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fb31 	bl	80004c8 <__aeabi_dmul>
 8007e66:	a338      	add	r3, pc, #224	; (adr r3, 8007f48 <__kernel_cos+0x150>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f976 	bl	800015c <__adddf3>
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f7f8 fb28 	bl	80004c8 <__aeabi_dmul>
 8007e78:	a335      	add	r3, pc, #212	; (adr r3, 8007f50 <__kernel_cos+0x158>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 f96b 	bl	8000158 <__aeabi_dsub>
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f7f8 fb1f 	bl	80004c8 <__aeabi_dmul>
 8007e8a:	a333      	add	r3, pc, #204	; (adr r3, 8007f58 <__kernel_cos+0x160>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 f964 	bl	800015c <__adddf3>
 8007e94:	4622      	mov	r2, r4
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 fb16 	bl	80004c8 <__aeabi_dmul>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	462b      	mov	r3, r5
 8007ea0:	f7f8 fb12 	bl	80004c8 <__aeabi_dmul>
 8007ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	460d      	mov	r5, r1
 8007eac:	4640      	mov	r0, r8
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fb0a 	bl	80004c8 <__aeabi_dmul>
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7f8 f94c 	bl	8000158 <__aeabi_dsub>
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <__kernel_cos+0x16c>)
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	429e      	cmp	r6, r3
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	dc0e      	bgt.n	8007ee8 <__kernel_cos+0xf0>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4650      	mov	r0, sl
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	f7f8 f941 	bl	8000158 <__aeabi_dsub>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	2000      	movs	r0, #0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4922      	ldr	r1, [pc, #136]	; (8007f68 <__kernel_cos+0x170>)
 8007ede:	f7f8 f93b 	bl	8000158 <__aeabi_dsub>
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	2400      	movs	r4, #0
 8007eea:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <__kernel_cos+0x174>)
 8007eec:	4622      	mov	r2, r4
 8007eee:	429e      	cmp	r6, r3
 8007ef0:	bfcc      	ite	gt
 8007ef2:	4d1f      	ldrgt	r5, [pc, #124]	; (8007f70 <__kernel_cos+0x178>)
 8007ef4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007ef8:	462b      	mov	r3, r5
 8007efa:	2000      	movs	r0, #0
 8007efc:	491a      	ldr	r1, [pc, #104]	; (8007f68 <__kernel_cos+0x170>)
 8007efe:	f7f8 f92b 	bl	8000158 <__aeabi_dsub>
 8007f02:	4622      	mov	r2, r4
 8007f04:	4606      	mov	r6, r0
 8007f06:	460f      	mov	r7, r1
 8007f08:	462b      	mov	r3, r5
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	f7f8 f923 	bl	8000158 <__aeabi_dsub>
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	f7f8 f91f 	bl	8000158 <__aeabi_dsub>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	e7dc      	b.n	8007ede <__kernel_cos+0xe6>
 8007f24:	2000      	movs	r0, #0
 8007f26:	4910      	ldr	r1, [pc, #64]	; (8007f68 <__kernel_cos+0x170>)
 8007f28:	e7db      	b.n	8007ee2 <__kernel_cos+0xea>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
 8007f30:	be8838d4 	.word	0xbe8838d4
 8007f34:	bda8fae9 	.word	0xbda8fae9
 8007f38:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f3c:	3e21ee9e 	.word	0x3e21ee9e
 8007f40:	809c52ad 	.word	0x809c52ad
 8007f44:	3e927e4f 	.word	0x3e927e4f
 8007f48:	19cb1590 	.word	0x19cb1590
 8007f4c:	3efa01a0 	.word	0x3efa01a0
 8007f50:	16c15177 	.word	0x16c15177
 8007f54:	3f56c16c 	.word	0x3f56c16c
 8007f58:	5555554c 	.word	0x5555554c
 8007f5c:	3fa55555 	.word	0x3fa55555
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	3fd33332 	.word	0x3fd33332
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	3fe90000 	.word	0x3fe90000
 8007f70:	3fd20000 	.word	0x3fd20000

08007f74 <__kernel_rem_pio2>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007f7c:	9308      	str	r3, [sp, #32]
 8007f7e:	9106      	str	r1, [sp, #24]
 8007f80:	4bb6      	ldr	r3, [pc, #728]	; (800825c <__kernel_rem_pio2+0x2e8>)
 8007f82:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007f84:	f112 0f14 	cmn.w	r2, #20
 8007f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f8c:	bfa8      	it	ge
 8007f8e:	1ed4      	subge	r4, r2, #3
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	9b08      	ldr	r3, [sp, #32]
 8007f94:	bfb8      	it	lt
 8007f96:	2400      	movlt	r4, #0
 8007f98:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	bfa4      	itt	ge
 8007fa0:	2318      	movge	r3, #24
 8007fa2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007fa6:	f06f 0317 	mvn.w	r3, #23
 8007faa:	fb04 3303 	mla	r3, r4, r3, r3
 8007fae:	eb03 0b02 	add.w	fp, r3, r2
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	1aa7      	subs	r7, r4, r2
 8007fb8:	eb03 0802 	add.w	r8, r3, r2
 8007fbc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9009      	str	r0, [sp, #36]	; 0x24
 8007fca:	ae20      	add	r6, sp, #128	; 0x80
 8007fcc:	4545      	cmp	r5, r8
 8007fce:	dd14      	ble.n	8007ffa <__kernel_rem_pio2+0x86>
 8007fd0:	f04f 0800 	mov.w	r8, #0
 8007fd4:	9a08      	ldr	r2, [sp, #32]
 8007fd6:	ab20      	add	r3, sp, #128	; 0x80
 8007fd8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8007fdc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	4598      	cmp	r8, r3
 8007fe4:	dc35      	bgt.n	8008052 <__kernel_rem_pio2+0xde>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f1a3 0908 	sub.w	r9, r3, #8
 8007fee:	2300      	movs	r3, #0
 8007ff0:	462f      	mov	r7, r5
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	e9cd 2300 	strd	r2, r3, [sp]
 8007ff8:	e01f      	b.n	800803a <__kernel_rem_pio2+0xc6>
 8007ffa:	42ef      	cmn	r7, r5
 8007ffc:	d40b      	bmi.n	8008016 <__kernel_rem_pio2+0xa2>
 8007ffe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008002:	e9cd 2300 	strd	r2, r3, [sp]
 8008006:	f7f8 f9f5 	bl	80003f4 <__aeabi_i2d>
 800800a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008012:	3501      	adds	r5, #1
 8008014:	e7da      	b.n	8007fcc <__kernel_rem_pio2+0x58>
 8008016:	4610      	mov	r0, r2
 8008018:	4619      	mov	r1, r3
 800801a:	e7f8      	b.n	800800e <__kernel_rem_pio2+0x9a>
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008024:	f7f8 fa50 	bl	80004c8 <__aeabi_dmul>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008030:	f7f8 f894 	bl	800015c <__adddf3>
 8008034:	e9cd 0100 	strd	r0, r1, [sp]
 8008038:	3601      	adds	r6, #1
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	3f08      	subs	r7, #8
 800803e:	429e      	cmp	r6, r3
 8008040:	ddec      	ble.n	800801c <__kernel_rem_pio2+0xa8>
 8008042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008046:	f108 0801 	add.w	r8, r8, #1
 800804a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800804e:	3508      	adds	r5, #8
 8008050:	e7c6      	b.n	8007fe0 <__kernel_rem_pio2+0x6c>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	aa0c      	add	r2, sp, #48	; 0x30
 8008056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800805a:	930b      	str	r3, [sp, #44]	; 0x2c
 800805c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800805e:	9e02      	ldr	r6, [sp, #8]
 8008060:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008064:	930a      	str	r3, [sp, #40]	; 0x28
 8008066:	ab98      	add	r3, sp, #608	; 0x260
 8008068:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800806c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008070:	ab70      	add	r3, sp, #448	; 0x1c0
 8008072:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008076:	46d0      	mov	r8, sl
 8008078:	46b1      	mov	r9, r6
 800807a:	af0c      	add	r7, sp, #48	; 0x30
 800807c:	9700      	str	r7, [sp, #0]
 800807e:	f1b9 0f00 	cmp.w	r9, #0
 8008082:	f1a8 0808 	sub.w	r8, r8, #8
 8008086:	dc71      	bgt.n	800816c <__kernel_rem_pio2+0x1f8>
 8008088:	465a      	mov	r2, fp
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f000 fbef 	bl	8008870 <scalbn>
 8008092:	2200      	movs	r2, #0
 8008094:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	f7f8 fa14 	bl	80004c8 <__aeabi_dmul>
 80080a0:	f000 fb66 	bl	8008770 <floor>
 80080a4:	2200      	movs	r2, #0
 80080a6:	4b6e      	ldr	r3, [pc, #440]	; (8008260 <__kernel_rem_pio2+0x2ec>)
 80080a8:	f7f8 fa0e 	bl	80004c8 <__aeabi_dmul>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4620      	mov	r0, r4
 80080b2:	4629      	mov	r1, r5
 80080b4:	f7f8 f850 	bl	8000158 <__aeabi_dsub>
 80080b8:	460d      	mov	r5, r1
 80080ba:	4604      	mov	r4, r0
 80080bc:	f7f8 fcb4 	bl	8000a28 <__aeabi_d2iz>
 80080c0:	9004      	str	r0, [sp, #16]
 80080c2:	f7f8 f997 	bl	80003f4 <__aeabi_i2d>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 f843 	bl	8000158 <__aeabi_dsub>
 80080d2:	f1bb 0f00 	cmp.w	fp, #0
 80080d6:	4680      	mov	r8, r0
 80080d8:	4689      	mov	r9, r1
 80080da:	dd70      	ble.n	80081be <__kernel_rem_pio2+0x24a>
 80080dc:	1e72      	subs	r2, r6, #1
 80080de:	ab0c      	add	r3, sp, #48	; 0x30
 80080e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80080e4:	9c04      	ldr	r4, [sp, #16]
 80080e6:	f1cb 0118 	rsb	r1, fp, #24
 80080ea:	fa40 f301 	asr.w	r3, r0, r1
 80080ee:	441c      	add	r4, r3
 80080f0:	408b      	lsls	r3, r1
 80080f2:	1ac0      	subs	r0, r0, r3
 80080f4:	ab0c      	add	r3, sp, #48	; 0x30
 80080f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80080fa:	f1cb 0317 	rsb	r3, fp, #23
 80080fe:	9404      	str	r4, [sp, #16]
 8008100:	fa40 f303 	asr.w	r3, r0, r3
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	dd66      	ble.n	80081da <__kernel_rem_pio2+0x266>
 800810c:	2200      	movs	r2, #0
 800810e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008112:	4614      	mov	r4, r2
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	3301      	adds	r3, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	4296      	cmp	r6, r2
 800811c:	f300 80ac 	bgt.w	8008278 <__kernel_rem_pio2+0x304>
 8008120:	f1bb 0f00 	cmp.w	fp, #0
 8008124:	dd07      	ble.n	8008136 <__kernel_rem_pio2+0x1c2>
 8008126:	f1bb 0f01 	cmp.w	fp, #1
 800812a:	f000 80b4 	beq.w	8008296 <__kernel_rem_pio2+0x322>
 800812e:	f1bb 0f02 	cmp.w	fp, #2
 8008132:	f000 80ba 	beq.w	80082aa <__kernel_rem_pio2+0x336>
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d14e      	bne.n	80081da <__kernel_rem_pio2+0x266>
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	2000      	movs	r0, #0
 8008142:	4948      	ldr	r1, [pc, #288]	; (8008264 <__kernel_rem_pio2+0x2f0>)
 8008144:	f7f8 f808 	bl	8000158 <__aeabi_dsub>
 8008148:	4680      	mov	r8, r0
 800814a:	4689      	mov	r9, r1
 800814c:	2c00      	cmp	r4, #0
 800814e:	d044      	beq.n	80081da <__kernel_rem_pio2+0x266>
 8008150:	465a      	mov	r2, fp
 8008152:	2000      	movs	r0, #0
 8008154:	4943      	ldr	r1, [pc, #268]	; (8008264 <__kernel_rem_pio2+0x2f0>)
 8008156:	f000 fb8b 	bl	8008870 <scalbn>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4640      	mov	r0, r8
 8008160:	4649      	mov	r1, r9
 8008162:	f7f7 fff9 	bl	8000158 <__aeabi_dsub>
 8008166:	4680      	mov	r8, r0
 8008168:	4689      	mov	r9, r1
 800816a:	e036      	b.n	80081da <__kernel_rem_pio2+0x266>
 800816c:	2200      	movs	r2, #0
 800816e:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <__kernel_rem_pio2+0x2f4>)
 8008170:	4620      	mov	r0, r4
 8008172:	4629      	mov	r1, r5
 8008174:	f7f8 f9a8 	bl	80004c8 <__aeabi_dmul>
 8008178:	f7f8 fc56 	bl	8000a28 <__aeabi_d2iz>
 800817c:	f7f8 f93a 	bl	80003f4 <__aeabi_i2d>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008188:	2200      	movs	r2, #0
 800818a:	4b38      	ldr	r3, [pc, #224]	; (800826c <__kernel_rem_pio2+0x2f8>)
 800818c:	f7f8 f99c 	bl	80004c8 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f7 ffde 	bl	8000158 <__aeabi_dsub>
 800819c:	f7f8 fc44 	bl	8000a28 <__aeabi_d2iz>
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80081a6:	f843 0b04 	str.w	r0, [r3], #4
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80081b4:	f7f7 ffd2 	bl	800015c <__adddf3>
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	e75f      	b.n	800807e <__kernel_rem_pio2+0x10a>
 80081be:	d105      	bne.n	80081cc <__kernel_rem_pio2+0x258>
 80081c0:	1e73      	subs	r3, r6, #1
 80081c2:	aa0c      	add	r2, sp, #48	; 0x30
 80081c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80081c8:	15c3      	asrs	r3, r0, #23
 80081ca:	e79b      	b.n	8008104 <__kernel_rem_pio2+0x190>
 80081cc:	2200      	movs	r2, #0
 80081ce:	4b28      	ldr	r3, [pc, #160]	; (8008270 <__kernel_rem_pio2+0x2fc>)
 80081d0:	f7f8 fc00 	bl	80009d4 <__aeabi_dcmpge>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d13e      	bne.n	8008256 <__kernel_rem_pio2+0x2e2>
 80081d8:	9000      	str	r0, [sp, #0]
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 fbd9 	bl	8000998 <__aeabi_dcmpeq>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f000 80b1 	beq.w	800834e <__kernel_rem_pio2+0x3da>
 80081ec:	1e74      	subs	r4, r6, #1
 80081ee:	4623      	mov	r3, r4
 80081f0:	2200      	movs	r2, #0
 80081f2:	9902      	ldr	r1, [sp, #8]
 80081f4:	428b      	cmp	r3, r1
 80081f6:	da5f      	bge.n	80082b8 <__kernel_rem_pio2+0x344>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d074      	beq.n	80082e6 <__kernel_rem_pio2+0x372>
 80081fc:	ab0c      	add	r3, sp, #48	; 0x30
 80081fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008202:	f1ab 0b18 	sub.w	fp, fp, #24
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 809f 	beq.w	800834a <__kernel_rem_pio2+0x3d6>
 800820c:	465a      	mov	r2, fp
 800820e:	2000      	movs	r0, #0
 8008210:	4914      	ldr	r1, [pc, #80]	; (8008264 <__kernel_rem_pio2+0x2f0>)
 8008212:	f000 fb2d 	bl	8008870 <scalbn>
 8008216:	46a2      	mov	sl, r4
 8008218:	4606      	mov	r6, r0
 800821a:	460f      	mov	r7, r1
 800821c:	f04f 0800 	mov.w	r8, #0
 8008220:	ab70      	add	r3, sp, #448	; 0x1c0
 8008222:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008268 <__kernel_rem_pio2+0x2f4>
 8008226:	00e5      	lsls	r5, r4, #3
 8008228:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800822c:	f1ba 0f00 	cmp.w	sl, #0
 8008230:	f280 80c3 	bge.w	80083ba <__kernel_rem_pio2+0x446>
 8008234:	4626      	mov	r6, r4
 8008236:	2e00      	cmp	r6, #0
 8008238:	f2c0 80f5 	blt.w	8008426 <__kernel_rem_pio2+0x4b2>
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <__kernel_rem_pio2+0x300>)
 800823e:	f04f 0a00 	mov.w	sl, #0
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	ab70      	add	r3, sp, #448	; 0x1c0
 8008246:	f04f 0b00 	mov.w	fp, #0
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008252:	1ba7      	subs	r7, r4, r6
 8008254:	e0db      	b.n	800840e <__kernel_rem_pio2+0x49a>
 8008256:	2302      	movs	r3, #2
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	e757      	b.n	800810c <__kernel_rem_pio2+0x198>
 800825c:	08008dc8 	.word	0x08008dc8
 8008260:	40200000 	.word	0x40200000
 8008264:	3ff00000 	.word	0x3ff00000
 8008268:	3e700000 	.word	0x3e700000
 800826c:	41700000 	.word	0x41700000
 8008270:	3fe00000 	.word	0x3fe00000
 8008274:	08008d88 	.word	0x08008d88
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	b944      	cbnz	r4, 800828e <__kernel_rem_pio2+0x31a>
 800827c:	b11b      	cbz	r3, 8008286 <__kernel_rem_pio2+0x312>
 800827e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	2301      	movs	r3, #1
 8008286:	461c      	mov	r4, r3
 8008288:	3201      	adds	r2, #1
 800828a:	3704      	adds	r7, #4
 800828c:	e745      	b.n	800811a <__kernel_rem_pio2+0x1a6>
 800828e:	1acb      	subs	r3, r1, r3
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4623      	mov	r3, r4
 8008294:	e7f7      	b.n	8008286 <__kernel_rem_pio2+0x312>
 8008296:	1e72      	subs	r2, r6, #1
 8008298:	ab0c      	add	r3, sp, #48	; 0x30
 800829a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80082a2:	a90c      	add	r1, sp, #48	; 0x30
 80082a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80082a8:	e745      	b.n	8008136 <__kernel_rem_pio2+0x1c2>
 80082aa:	1e72      	subs	r2, r6, #1
 80082ac:	ab0c      	add	r3, sp, #48	; 0x30
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80082b6:	e7f4      	b.n	80082a2 <__kernel_rem_pio2+0x32e>
 80082b8:	a90c      	add	r1, sp, #48	; 0x30
 80082ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80082be:	3b01      	subs	r3, #1
 80082c0:	430a      	orrs	r2, r1
 80082c2:	e796      	b.n	80081f2 <__kernel_rem_pio2+0x27e>
 80082c4:	3401      	adds	r4, #1
 80082c6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d0fa      	beq.n	80082c4 <__kernel_rem_pio2+0x350>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	f106 0801 	add.w	r8, r6, #1
 80082d4:	18f5      	adds	r5, r6, r3
 80082d6:	ab20      	add	r3, sp, #128	; 0x80
 80082d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80082dc:	4434      	add	r4, r6
 80082de:	4544      	cmp	r4, r8
 80082e0:	da04      	bge.n	80082ec <__kernel_rem_pio2+0x378>
 80082e2:	4626      	mov	r6, r4
 80082e4:	e6bf      	b.n	8008066 <__kernel_rem_pio2+0xf2>
 80082e6:	2401      	movs	r4, #1
 80082e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ea:	e7ec      	b.n	80082c6 <__kernel_rem_pio2+0x352>
 80082ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80082f6:	f7f8 f87d 	bl	80003f4 <__aeabi_i2d>
 80082fa:	2600      	movs	r6, #0
 80082fc:	2700      	movs	r7, #0
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	e9c5 0100 	strd	r0, r1, [r5]
 8008304:	3b08      	subs	r3, #8
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	9504      	str	r5, [sp, #16]
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	4599      	cmp	r9, r3
 800830e:	dd05      	ble.n	800831c <__kernel_rem_pio2+0x3a8>
 8008310:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008314:	f108 0801 	add.w	r8, r8, #1
 8008318:	3508      	adds	r5, #8
 800831a:	e7e0      	b.n	80082de <__kernel_rem_pio2+0x36a>
 800831c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008320:	9900      	ldr	r1, [sp, #0]
 8008322:	f109 0901 	add.w	r9, r9, #1
 8008326:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800832a:	9100      	str	r1, [sp, #0]
 800832c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008330:	f8cd c010 	str.w	ip, [sp, #16]
 8008334:	f7f8 f8c8 	bl	80004c8 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f7 ff0c 	bl	800015c <__adddf3>
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	e7df      	b.n	800830a <__kernel_rem_pio2+0x396>
 800834a:	3c01      	subs	r4, #1
 800834c:	e756      	b.n	80081fc <__kernel_rem_pio2+0x288>
 800834e:	f1cb 0200 	rsb	r2, fp, #0
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f000 fa8b 	bl	8008870 <scalbn>
 800835a:	2200      	movs	r2, #0
 800835c:	4ba4      	ldr	r3, [pc, #656]	; (80085f0 <__kernel_rem_pio2+0x67c>)
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	f7f8 fb37 	bl	80009d4 <__aeabi_dcmpge>
 8008366:	b1f8      	cbz	r0, 80083a8 <__kernel_rem_pio2+0x434>
 8008368:	2200      	movs	r2, #0
 800836a:	4ba2      	ldr	r3, [pc, #648]	; (80085f4 <__kernel_rem_pio2+0x680>)
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 f8aa 	bl	80004c8 <__aeabi_dmul>
 8008374:	f7f8 fb58 	bl	8000a28 <__aeabi_d2iz>
 8008378:	4607      	mov	r7, r0
 800837a:	f7f8 f83b 	bl	80003f4 <__aeabi_i2d>
 800837e:	2200      	movs	r2, #0
 8008380:	4b9b      	ldr	r3, [pc, #620]	; (80085f0 <__kernel_rem_pio2+0x67c>)
 8008382:	f7f8 f8a1 	bl	80004c8 <__aeabi_dmul>
 8008386:	460b      	mov	r3, r1
 8008388:	4602      	mov	r2, r0
 800838a:	4629      	mov	r1, r5
 800838c:	4620      	mov	r0, r4
 800838e:	f7f7 fee3 	bl	8000158 <__aeabi_dsub>
 8008392:	f7f8 fb49 	bl	8000a28 <__aeabi_d2iz>
 8008396:	1c74      	adds	r4, r6, #1
 8008398:	ab0c      	add	r3, sp, #48	; 0x30
 800839a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800839e:	f10b 0b18 	add.w	fp, fp, #24
 80083a2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80083a6:	e731      	b.n	800820c <__kernel_rem_pio2+0x298>
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f8 fb3c 	bl	8000a28 <__aeabi_d2iz>
 80083b0:	ab0c      	add	r3, sp, #48	; 0x30
 80083b2:	4634      	mov	r4, r6
 80083b4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80083b8:	e728      	b.n	800820c <__kernel_rem_pio2+0x298>
 80083ba:	ab0c      	add	r3, sp, #48	; 0x30
 80083bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80083c0:	f7f8 f818 	bl	80003f4 <__aeabi_i2d>
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	f7f8 f87e 	bl	80004c8 <__aeabi_dmul>
 80083cc:	4642      	mov	r2, r8
 80083ce:	e86b 0102 	strd	r0, r1, [fp], #-8
 80083d2:	464b      	mov	r3, r9
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 f876 	bl	80004c8 <__aeabi_dmul>
 80083dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	e722      	b.n	800822c <__kernel_rem_pio2+0x2b8>
 80083e6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80083ea:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80083ee:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80083f2:	f8cd c01c 	str.w	ip, [sp, #28]
 80083f6:	f7f8 f867 	bl	80004c8 <__aeabi_dmul>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4650      	mov	r0, sl
 8008400:	4659      	mov	r1, fp
 8008402:	f7f7 feab 	bl	800015c <__adddf3>
 8008406:	4682      	mov	sl, r0
 8008408:	468b      	mov	fp, r1
 800840a:	f108 0801 	add.w	r8, r8, #1
 800840e:	9b02      	ldr	r3, [sp, #8]
 8008410:	4598      	cmp	r8, r3
 8008412:	dc01      	bgt.n	8008418 <__kernel_rem_pio2+0x4a4>
 8008414:	45b8      	cmp	r8, r7
 8008416:	dde6      	ble.n	80083e6 <__kernel_rem_pio2+0x472>
 8008418:	ab48      	add	r3, sp, #288	; 0x120
 800841a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800841e:	e9c7 ab00 	strd	sl, fp, [r7]
 8008422:	3e01      	subs	r6, #1
 8008424:	e707      	b.n	8008236 <__kernel_rem_pio2+0x2c2>
 8008426:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008428:	2b02      	cmp	r3, #2
 800842a:	dc09      	bgt.n	8008440 <__kernel_rem_pio2+0x4cc>
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc32      	bgt.n	8008496 <__kernel_rem_pio2+0x522>
 8008430:	d05a      	beq.n	80084e8 <__kernel_rem_pio2+0x574>
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	f003 0007 	and.w	r0, r3, #7
 8008438:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008442:	2b03      	cmp	r3, #3
 8008444:	d1f5      	bne.n	8008432 <__kernel_rem_pio2+0x4be>
 8008446:	ab48      	add	r3, sp, #288	; 0x120
 8008448:	441d      	add	r5, r3
 800844a:	46aa      	mov	sl, r5
 800844c:	46a3      	mov	fp, r4
 800844e:	f1bb 0f00 	cmp.w	fp, #0
 8008452:	dc76      	bgt.n	8008542 <__kernel_rem_pio2+0x5ce>
 8008454:	46aa      	mov	sl, r5
 8008456:	46a3      	mov	fp, r4
 8008458:	f1bb 0f01 	cmp.w	fp, #1
 800845c:	f300 8090 	bgt.w	8008580 <__kernel_rem_pio2+0x60c>
 8008460:	2700      	movs	r7, #0
 8008462:	463e      	mov	r6, r7
 8008464:	2c01      	cmp	r4, #1
 8008466:	f300 80aa 	bgt.w	80085be <__kernel_rem_pio2+0x64a>
 800846a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800846e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 80ac 	bne.w	80085d2 <__kernel_rem_pio2+0x65e>
 800847a:	4603      	mov	r3, r0
 800847c:	462a      	mov	r2, r5
 800847e:	9806      	ldr	r0, [sp, #24]
 8008480:	e9c0 2300 	strd	r2, r3, [r0]
 8008484:	4622      	mov	r2, r4
 8008486:	460b      	mov	r3, r1
 8008488:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800848c:	463a      	mov	r2, r7
 800848e:	4633      	mov	r3, r6
 8008490:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008494:	e7cd      	b.n	8008432 <__kernel_rem_pio2+0x4be>
 8008496:	2000      	movs	r0, #0
 8008498:	46a0      	mov	r8, r4
 800849a:	4601      	mov	r1, r0
 800849c:	ab48      	add	r3, sp, #288	; 0x120
 800849e:	441d      	add	r5, r3
 80084a0:	f1b8 0f00 	cmp.w	r8, #0
 80084a4:	da3a      	bge.n	800851c <__kernel_rem_pio2+0x5a8>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d03e      	beq.n	800852a <__kernel_rem_pio2+0x5b6>
 80084ac:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80084b0:	4602      	mov	r2, r0
 80084b2:	462b      	mov	r3, r5
 80084b4:	9d06      	ldr	r5, [sp, #24]
 80084b6:	2601      	movs	r6, #1
 80084b8:	e9c5 2300 	strd	r2, r3, [r5]
 80084bc:	460b      	mov	r3, r1
 80084be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80084c2:	f7f7 fe49 	bl	8000158 <__aeabi_dsub>
 80084c6:	4684      	mov	ip, r0
 80084c8:	460f      	mov	r7, r1
 80084ca:	ad48      	add	r5, sp, #288	; 0x120
 80084cc:	42b4      	cmp	r4, r6
 80084ce:	f105 0508 	add.w	r5, r5, #8
 80084d2:	da2c      	bge.n	800852e <__kernel_rem_pio2+0x5ba>
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	b10b      	cbz	r3, 80084dc <__kernel_rem_pio2+0x568>
 80084d8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80084dc:	4662      	mov	r2, ip
 80084de:	463b      	mov	r3, r7
 80084e0:	9906      	ldr	r1, [sp, #24]
 80084e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80084e6:	e7a4      	b.n	8008432 <__kernel_rem_pio2+0x4be>
 80084e8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80084ea:	ab48      	add	r3, sp, #288	; 0x120
 80084ec:	4637      	mov	r7, r6
 80084ee:	441d      	add	r5, r3
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	da09      	bge.n	8008508 <__kernel_rem_pio2+0x594>
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	b10b      	cbz	r3, 80084fc <__kernel_rem_pio2+0x588>
 80084f8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	9906      	ldr	r1, [sp, #24]
 8008502:	e9c1 2300 	strd	r2, r3, [r1]
 8008506:	e794      	b.n	8008432 <__kernel_rem_pio2+0x4be>
 8008508:	4630      	mov	r0, r6
 800850a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800850e:	4639      	mov	r1, r7
 8008510:	f7f7 fe24 	bl	800015c <__adddf3>
 8008514:	3c01      	subs	r4, #1
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	e7e9      	b.n	80084f0 <__kernel_rem_pio2+0x57c>
 800851c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008520:	f7f7 fe1c 	bl	800015c <__adddf3>
 8008524:	f108 38ff 	add.w	r8, r8, #4294967295
 8008528:	e7ba      	b.n	80084a0 <__kernel_rem_pio2+0x52c>
 800852a:	460d      	mov	r5, r1
 800852c:	e7c0      	b.n	80084b0 <__kernel_rem_pio2+0x53c>
 800852e:	4660      	mov	r0, ip
 8008530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008534:	4639      	mov	r1, r7
 8008536:	f7f7 fe11 	bl	800015c <__adddf3>
 800853a:	3601      	adds	r6, #1
 800853c:	4684      	mov	ip, r0
 800853e:	460f      	mov	r7, r1
 8008540:	e7c4      	b.n	80084cc <__kernel_rem_pio2+0x558>
 8008542:	e9da 6700 	ldrd	r6, r7, [sl]
 8008546:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800854a:	4632      	mov	r2, r6
 800854c:	463b      	mov	r3, r7
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f7 fe03 	bl	800015c <__adddf3>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f7 fdf9 	bl	8000158 <__aeabi_dsub>
 8008566:	4632      	mov	r2, r6
 8008568:	463b      	mov	r3, r7
 800856a:	f7f7 fdf7 	bl	800015c <__adddf3>
 800856e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008572:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008576:	f10b 3bff 	add.w	fp, fp, #4294967295
 800857a:	e9ca 2300 	strd	r2, r3, [sl]
 800857e:	e766      	b.n	800844e <__kernel_rem_pio2+0x4da>
 8008580:	e9da 8900 	ldrd	r8, r9, [sl]
 8008584:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008588:	4642      	mov	r2, r8
 800858a:	464b      	mov	r3, r9
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f7 fde4 	bl	800015c <__adddf3>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f7 fdda 	bl	8000158 <__aeabi_dsub>
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	f7f7 fdd8 	bl	800015c <__adddf3>
 80085ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80085b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085b8:	e9ca 2300 	strd	r2, r3, [sl]
 80085bc:	e74c      	b.n	8008458 <__kernel_rem_pio2+0x4e4>
 80085be:	4638      	mov	r0, r7
 80085c0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80085c4:	4631      	mov	r1, r6
 80085c6:	f7f7 fdc9 	bl	800015c <__adddf3>
 80085ca:	3c01      	subs	r4, #1
 80085cc:	4607      	mov	r7, r0
 80085ce:	460e      	mov	r6, r1
 80085d0:	e748      	b.n	8008464 <__kernel_rem_pio2+0x4f0>
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80085d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80085e0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80085e4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80085e8:	601d      	str	r5, [r3, #0]
 80085ea:	615e      	str	r6, [r3, #20]
 80085ec:	e721      	b.n	8008432 <__kernel_rem_pio2+0x4be>
 80085ee:	bf00      	nop
 80085f0:	41700000 	.word	0x41700000
 80085f4:	3e700000 	.word	0x3e700000

080085f8 <__kernel_sin>:
 80085f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	b086      	sub	sp, #24
 80085fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008602:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008606:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800860a:	4682      	mov	sl, r0
 800860c:	460c      	mov	r4, r1
 800860e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008610:	da03      	bge.n	800861a <__kernel_sin+0x22>
 8008612:	f7f8 fa09 	bl	8000a28 <__aeabi_d2iz>
 8008616:	2800      	cmp	r0, #0
 8008618:	d050      	beq.n	80086bc <__kernel_sin+0xc4>
 800861a:	4652      	mov	r2, sl
 800861c:	4623      	mov	r3, r4
 800861e:	4650      	mov	r0, sl
 8008620:	4621      	mov	r1, r4
 8008622:	f7f7 ff51 	bl	80004c8 <__aeabi_dmul>
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4650      	mov	r0, sl
 8008630:	4621      	mov	r1, r4
 8008632:	f7f7 ff49 	bl	80004c8 <__aeabi_dmul>
 8008636:	a33e      	add	r3, pc, #248	; (adr r3, 8008730 <__kernel_sin+0x138>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 ff40 	bl	80004c8 <__aeabi_dmul>
 8008648:	a33b      	add	r3, pc, #236	; (adr r3, 8008738 <__kernel_sin+0x140>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 fd83 	bl	8000158 <__aeabi_dsub>
 8008652:	4632      	mov	r2, r6
 8008654:	463b      	mov	r3, r7
 8008656:	f7f7 ff37 	bl	80004c8 <__aeabi_dmul>
 800865a:	a339      	add	r3, pc, #228	; (adr r3, 8008740 <__kernel_sin+0x148>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 fd7c 	bl	800015c <__adddf3>
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	f7f7 ff2e 	bl	80004c8 <__aeabi_dmul>
 800866c:	a336      	add	r3, pc, #216	; (adr r3, 8008748 <__kernel_sin+0x150>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fd71 	bl	8000158 <__aeabi_dsub>
 8008676:	4632      	mov	r2, r6
 8008678:	463b      	mov	r3, r7
 800867a:	f7f7 ff25 	bl	80004c8 <__aeabi_dmul>
 800867e:	a334      	add	r3, pc, #208	; (adr r3, 8008750 <__kernel_sin+0x158>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 fd6a 	bl	800015c <__adddf3>
 8008688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868c:	b9dd      	cbnz	r5, 80086c6 <__kernel_sin+0xce>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4630      	mov	r0, r6
 8008694:	4639      	mov	r1, r7
 8008696:	f7f7 ff17 	bl	80004c8 <__aeabi_dmul>
 800869a:	a32f      	add	r3, pc, #188	; (adr r3, 8008758 <__kernel_sin+0x160>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fd5a 	bl	8000158 <__aeabi_dsub>
 80086a4:	4642      	mov	r2, r8
 80086a6:	464b      	mov	r3, r9
 80086a8:	f7f7 ff0e 	bl	80004c8 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4650      	mov	r0, sl
 80086b2:	4621      	mov	r1, r4
 80086b4:	f7f7 fd52 	bl	800015c <__adddf3>
 80086b8:	4682      	mov	sl, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	4650      	mov	r0, sl
 80086be:	4621      	mov	r1, r4
 80086c0:	b006      	add	sp, #24
 80086c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c6:	2200      	movs	r2, #0
 80086c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086cc:	4b24      	ldr	r3, [pc, #144]	; (8008760 <__kernel_sin+0x168>)
 80086ce:	f7f7 fefb 	bl	80004c8 <__aeabi_dmul>
 80086d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fef3 	bl	80004c8 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ea:	f7f7 fd35 	bl	8000158 <__aeabi_dsub>
 80086ee:	4632      	mov	r2, r6
 80086f0:	463b      	mov	r3, r7
 80086f2:	f7f7 fee9 	bl	80004c8 <__aeabi_dmul>
 80086f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086fa:	f7f7 fd2d 	bl	8000158 <__aeabi_dsub>
 80086fe:	a316      	add	r3, pc, #88	; (adr r3, 8008758 <__kernel_sin+0x160>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f7 fedc 	bl	80004c8 <__aeabi_dmul>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f7 fd20 	bl	800015c <__adddf3>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4650      	mov	r0, sl
 8008722:	4621      	mov	r1, r4
 8008724:	f7f7 fd18 	bl	8000158 <__aeabi_dsub>
 8008728:	e7c6      	b.n	80086b8 <__kernel_sin+0xc0>
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w
 8008730:	5acfd57c 	.word	0x5acfd57c
 8008734:	3de5d93a 	.word	0x3de5d93a
 8008738:	8a2b9ceb 	.word	0x8a2b9ceb
 800873c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008740:	57b1fe7d 	.word	0x57b1fe7d
 8008744:	3ec71de3 	.word	0x3ec71de3
 8008748:	19c161d5 	.word	0x19c161d5
 800874c:	3f2a01a0 	.word	0x3f2a01a0
 8008750:	1110f8a6 	.word	0x1110f8a6
 8008754:	3f811111 	.word	0x3f811111
 8008758:	55555549 	.word	0x55555549
 800875c:	3fc55555 	.word	0x3fc55555
 8008760:	3fe00000 	.word	0x3fe00000

08008764 <fabs>:
 8008764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008768:	4770      	bx	lr
 800876a:	0000      	movs	r0, r0
 800876c:	0000      	movs	r0, r0
	...

08008770 <floor>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008778:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800877c:	2e13      	cmp	r6, #19
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4607      	mov	r7, r0
 8008784:	460c      	mov	r4, r1
 8008786:	4605      	mov	r5, r0
 8008788:	dc33      	bgt.n	80087f2 <floor+0x82>
 800878a:	2e00      	cmp	r6, #0
 800878c:	da14      	bge.n	80087b8 <floor+0x48>
 800878e:	a334      	add	r3, pc, #208	; (adr r3, 8008860 <floor+0xf0>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f7f7 fce2 	bl	800015c <__adddf3>
 8008798:	2200      	movs	r2, #0
 800879a:	2300      	movs	r3, #0
 800879c:	f7f8 f924 	bl	80009e8 <__aeabi_dcmpgt>
 80087a0:	b138      	cbz	r0, 80087b2 <floor+0x42>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	da58      	bge.n	8008858 <floor+0xe8>
 80087a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80087aa:	431d      	orrs	r5, r3
 80087ac:	d001      	beq.n	80087b2 <floor+0x42>
 80087ae:	2500      	movs	r5, #0
 80087b0:	4c2d      	ldr	r4, [pc, #180]	; (8008868 <floor+0xf8>)
 80087b2:	4623      	mov	r3, r4
 80087b4:	462f      	mov	r7, r5
 80087b6:	e025      	b.n	8008804 <floor+0x94>
 80087b8:	4a2c      	ldr	r2, [pc, #176]	; (800886c <floor+0xfc>)
 80087ba:	fa42 f806 	asr.w	r8, r2, r6
 80087be:	ea01 0208 	and.w	r2, r1, r8
 80087c2:	4302      	orrs	r2, r0
 80087c4:	d01e      	beq.n	8008804 <floor+0x94>
 80087c6:	a326      	add	r3, pc, #152	; (adr r3, 8008860 <floor+0xf0>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f7f7 fcc6 	bl	800015c <__adddf3>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	f7f8 f908 	bl	80009e8 <__aeabi_dcmpgt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0ea      	beq.n	80087b2 <floor+0x42>
 80087dc:	2c00      	cmp	r4, #0
 80087de:	bfbe      	ittt	lt
 80087e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80087e4:	fa43 f606 	asrlt.w	r6, r3, r6
 80087e8:	19a4      	addlt	r4, r4, r6
 80087ea:	2500      	movs	r5, #0
 80087ec:	ea24 0408 	bic.w	r4, r4, r8
 80087f0:	e7df      	b.n	80087b2 <floor+0x42>
 80087f2:	2e33      	cmp	r6, #51	; 0x33
 80087f4:	dd0a      	ble.n	800880c <floor+0x9c>
 80087f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80087fa:	d103      	bne.n	8008804 <floor+0x94>
 80087fc:	f7f7 fcae 	bl	800015c <__adddf3>
 8008800:	4607      	mov	r7, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4638      	mov	r0, r7
 8008806:	4619      	mov	r1, r3
 8008808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008814:	fa22 f808 	lsr.w	r8, r2, r8
 8008818:	ea18 0f00 	tst.w	r8, r0
 800881c:	d0f2      	beq.n	8008804 <floor+0x94>
 800881e:	a310      	add	r3, pc, #64	; (adr r3, 8008860 <floor+0xf0>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fc9a 	bl	800015c <__adddf3>
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	f7f8 f8dc 	bl	80009e8 <__aeabi_dcmpgt>
 8008830:	2800      	cmp	r0, #0
 8008832:	d0be      	beq.n	80087b2 <floor+0x42>
 8008834:	2c00      	cmp	r4, #0
 8008836:	da02      	bge.n	800883e <floor+0xce>
 8008838:	2e14      	cmp	r6, #20
 800883a:	d103      	bne.n	8008844 <floor+0xd4>
 800883c:	3401      	adds	r4, #1
 800883e:	ea25 0508 	bic.w	r5, r5, r8
 8008842:	e7b6      	b.n	80087b2 <floor+0x42>
 8008844:	2301      	movs	r3, #1
 8008846:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800884a:	fa03 f606 	lsl.w	r6, r3, r6
 800884e:	4435      	add	r5, r6
 8008850:	42bd      	cmp	r5, r7
 8008852:	bf38      	it	cc
 8008854:	18e4      	addcc	r4, r4, r3
 8008856:	e7f2      	b.n	800883e <floor+0xce>
 8008858:	2500      	movs	r5, #0
 800885a:	462c      	mov	r4, r5
 800885c:	e7a9      	b.n	80087b2 <floor+0x42>
 800885e:	bf00      	nop
 8008860:	8800759c 	.word	0x8800759c
 8008864:	7e37e43c 	.word	0x7e37e43c
 8008868:	bff00000 	.word	0xbff00000
 800886c:	000fffff 	.word	0x000fffff

08008870 <scalbn>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008876:	4604      	mov	r4, r0
 8008878:	460d      	mov	r5, r1
 800887a:	4617      	mov	r7, r2
 800887c:	460b      	mov	r3, r1
 800887e:	b996      	cbnz	r6, 80088a6 <scalbn+0x36>
 8008880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008884:	4303      	orrs	r3, r0
 8008886:	d039      	beq.n	80088fc <scalbn+0x8c>
 8008888:	4b33      	ldr	r3, [pc, #204]	; (8008958 <scalbn+0xe8>)
 800888a:	2200      	movs	r2, #0
 800888c:	f7f7 fe1c 	bl	80004c8 <__aeabi_dmul>
 8008890:	4b32      	ldr	r3, [pc, #200]	; (800895c <scalbn+0xec>)
 8008892:	4604      	mov	r4, r0
 8008894:	429f      	cmp	r7, r3
 8008896:	460d      	mov	r5, r1
 8008898:	da0f      	bge.n	80088ba <scalbn+0x4a>
 800889a:	a32b      	add	r3, pc, #172	; (adr r3, 8008948 <scalbn+0xd8>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 fe12 	bl	80004c8 <__aeabi_dmul>
 80088a4:	e006      	b.n	80088b4 <scalbn+0x44>
 80088a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80088aa:	4296      	cmp	r6, r2
 80088ac:	d10a      	bne.n	80088c4 <scalbn+0x54>
 80088ae:	4602      	mov	r2, r0
 80088b0:	f7f7 fc54 	bl	800015c <__adddf3>
 80088b4:	4604      	mov	r4, r0
 80088b6:	460d      	mov	r5, r1
 80088b8:	e020      	b.n	80088fc <scalbn+0x8c>
 80088ba:	460b      	mov	r3, r1
 80088bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80088c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80088c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80088c8:	19b9      	adds	r1, r7, r6
 80088ca:	4291      	cmp	r1, r2
 80088cc:	dd0e      	ble.n	80088ec <scalbn+0x7c>
 80088ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80088d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80088d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80088da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80088de:	4820      	ldr	r0, [pc, #128]	; (8008960 <scalbn+0xf0>)
 80088e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80088e4:	a31a      	add	r3, pc, #104	; (adr r3, 8008950 <scalbn+0xe0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	e7d9      	b.n	80088a0 <scalbn+0x30>
 80088ec:	2900      	cmp	r1, #0
 80088ee:	dd08      	ble.n	8008902 <scalbn+0x92>
 80088f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008902:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008906:	da12      	bge.n	800892e <scalbn+0xbe>
 8008908:	f24c 3350 	movw	r3, #50000	; 0xc350
 800890c:	429f      	cmp	r7, r3
 800890e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008912:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008916:	dcdc      	bgt.n	80088d2 <scalbn+0x62>
 8008918:	a30b      	add	r3, pc, #44	; (adr r3, 8008948 <scalbn+0xd8>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008922:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008926:	480f      	ldr	r0, [pc, #60]	; (8008964 <scalbn+0xf4>)
 8008928:	f041 011f 	orr.w	r1, r1, #31
 800892c:	e7b8      	b.n	80088a0 <scalbn+0x30>
 800892e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008932:	3136      	adds	r1, #54	; 0x36
 8008934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008938:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	2200      	movs	r2, #0
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <scalbn+0xf8>)
 8008944:	e7ac      	b.n	80088a0 <scalbn+0x30>
 8008946:	bf00      	nop
 8008948:	c2f8f359 	.word	0xc2f8f359
 800894c:	01a56e1f 	.word	0x01a56e1f
 8008950:	8800759c 	.word	0x8800759c
 8008954:	7e37e43c 	.word	0x7e37e43c
 8008958:	43500000 	.word	0x43500000
 800895c:	ffff3cb0 	.word	0xffff3cb0
 8008960:	8800759c 	.word	0x8800759c
 8008964:	c2f8f359 	.word	0xc2f8f359
 8008968:	3c900000 	.word	0x3c900000

0800896c <atanf>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008974:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008978:	4604      	mov	r4, r0
 800897a:	4680      	mov	r8, r0
 800897c:	db0e      	blt.n	800899c <atanf+0x30>
 800897e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008982:	dd04      	ble.n	800898e <atanf+0x22>
 8008984:	4601      	mov	r1, r0
 8008986:	f7f8 f8cd 	bl	8000b24 <__addsf3>
 800898a:	4604      	mov	r4, r0
 800898c:	e003      	b.n	8008996 <atanf+0x2a>
 800898e:	2800      	cmp	r0, #0
 8008990:	f300 80ce 	bgt.w	8008b30 <atanf+0x1c4>
 8008994:	4c67      	ldr	r4, [pc, #412]	; (8008b34 <atanf+0x1c8>)
 8008996:	4620      	mov	r0, r4
 8008998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899c:	4b66      	ldr	r3, [pc, #408]	; (8008b38 <atanf+0x1cc>)
 800899e:	429d      	cmp	r5, r3
 80089a0:	dc0e      	bgt.n	80089c0 <atanf+0x54>
 80089a2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80089a6:	da08      	bge.n	80089ba <atanf+0x4e>
 80089a8:	4964      	ldr	r1, [pc, #400]	; (8008b3c <atanf+0x1d0>)
 80089aa:	f7f8 f8bb 	bl	8000b24 <__addsf3>
 80089ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089b2:	f7f8 fb7b 	bl	80010ac <__aeabi_fcmpgt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d1ed      	bne.n	8008996 <atanf+0x2a>
 80089ba:	f04f 36ff 	mov.w	r6, #4294967295
 80089be:	e01c      	b.n	80089fa <atanf+0x8e>
 80089c0:	f000 f8e0 	bl	8008b84 <fabsf>
 80089c4:	4b5e      	ldr	r3, [pc, #376]	; (8008b40 <atanf+0x1d4>)
 80089c6:	4604      	mov	r4, r0
 80089c8:	429d      	cmp	r5, r3
 80089ca:	dc7c      	bgt.n	8008ac6 <atanf+0x15a>
 80089cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80089d0:	429d      	cmp	r5, r3
 80089d2:	dc67      	bgt.n	8008aa4 <atanf+0x138>
 80089d4:	4601      	mov	r1, r0
 80089d6:	f7f8 f8a5 	bl	8000b24 <__addsf3>
 80089da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089de:	f7f8 f89f 	bl	8000b20 <__aeabi_fsub>
 80089e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80089e6:	4605      	mov	r5, r0
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7f8 f89b 	bl	8000b24 <__addsf3>
 80089ee:	4601      	mov	r1, r0
 80089f0:	4628      	mov	r0, r5
 80089f2:	f7f8 fa53 	bl	8000e9c <__aeabi_fdiv>
 80089f6:	2600      	movs	r6, #0
 80089f8:	4604      	mov	r4, r0
 80089fa:	4621      	mov	r1, r4
 80089fc:	4620      	mov	r0, r4
 80089fe:	f7f8 f999 	bl	8000d34 <__aeabi_fmul>
 8008a02:	4601      	mov	r1, r0
 8008a04:	4607      	mov	r7, r0
 8008a06:	f7f8 f995 	bl	8000d34 <__aeabi_fmul>
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	494d      	ldr	r1, [pc, #308]	; (8008b44 <atanf+0x1d8>)
 8008a0e:	f7f8 f991 	bl	8000d34 <__aeabi_fmul>
 8008a12:	494d      	ldr	r1, [pc, #308]	; (8008b48 <atanf+0x1dc>)
 8008a14:	f7f8 f886 	bl	8000b24 <__addsf3>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f8 f98b 	bl	8000d34 <__aeabi_fmul>
 8008a1e:	494b      	ldr	r1, [pc, #300]	; (8008b4c <atanf+0x1e0>)
 8008a20:	f7f8 f880 	bl	8000b24 <__addsf3>
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f8 f985 	bl	8000d34 <__aeabi_fmul>
 8008a2a:	4949      	ldr	r1, [pc, #292]	; (8008b50 <atanf+0x1e4>)
 8008a2c:	f7f8 f87a 	bl	8000b24 <__addsf3>
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f8 f97f 	bl	8000d34 <__aeabi_fmul>
 8008a36:	4947      	ldr	r1, [pc, #284]	; (8008b54 <atanf+0x1e8>)
 8008a38:	f7f8 f874 	bl	8000b24 <__addsf3>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f8 f979 	bl	8000d34 <__aeabi_fmul>
 8008a42:	4945      	ldr	r1, [pc, #276]	; (8008b58 <atanf+0x1ec>)
 8008a44:	f7f8 f86e 	bl	8000b24 <__addsf3>
 8008a48:	4639      	mov	r1, r7
 8008a4a:	f7f8 f973 	bl	8000d34 <__aeabi_fmul>
 8008a4e:	4943      	ldr	r1, [pc, #268]	; (8008b5c <atanf+0x1f0>)
 8008a50:	4607      	mov	r7, r0
 8008a52:	4628      	mov	r0, r5
 8008a54:	f7f8 f96e 	bl	8000d34 <__aeabi_fmul>
 8008a58:	4941      	ldr	r1, [pc, #260]	; (8008b60 <atanf+0x1f4>)
 8008a5a:	f7f8 f861 	bl	8000b20 <__aeabi_fsub>
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f7f8 f968 	bl	8000d34 <__aeabi_fmul>
 8008a64:	493f      	ldr	r1, [pc, #252]	; (8008b64 <atanf+0x1f8>)
 8008a66:	f7f8 f85b 	bl	8000b20 <__aeabi_fsub>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f8 f962 	bl	8000d34 <__aeabi_fmul>
 8008a70:	493d      	ldr	r1, [pc, #244]	; (8008b68 <atanf+0x1fc>)
 8008a72:	f7f8 f855 	bl	8000b20 <__aeabi_fsub>
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f8 f95c 	bl	8000d34 <__aeabi_fmul>
 8008a7c:	493b      	ldr	r1, [pc, #236]	; (8008b6c <atanf+0x200>)
 8008a7e:	f7f8 f84f 	bl	8000b20 <__aeabi_fsub>
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f8 f956 	bl	8000d34 <__aeabi_fmul>
 8008a88:	4601      	mov	r1, r0
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f7f8 f84a 	bl	8000b24 <__addsf3>
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7f8 f94f 	bl	8000d34 <__aeabi_fmul>
 8008a96:	1c73      	adds	r3, r6, #1
 8008a98:	4601      	mov	r1, r0
 8008a9a:	d133      	bne.n	8008b04 <atanf+0x198>
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f7f8 f83f 	bl	8000b20 <__aeabi_fsub>
 8008aa2:	e772      	b.n	800898a <atanf+0x1e>
 8008aa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008aa8:	f7f8 f83a 	bl	8000b20 <__aeabi_fsub>
 8008aac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7f8 f836 	bl	8000b24 <__addsf3>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7f8 f9ee 	bl	8000e9c <__aeabi_fdiv>
 8008ac0:	2601      	movs	r6, #1
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	e799      	b.n	80089fa <atanf+0x8e>
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <atanf+0x204>)
 8008ac8:	429d      	cmp	r5, r3
 8008aca:	dc14      	bgt.n	8008af6 <atanf+0x18a>
 8008acc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008ad0:	f7f8 f826 	bl	8000b20 <__aeabi_fsub>
 8008ad4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008ad8:	4605      	mov	r5, r0
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7f8 f92a 	bl	8000d34 <__aeabi_fmul>
 8008ae0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ae4:	f7f8 f81e 	bl	8000b24 <__addsf3>
 8008ae8:	4601      	mov	r1, r0
 8008aea:	4628      	mov	r0, r5
 8008aec:	f7f8 f9d6 	bl	8000e9c <__aeabi_fdiv>
 8008af0:	2602      	movs	r6, #2
 8008af2:	4604      	mov	r4, r0
 8008af4:	e781      	b.n	80089fa <atanf+0x8e>
 8008af6:	4601      	mov	r1, r0
 8008af8:	481e      	ldr	r0, [pc, #120]	; (8008b74 <atanf+0x208>)
 8008afa:	f7f8 f9cf 	bl	8000e9c <__aeabi_fdiv>
 8008afe:	2603      	movs	r6, #3
 8008b00:	4604      	mov	r4, r0
 8008b02:	e77a      	b.n	80089fa <atanf+0x8e>
 8008b04:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <atanf+0x20c>)
 8008b06:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008b0a:	f7f8 f809 	bl	8000b20 <__aeabi_fsub>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f7f8 f806 	bl	8000b20 <__aeabi_fsub>
 8008b14:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <atanf+0x210>)
 8008b16:	4601      	mov	r1, r0
 8008b18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b1c:	f7f8 f800 	bl	8000b20 <__aeabi_fsub>
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	4604      	mov	r4, r0
 8008b26:	f6bf af36 	bge.w	8008996 <atanf+0x2a>
 8008b2a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008b2e:	e72c      	b.n	800898a <atanf+0x1e>
 8008b30:	4c13      	ldr	r4, [pc, #76]	; (8008b80 <atanf+0x214>)
 8008b32:	e730      	b.n	8008996 <atanf+0x2a>
 8008b34:	bfc90fdb 	.word	0xbfc90fdb
 8008b38:	3edfffff 	.word	0x3edfffff
 8008b3c:	7149f2ca 	.word	0x7149f2ca
 8008b40:	3f97ffff 	.word	0x3f97ffff
 8008b44:	3c8569d7 	.word	0x3c8569d7
 8008b48:	3d4bda59 	.word	0x3d4bda59
 8008b4c:	3d886b35 	.word	0x3d886b35
 8008b50:	3dba2e6e 	.word	0x3dba2e6e
 8008b54:	3e124925 	.word	0x3e124925
 8008b58:	3eaaaaab 	.word	0x3eaaaaab
 8008b5c:	bd15a221 	.word	0xbd15a221
 8008b60:	3d6ef16b 	.word	0x3d6ef16b
 8008b64:	3d9d8795 	.word	0x3d9d8795
 8008b68:	3de38e38 	.word	0x3de38e38
 8008b6c:	3e4ccccd 	.word	0x3e4ccccd
 8008b70:	401bffff 	.word	0x401bffff
 8008b74:	bf800000 	.word	0xbf800000
 8008b78:	08008de8 	.word	0x08008de8
 8008b7c:	08008dd8 	.word	0x08008dd8
 8008b80:	3fc90fdb 	.word	0x3fc90fdb

08008b84 <fabsf>:
 8008b84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008b88:	4770      	bx	lr
	...

08008b8c <_init>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr

08008b98 <_fini>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr
